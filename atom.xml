<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不会飞的小白</title>
  
  <subtitle>Stay Hungry, Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liujiaboy.github.io/"/>
  <updated>2021-05-24T10:58:50.349Z</updated>
  <id>http://liujiaboy.github.io/</id>
  
  <author>
    <name>不会飞的小白</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>block</title>
    <link href="http://liujiaboy.github.io/2021/05/22/OC%E5%8E%9F%E7%90%86/block/"/>
    <id>http://liujiaboy.github.io/2021/05/22/OC%E5%8E%9F%E7%90%86/block/</id>
    <published>2021-05-22T08:56:34.000Z</published>
    <updated>2021-05-24T10:58:50.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Block的类型"><a href="#Block的类型" class="headerlink" title="Block的类型"></a>Block的类型</h1><p>Block分为 Malloc Block、 Stack Block、Global Block，但是怎么做区分呢？</p><p>在 ARC下:</p><ul><li><p>只要没有访问外部变量（或者访问的是全局变量，静态变量），就是全局block</p></li><li><p>如果访问了外部变量，在block声明的时候是stack block，在执行了copy之后就是malloc block</p></li><li><p>执行过copy操作的（全局block除外），是malloc block</p></li></ul><p>结论放这里，可以试一下哈。stack block在下面的章节中有提到过。iOS14之后对stack block做了处理。</p><h1 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">typedef void(^testBlock)(void);</span><br><span class="line">@interface BlockViewController ()</span><br><span class="line"></span><br><span class="line">@property (nonatomic, copy) testBlock block;</span><br><span class="line">@property (nonatomic, copy) NSString *name;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation BlockViewController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    &#x2F;&#x2F; 循环引用</span><br><span class="line">    self.name &#x3D; @&quot;blcok demo&quot;;</span><br><span class="line">    [self blockDemo];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)blockDemo &#123;</span><br><span class="line">    self.block &#x3D; ^(void)&#123;</span><br><span class="line">        NSLog(@&quot;%@&quot;, self.name);</span><br><span class="line">    &#125;;</span><br><span class="line">    self.block();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)dealloc &#123;</span><br><span class="line">    NSLog(@&quot;dealloc 来了&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>从A页面进来<code>BlockViewController</code>，点击返回，就发现没有走dealloc，因为发生了循环引用。</p><p>在BlockVC中，self 持有 block， block持有self，就造成了循环引用。导致无法释放。</p><p>self -&gt; block -&gt; self<br>怎么解决这个问题，按照这个环的形成，正常来说应该有2种解决方案：</p><h2 id="打破第一个环，self-gt-block。"><a href="#打破第一个环，self-gt-block。" class="headerlink" title="打破第一个环，self -&gt; block。"></a>打破第一个环，self -&gt; block。</h2><pre><code>1. 现在是使用的copy修饰的block，如果换成weak修饰是否可以打破？2. 答案是不行的，因为使用weak修饰，没有被强持有，初始化之后就会被释放掉，block压根不会执行。3. 所以就只能使用第二种方案了。</code></pre><h2 id="打破第二个环，block-gt-self。"><a href="#打破第二个环，block-gt-self。" class="headerlink" title="打破第二个环，block -&gt; self。"></a>打破第二个环，block -&gt; self。</h2><h3 id="weak-strong-dance"><a href="#weak-strong-dance" class="headerlink" title="weak strong dance"></a>weak strong dance</h3><p>首先我们使用__weak来处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (void)blockDemo &#123;</span><br><span class="line">    __weak typeof(self) weakSelf &#x3D; self;</span><br><span class="line">    self.block &#x3D; ^(void)&#123;</span><br><span class="line">        NSLog(@&quot;%@&quot;, weakSelf);</span><br><span class="line">    &#125;;</span><br><span class="line">    self.block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>确实可以解决引用循环。但是会有一个问题，__weak持有的self，是存放在weak表中的，如果，self被释放之后，weakSelf也会被释放掉，整个weak表都会释放。所以当延后执行就会发生问题了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (void)blockDemo &#123;</span><br><span class="line">    __weak typeof(self) weakSelf &#x3D; self;</span><br><span class="line">    self.block &#x3D; ^(void)&#123;</span><br><span class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            NSLog(@&quot;%@&quot;, weakSelf.name);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    self.block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们延后2s打印数据，进来之后，直接退出，发现打印的就是空。这不符合我们的使用。所以就添加了__strong来修饰weak。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (void)blockDemo &#123;</span><br><span class="line">    __weak typeof(self) weakSelf &#x3D; self;</span><br><span class="line">    self.block &#x3D; ^(void) &#123;</span><br><span class="line">        __strong __typeof(weakSelf)strongSelf &#x3D; weakSelf; &#x2F;&#x2F; 可以释放 when</span><br><span class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            NSLog(@&quot;%@&quot;,strongSelf.name);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    self.block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候就没有问题了。</p><p>weak-strong-dance是系统自动帮助我们解决引用循环。</p><h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><p>我们只需要破坏掉block -&gt; self的这个环就可以了，处理weak-strong之外，还有另外一种方法，中介者模式。</p><p>中介者模式则需要我们手动解决循环引用。</p><ol><li><p>使用__block 创建一个变量，替代self</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (void)blockDemo &#123;</span><br><span class="line">    __block ViewController *vc &#x3D; self;</span><br><span class="line">    self.block &#x3D; ^(void)&#123;</span><br><span class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            NSLog(@&quot;%@&quot;,vc.name);</span><br><span class="line">            vc &#x3D; nil;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    self.block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 使用__block修饰代替self，然后在block执行完毕时，重新置空，也可以打破block持有self的环。</p></li><li><p>修改block，添加参数</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">typedef void(^testBlock)(ViewController *);</span><br><span class="line"></span><br><span class="line">- (void)blockDemo &#123;</span><br><span class="line">    self.block &#x3D; ^(ViewController *vc)&#123;</span><br><span class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            NSLog(@&quot;%@&quot;,vc.name);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    self.block(self);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 我们可以不让block持有self，可以把self对应的<code>BlockViewController</code>当做参数传到block中，这样也可以打破block持有self的环。</p></li></ol><p>当然还有其他的方式可以解决，毕竟怎么传值的方式有很多种，比如NSProxy等。</p><h1 id="Block-clang分析"><a href="#Block-clang分析" class="headerlink" title="Block clang分析"></a>Block clang分析</h1><p>我们在main.m文件中添加一个最简单的block，然后通过clang进行编译，查看main.cpp文件，看看block的一些底层原理。</p><p>我们直接创建一个main.m文件。不需要使用工程，当然也可以创建一个工程，在main.m中添加代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stdio.h&quot;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">    void (^block)() &#x3D; ^()&#123;</span><br><span class="line">        printf(&quot;hello block&quot;);</span><br><span class="line">    &#125;;</span><br><span class="line">    block();</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们使用clang命令编译该文件<br><code>clang -rewrite-objc main.c -o main.cpp</code></p><p>或者 使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -rewrite-objc -fobjc-arc -fobjc-runtime&#x3D;ios-14.0.0 -isysroot &#x2F;Applications&#x2F;Xcode.app&#x2F;Contents&#x2F;Developer&#x2F;Platforms&#x2F;iPhoneSimulator.platform&#x2F;Developer&#x2F;SDKs&#x2F;iPhoneSimulator14.3.sdk main.m</span><br></pre></td></tr></table></figure><p>我们通过main.cpp文件学习一下block</p><h2 id="没有外部变量的block"><a href="#没有外部变量的block" class="headerlink" title="没有外部变量的block"></a>没有外部变量的block</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">    void (*block)() &#x3D; ((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA));</span><br><span class="line">    ((void (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来很乱，我们简化一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">    &#x2F;&#x2F; block &#x3D; __main_block_impl_0(参数1，参数2)</span><br><span class="line">    void (*block)() &#x3D; __main_block_impl_0(__main_block_func_0, &amp;__main_block_desc_0_DATA);</span><br><span class="line">    &#x2F;&#x2F; block执行，调用方法，参数是block本身</span><br><span class="line">    block-&gt;FuncPtr(block);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先看一下<code>__main_block_impl_0</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">struct __main_block_impl_0 &#123;</span><br><span class="line">  struct __block_impl impl;</span><br><span class="line">  struct __main_block_desc_0* Desc;</span><br><span class="line">  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int flags&#x3D;0) &#123;</span><br><span class="line">    impl.isa &#x3D; &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags &#x3D; flags;</span><br><span class="line">    impl.FuncPtr &#x3D; fp;</span><br><span class="line">    Desc &#x3D; desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>__main_block_impl_0</code>即是一个结构体，又是一个<code>__main_block_impl_0()</code>方法。结构体内部还有两个结构体<code>impl</code>和<code>Desc</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">struct __block_impl &#123;</span><br><span class="line">  void *isa;        &#x2F;&#x2F; isa指针</span><br><span class="line">  int Flags;        &#x2F;&#x2F; flags</span><br><span class="line">  int Reserved;     &#x2F;&#x2F;</span><br><span class="line">  void *FuncPtr;    &#x2F;&#x2F; 函数</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">static struct __main_block_desc_0 &#123;</span><br><span class="line">  size_t reserved;      &#x2F;&#x2F;</span><br><span class="line">  size_t Block_size;    &#x2F;&#x2F; </span><br><span class="line">&#125; __main_block_desc_0_DATA &#x3D; &#123; 0, sizeof(struct __main_block_impl_0)&#125;;</span><br></pre></td></tr></table></figure><ul><li>impl.isa指针，指向的是stack block</li><li>impl.Flasg = 0。</li><li>impl.FuncPtr = fp，也就是<code>__main_block_func_0</code>。这种属于函数式，函数做为参数。</li><li>Desc = desc，&amp;__main_block_desc_0_DATA</li></ul><p>而<code>__main_block_func_0</code>这个方法长这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">    printf(&quot;hello block&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数有一个参数就是block本身。之所以需要当成参数传进来，是因为，方便block获取值来使用，在接下来的block引入外部变量一看就知道了。</p><h2 id="block引入外部变量"><a href="#block引入外部变量" class="headerlink" title="block引入外部变量"></a>block引入外部变量</h2><p>改变一些main.m，加入一个外部变量a。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int a &#x3D; 10;</span><br><span class="line">void (^block)() &#x3D; ^()&#123;</span><br><span class="line">    printf(&quot;hello block &#x3D; %d&quot;, a);</span><br><span class="line">&#125;;</span><br><span class="line">block();</span><br></pre></td></tr></table></figure><p>重新使用clang编译一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">    int a &#x3D; 10;</span><br><span class="line">    void (*block)() &#x3D; ((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, a));</span><br><span class="line">    ((void (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次简化一下clang编译之后的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a &#x3D; 10;</span><br><span class="line">void (*block)() &#x3D; __main_block_impl_0(__main_block_func_0, &amp;__main_block_desc_0_DATA, a);</span><br><span class="line">block-&gt;FuncPtr(block);</span><br></pre></td></tr></table></figure><p>当引入外部变量之后，<code>__main_block_impl_0()</code>变成了3个参数，变量a也被传进去了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">struct __main_block_impl_0 &#123;</span><br><span class="line">  struct __block_impl impl;</span><br><span class="line">  struct __main_block_desc_0* Desc;</span><br><span class="line">  int a; &#x2F;&#x2F; blcok内部多了一个a的变量</span><br><span class="line">  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _a, int flags&#x3D;0) : a(_a) &#123;    &#x2F;&#x2F; a进行直接赋值（c++函数）</span><br><span class="line">    impl.isa &#x3D; &amp;_NSConcreteStackBlock;  &#x2F;&#x2F; 还是stack block</span><br><span class="line">    impl.Flags &#x3D; flags;</span><br><span class="line">    impl.FuncPtr &#x3D; fp;</span><br><span class="line">    Desc &#x3D; desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">    &#x2F;&#x2F; a重新生成了一个变量，这个a和外界的变量是同一个值，但是是不同的两块地址，都指向10</span><br><span class="line">    int a &#x3D; __cself-&gt;a; &#x2F;&#x2F; bound by copy</span><br><span class="line">    printf(&quot;hello block &#x3D; %d&quot;, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当引入外部变量是，会在block的结构体中会增加一个与外界同名的变量。<br>在block函数内部，会重新生成一个变量a来指向block-&gt;a</p><p>这种操作，相当于 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a &#x3D; 10; &#x2F;&#x2F; 相当于block的外部变量</span><br><span class="line">int b &#x3D; a;  &#x2F;&#x2F; b相当于block函数__main_block_func_0中生成的a</span><br><span class="line">printf(&quot;pa&#x3D;%p, pb&#x3D;%p&quot;, &amp;a, &amp;b);</span><br></pre></td></tr></table></figure><p>可以试一下，打印a和b的地址，是两个不同的栈空间，指向同一个值。</p><p><code>pa=0x7ffee2c23c1c, pb=0x7ffee2c23c18</code></p><p>这也就是我们没有办法在block内部操作外界变量的原因，在block内没有拿到外界的地址，而是重新生成了一份。</p><h2 id="block修饰的外部变量"><a href="#block修饰的外部变量" class="headerlink" title="__block修饰的外部变量"></a>__block修饰的外部变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__block int a &#x3D; 10;</span><br><span class="line">void (^block)() &#x3D; ^()&#123;</span><br><span class="line">    a++;</span><br><span class="line">    printf(&quot;hello block &#x3D; %d&quot;, a);</span><br><span class="line">&#125;;</span><br><span class="line">block();</span><br></pre></td></tr></table></figure><p>clang编译之后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">    &#x2F;&#x2F; 变量a做了处理，变成了__Block_byref_a_0这种结构体</span><br><span class="line">    __Block_byref_a_0 a &#x3D; &#123;(void*)0,</span><br><span class="line">        (__Block_byref_a_0 *)&amp;a,</span><br><span class="line">        0,</span><br><span class="line">        sizeof(__Block_byref_a_0),</span><br><span class="line">        10&#125;;</span><br><span class="line">    &#x2F;&#x2F; 函数中增加了参数 &amp;a，把地址传过去</span><br><span class="line">    void (*block)() &#x3D; __main_block_impl_0(__main_block_func_0, &amp;__main_block_desc_0_DATA, &amp;a, 570425344));</span><br><span class="line">    block)-&gt;FuncPtr(block);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们查看<code>__Block_byref_a_0</code>这个结构体，它的初始化方法和传的参数是一一对应的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">__Block_byref_a_0 a &#x3D; &#123;</span><br><span class="line">    (void*)0,                   &#x2F;&#x2F; __isa，因为是一个常量，所以没有指向</span><br><span class="line">    (__Block_byref_a_0 *)&amp;a,    &#x2F;&#x2F; __forwarding，指向block外部的变量a的地址</span><br><span class="line">    0,                          &#x2F;&#x2F; flags</span><br><span class="line">    sizeof(__Block_byref_a_0),  &#x2F;&#x2F; size</span><br><span class="line">    10                          &#x2F;&#x2F; block外部变量a的值</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct __Block_byref_a_0 &#123;</span><br><span class="line">  void *__isa;</span><br><span class="line">__Block_byref_a_0 *__forwarding;</span><br><span class="line"> int __flags;</span><br><span class="line"> int __size;</span><br><span class="line"> int a;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们在看block的结构体<code>__main_block_impl_0</code>。多了一个<code>__Block_byref_a_0</code>类型的对象。指向block外部生成的对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">struct __main_block_impl_0 &#123;</span><br><span class="line">  struct __block_impl impl;</span><br><span class="line">  struct __main_block_desc_0* Desc;</span><br><span class="line">  __Block_byref_a_0 *a; &#x2F;&#x2F; by ref</span><br><span class="line">  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_a_0 *_a, int flags&#x3D;0) : a(_a-&gt;__forwarding) &#123;</span><br><span class="line">    impl.isa &#x3D; &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags &#x3D; flags;</span><br><span class="line">    impl.FuncPtr &#x3D; fp;</span><br><span class="line">    Desc &#x3D; desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">    &#x2F;&#x2F; 指针指向，</span><br><span class="line">    __Block_byref_a_0 *a &#x3D; __cself-&gt;a; &#x2F;&#x2F; bound by ref</span><br><span class="line">    &#x2F;&#x2F; a的__forwarding指向的地址就是外界变量a的地址。</span><br><span class="line">    (a-&gt;__forwarding-&gt;a)++;</span><br><span class="line">    printf(&quot;hello block &#x3D; %d&quot;, (a-&gt;__forwarding-&gt;a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以这里在block内部执行a++，是可以的。</p><h2 id="block引用对象类型"><a href="#block引用对象类型" class="headerlink" title="block引用对象类型"></a>block引用对象类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">NSMutableArray *mArray &#x3D; [NSMutableArray array];</span><br><span class="line">Person *p &#x3D; [Person new];</span><br><span class="line">p.name &#x3D; @&quot;1&quot;;</span><br><span class="line">    </span><br><span class="line">Person *p2 &#x3D; [Person new];</span><br><span class="line">p2.name &#x3D; @&quot;2&quot;;</span><br><span class="line">[mArray addObject:p2];</span><br><span class="line">    </span><br><span class="line">void (^block)() &#x3D; ^()&#123;</span><br><span class="line">    NSLog(@&quot;p.name&#x3D;%@, mArray&#x3D;%@&quot;,p.name, mArray);</span><br><span class="line">&#125;;</span><br><span class="line">block();</span><br></pre></td></tr></table></figure><p>我们声明了两个变量，一个可变数组，一个person对象。clang编译一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 可变数组的初始化</span><br><span class="line">NSMutableArray *mArray &#x3D; objc_msgSend(objc_getClass(&quot;NSMutableArray&quot;), sel_registerName(&quot;array&quot;));</span><br><span class="line">&#x2F;&#x2F; person初始化</span><br><span class="line">Person *p &#x3D; objc_msgSend(objc_getClass(&quot;Person&quot;), sel_registerName(&quot;new&quot;));</span><br><span class="line">&#x2F;&#x2F; setName</span><br><span class="line">objc_msgSend(p, sel_registerName(&quot;setName:&quot;), (NSString *)&amp;__NSConstantStringImpl__var_folders_v1_79z2l10138z4855091f7nkh40000gn_T_main_4445e3_mi_0);</span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F; p2初始化</span><br><span class="line">Person *p2 &#x3D; objc_msgSend(objc_getClass(&quot;Person&quot;), sel_registerName(&quot;new&quot;));</span><br><span class="line">objc_msgSend(p2, sel_registerName(&quot;setName:&quot;), (NSString *)&amp;__NSConstantStringImpl__var_folders_v1_79z2l10138z4855091f7nkh40000gn_T_main_4445e3_mi_1);</span><br><span class="line">&#x2F;&#x2F; addObject:</span><br><span class="line">objc_msgSend(mArray, sel_registerName(&quot;addObject:&quot;), p2);</span><br><span class="line"></span><br><span class="line">void (*block)() &#x3D; __main_block_impl_0(__main_block_func_0, &amp;__main_block_desc_0_DATA, p, mArray, 570425344));</span><br><span class="line">block-&gt;FuncPtr(block);</span><br></pre></td></tr></table></figure><p>这里与使用<code>__block</code>修饰的变量不一样了，对象类型的与正常的初始化没有什么区别。<br>再看看block的结构体，以及调用的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">struct __main_block_impl_0 &#123;</span><br><span class="line">  struct __block_impl impl;</span><br><span class="line">  struct __main_block_desc_0* Desc;</span><br><span class="line">  Person *__strong p;   &#x2F;&#x2F; __strong 修饰</span><br><span class="line">  NSMutableArray *__strong mArray;</span><br><span class="line">  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, Person *__strong _p, NSMutableArray *__strong _mArray, int flags&#x3D;0) : p(_p), mArray(_mArray) &#123;</span><br><span class="line">    impl.isa &#x3D; &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags &#x3D; flags;</span><br><span class="line">    impl.FuncPtr &#x3D; fp;</span><br><span class="line">    Desc &#x3D; desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; block方法调用</span><br><span class="line">static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">    Person *__strong p &#x3D; __cself-&gt;p; &#x2F;&#x2F; bound by copy</span><br><span class="line">    NSMutableArray *__strong mArray &#x3D; __cself-&gt;mArray; &#x2F;&#x2F; bound by copy</span><br><span class="line"></span><br><span class="line">    NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_v1_79z2l10138z4855091f7nkh40000gn_T_main_4445e3_mi_2,((NSString *(*)(id, SEL))(void *)objc_msgSend)((id)p, sel_registerName(&quot;name&quot;)), mArray);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>__main_block_impl_0</code>结构体内部，只是增加了两个用strong修饰符修饰的变量。<br><code>__main_block_func_0</code>方法中，使用两个对象时，重新生成了一个<code>__strong</code>修饰的变量。</p><p>这里需要注意的是，因为在block内部使用的是<code>__strong</code>修饰的变量。在赋值的时候，会进行深拷贝。注意也只是单层深拷贝，内部元素不会做拷贝。<br>也就是说，外部变量数组mArray，会被拷贝一份放在block内部。但是指向的都是相同的指针。数组中的元素没有变化。</p><p>我们添加一些打印信息，然后打印一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">NSMutableArray *mArray &#x3D; [NSMutableArray array];</span><br><span class="line">Person *p &#x3D; [Person new];</span><br><span class="line">p.name &#x3D; @&quot;1&quot;;</span><br><span class="line">    </span><br><span class="line">Person *p2 &#x3D; [Person new];</span><br><span class="line">p2.name &#x3D; @&quot;2&quot;;</span><br><span class="line">[mArray addObject:p2];</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;p&#x3D;%p, p&#x3D;%@&quot;, &amp;p, p);</span><br><span class="line">NSLog(@&quot;mArray&#x3D;%p, mArray&#x3D;%p, obj&#x3D;%@&quot;, &amp;mArray, mArray, mArray[0]);</span><br><span class="line">    </span><br><span class="line">void (^block)() &#x3D; ^()&#123;</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;p1&#x3D;%p, p1&#x3D;%@&quot;, &amp;p, p);</span><br><span class="line">    NSLog(@&quot;mArray1&#x3D;%p, mArray1&#x3D;%p, obj1&#x3D;%@&quot;, &amp;mArray, mArray, mArray[0]);</span><br><span class="line">&#125;;</span><br><span class="line">block();</span><br></pre></td></tr></table></figure><p>运行一下，看下结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p&#x3D;0x7ffeeb105c10, p&#x3D;&lt;Person: 0x600000814090&gt;</span><br><span class="line">mArray&#x3D;0x7ffeeb105c18, mArray&#x3D;0x600000452a60, obj&#x3D;&lt;Person: 0x6000008140a0&gt;</span><br><span class="line">-------------- blcok 里</span><br><span class="line">p1&#x3D;0x60000041fb90, p1&#x3D;&lt;Person: 0x600000814090&gt;</span><br><span class="line">mArray1&#x3D;0x60000041fb98, mArray1&#x3D;0x600000452a60, obj1&#x3D;&lt;Person: 0x6000008140a0&gt;</span><br></pre></td></tr></table></figure><p>涉及到<a href="https://www.jianshu.com/p/df1579149c5c" target="_blank" rel="noopener">深拷贝和浅拷贝的处理可以看这一篇文章</a>。</p><h1 id="Block的底层原理"><a href="#Block的底层原理" class="headerlink" title="Block的底层原理"></a>Block的底层原理</h1><p>我们用block引入外部<code>__block</code>修饰的变量来做例子，看一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__block NSString *name &#x3D; [NSString stringWithFormat:@&quot;%@&quot;, @&quot;name&quot;];</span><br><span class="line">void(^block)(void) &#x3D; ^&#123;   &#x2F;&#x2F; 这一行打断点。运行</span><br><span class="line">    name &#x3D; @&quot;block&quot;;</span><br><span class="line">    NSLog(@&quot;name&#x3D;%@&quot;, name);</span><br><span class="line">&#125;;</span><br><span class="line">block();</span><br></pre></td></tr></table></figure><p>打上断点，打开汇编调试，运行一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x1002062b0 &lt;+100&gt;: nop    </span><br><span class="line">0x1002062b4 &lt;+104&gt;: ldr    x10, #0x1d4c              ; (void *)0x0000000253e91a20: _NSConcreteStackBlock</span><br><span class="line">0x1002062b8 &lt;+108&gt;: str    w9, [sp, #0x48]</span><br><span class="line">0x1002062bc &lt;+112&gt;: str    x10, [sp, #0x8]</span><br><span class="line">0x1002062c0 &lt;+116&gt;: nop    </span><br><span class="line">0x1002062c4 &lt;+120&gt;: ldr    d0, 0x100207f68</span><br><span class="line">0x1002062c8 &lt;+124&gt;: adr    x9, #0xa4                 ; __main_block_invoke at main.m:21</span><br></pre></td></tr></table></figure><p>其实汇编代码后面已经给了注释，我们也读一下这个x10寄存器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(lldb) register read x10</span><br><span class="line">     x10 &#x3D; 0x0000000253e91a20  libsystem_blocks.dylib&#96;_NSConcreteStackBlock</span><br><span class="line">(lldb)</span><br></pre></td></tr></table></figure><p>打印的是一个stack block，我们知道引入了外部变量，会执行block_copy操作，我们再添加一个<code>_block_copy</code>的符号断点，继续执行。</p><p>进来<code>_block_copy</code>之后，发现属于<code>libsystem_blocks.dylib</code>这个库，然后我们下载对应的源码。</p><p>我们想知道它在内部做了什么。在<code>_block_copy</code>的汇编代码中，在最后的return时，加一个断点。在看看寄存器x0的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(lldb) register read x0</span><br><span class="line">      x0 &#x3D; 0x00000002818c44e0</span><br><span class="line">(lldb) po 0x00000002818c44e0</span><br><span class="line">&lt;__NSMallocBlock__: 0x2818c44e0&gt;</span><br></pre></td></tr></table></figure><p>这个block从stack变成了malloc。接下来我们看看源码：</p><h2 id="Block-layout"><a href="#Block-layout" class="headerlink" title="Block_layout"></a>Block_layout</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct Block_layout &#123;</span><br><span class="line">    void *isa;      &#x2F;&#x2F; isa指针</span><br><span class="line">    volatile int32_t flags; &#x2F;&#x2F; contains ref count &#x2F;&#x2F; 标志状态，是一个枚举</span><br><span class="line">    int32_t reserved;   &#x2F;&#x2F; 保留字段，可能有其他的作用</span><br><span class="line">    BlockInvokeFunction invoke; &#x2F;&#x2F; 函数执行</span><br><span class="line">    struct Block_descriptor_1 *descriptor; &#x2F;&#x2F; block的描述信息，size</span><br><span class="line">    &#x2F;&#x2F; imported variables</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在<code>_Block_copy</code>的源码中，第一行就是<code>Block_layout</code>，这个才是block真正的样子，一个结构体。</p><p>我们在看看flags都有哪些值，表示什么意思：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">enum &#123;</span><br><span class="line">    BLOCK_DEALLOCATING &#x3D;      (0x0001),  &#x2F;&#x2F; runtime 标记正在释放</span><br><span class="line">    BLOCK_REFCOUNT_MASK &#x3D;     (0xfffe),  &#x2F;&#x2F; runtime 存储引用计数的值</span><br><span class="line">    BLOCK_NEEDS_FREE &#x3D;        (1 &lt;&lt; 24), &#x2F;&#x2F; runtime 是否增加或减少引用计数的值</span><br><span class="line">    BLOCK_HAS_COPY_DISPOSE &#x3D;  (1 &lt;&lt; 25), &#x2F;&#x2F; compiler 是否拥有拷贝辅助函数 确定block是否存在Block_descriptor_2这个参数</span><br><span class="line">    BLOCK_HAS_CTOR &#x3D;          (1 &lt;&lt; 26), &#x2F;&#x2F; compiler: helpers have C++ code 是否有C++析构函数</span><br><span class="line">    BLOCK_IS_GC &#x3D;             (1 &lt;&lt; 27), &#x2F;&#x2F; runtime 是否有垃圾回收</span><br><span class="line">    BLOCK_IS_GLOBAL &#x3D;         (1 &lt;&lt; 28), &#x2F;&#x2F; compiler 是否是全局block</span><br><span class="line">    BLOCK_USE_STRET &#x3D;         (1 &lt;&lt; 29), &#x2F;&#x2F; compiler: undefined if !BLOCK_HAS_SIGNATURE</span><br><span class="line">    BLOCK_HAS_SIGNATURE  &#x3D;    (1 &lt;&lt; 30), &#x2F;&#x2F; compiler 是否拥有签名</span><br><span class="line">    BLOCK_HAS_EXTENDED_LAYOUT&#x3D;(1 &lt;&lt; 31)  &#x2F;&#x2F; compiler 确定Block_descriptor_3中的layout参数</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 这个结构体是block_layout必有的变量</span><br><span class="line">#define BLOCK_DESCRIPTOR_1 1</span><br><span class="line">struct Block_descriptor_1 &#123;</span><br><span class="line">    uintptr_t reserved;</span><br><span class="line">    uintptr_t size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 可选 这两个是可选变量。</span><br><span class="line">#define BLOCK_DESCRIPTOR_2 1</span><br><span class="line">&#x2F;&#x2F; 当flag&#x3D;BLOCK_HAS_COPY_DISPOSE时才会存在</span><br><span class="line">struct Block_descriptor_2 &#123;</span><br><span class="line">    &#x2F;&#x2F; requires BLOCK_HAS_COPY_DISPOSE</span><br><span class="line">    BlockCopyFunction copy;</span><br><span class="line">    BlockDisposeFunction dispose;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define BLOCK_DESCRIPTOR_3 1</span><br><span class="line">&#x2F;&#x2F; 当flag&#x3D;BLOCK_HAS_SIGNATURE时才会存在</span><br><span class="line">struct Block_descriptor_3 &#123;</span><br><span class="line">    &#x2F;&#x2F; requires BLOCK_HAS_SIGNATURE</span><br><span class="line">    const char *signature;</span><br><span class="line">    const char *layout;     &#x2F;&#x2F; contents depend on BLOCK_HAS_EXTENDED_LAYOUT</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Block_descriptor_3当中存放的是block的签名信息。我们知道block是一个匿名函数，只要是一个函数就会有签名，比如<code>v8@?0</code>这种样式的就是签名。</p><p>其中<code>v</code>表示返回值是<code>void</code>，<code>@?</code>表示未知的对象，即为<code>block</code>。<br>这和方法签名是有所不同的，方法签名一般是<code>v@:</code>这样的形式(此处只说返回值为void的场景)，<code>:</code>表示<code>SEL</code>。</p><p>接下来，我们看下<code>_Block_copy</code>。</p><h2 id="Block-copy"><a href="#Block-copy" class="headerlink" title="_Block_copy"></a>_Block_copy</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">void *_Block_copy(const void *arg) &#123;</span><br><span class="line">    &#x2F;&#x2F; 创建一个新的block</span><br><span class="line">    struct Block_layout *aBlock;</span><br><span class="line">    &#x2F;&#x2F; arg就是栈上的block</span><br><span class="line">    if (!arg) return NULL;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 直接赋值，新创建的aBlock指向arg</span><br><span class="line">    aBlock &#x3D; (struct Block_layout *)arg;</span><br><span class="line">    &#x2F;&#x2F; 我们已经对flags的值做了解释，这里做判断，其实这里就是一个堆区的block</span><br><span class="line">    if (aBlock-&gt;flags &amp; BLOCK_NEEDS_FREE) &#123;</span><br><span class="line">        &#x2F;&#x2F; latches on high</span><br><span class="line">        &#x2F;&#x2F; 处理refcount相关（引用计数）</span><br><span class="line">        latching_incr_int(&amp;aBlock-&gt;flags);</span><br><span class="line">        &#x2F;&#x2F; 直接返回</span><br><span class="line">        return aBlock;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (aBlock-&gt;flags &amp; BLOCK_IS_GLOBAL) &#123;</span><br><span class="line">        &#x2F;&#x2F; 全局区block，直接返回</span><br><span class="line">        return aBlock; &#x2F;&#x2F; 不需要</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123; </span><br><span class="line">        &#x2F;&#x2F; 这里就只有可能是栈区的block</span><br><span class="line">        &#x2F;&#x2F; Its a stack block.  Make a copy.</span><br><span class="line">        &#x2F;&#x2F; 申请内存空间，大小与aBlock一样</span><br><span class="line">        struct Block_layout *result &#x3D;</span><br><span class="line">            (struct Block_layout *)malloc(aBlock-&gt;descriptor-&gt;size);</span><br><span class="line">        if (!result) return NULL;</span><br><span class="line">        &#x2F;&#x2F; 将栈区的数据copy到堆区</span><br><span class="line">        memmove(result, aBlock, aBlock-&gt;descriptor-&gt;size); &#x2F;&#x2F; bitcopy first</span><br><span class="line">#if __has_feature(ptrauth_calls)</span><br><span class="line">        &#x2F;&#x2F; Resign the invoke pointer as it uses address authentication.</span><br><span class="line">        &#x2F;&#x2F; 设置invoke，这样堆上的block调用才会与栈上一致</span><br><span class="line">        result-&gt;invoke &#x3D; aBlock-&gt;invoke;</span><br><span class="line">#endif</span><br><span class="line">        &#x2F;&#x2F; reset refcount</span><br><span class="line">        &#x2F;&#x2F; 重置refcount</span><br><span class="line">        result-&gt;flags &amp;&#x3D; ~(BLOCK_REFCOUNT_MASK|BLOCK_DEALLOCATING);    &#x2F;&#x2F; XXX not needed</span><br><span class="line">        &#x2F;&#x2F; 设置flags</span><br><span class="line">        result-&gt;flags |&#x3D; BLOCK_NEEDS_FREE | 2;  &#x2F;&#x2F; logical refcount 1</span><br><span class="line">        _Block_call_copy_helper(result, aBlock);</span><br><span class="line">        &#x2F;&#x2F; Set isa last so memory analysis tools see a fully-initialized object.</span><br><span class="line">        &#x2F;&#x2F; 设置isa的为malloc block</span><br><span class="line">        result-&gt;isa &#x3D; _NSConcreteMallocBlock;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 处理引用计数</span><br><span class="line">static int32_t latching_incr_int(volatile int32_t *where) &#123;</span><br><span class="line">    while (1) &#123;</span><br><span class="line">        int32_t old_value &#x3D; *where;</span><br><span class="line">        if ((old_value &amp; BLOCK_REFCOUNT_MASK) &#x3D;&#x3D; BLOCK_REFCOUNT_MASK) &#123;</span><br><span class="line">            return BLOCK_REFCOUNT_MASK;</span><br><span class="line">        &#125;</span><br><span class="line">        if (OSAtomicCompareAndSwapInt(old_value, old_value+2, where)) &#123;</span><br><span class="line">            return old_value+2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>block copy主要做了以下操作：</p><ul><li>malloc block处理引用计数，直接返回</li><li>global block不做任何处理</li><li>stack block<ol><li>申请内存空间</li><li>将栈区的数据拷贝到堆区</li><li>设置isa指向malloc block</li></ol></li></ul><h2 id="Block-byref"><a href="#Block-byref" class="headerlink" title="Block_byref"></a>Block_byref</h2><p>还记得上面的引用<code>__block</code>变量的block，clang编译之后的样子吗？改用NSString变量之后，又是另一种风味。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char * argv[]) &#123;</span><br><span class="line">    &#x2F;* @autoreleasepool *&#x2F; &#123; __AtAutoreleasePool __autoreleasepool; </span><br><span class="line">        __attribute__((__blocks__(byref))) __Block_byref_name_0 name &#x3D; &#123;</span><br><span class="line">            (void*)0,</span><br><span class="line">            (__Block_byref_name_0 *)&amp;name,</span><br><span class="line">            33554432,</span><br><span class="line">            sizeof(__Block_byref_name_0),</span><br><span class="line">            __Block_byref_id_object_copy_131,</span><br><span class="line">            __Block_byref_id_object_dispose_131,</span><br><span class="line">            ((NSString * _Nonnull (*)(id, SEL, NSString * _Nonnull, ...))(void *)objc_msgSend)((id)objc_getClass(&quot;NSString&quot;), sel_registerName(&quot;stringWithFormat:&quot;), (NSString *)&amp;__NSConstantStringImpl__var_folders_nw_tqjtztpn1yq6w0_wmgdvn_vc0000gn_T_main_41740c_mi_0, (NSString *)&amp;__NSConstantStringImpl__var_folders_nw_tqjtztpn1yq6w0_wmgdvn_vc0000gn_T_main_41740c_mi_1)</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        void(*myBlock)(void) &#x3D; ((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_name_0 *)&amp;name, 570425344));</span><br><span class="line">        ((void (*)(__block_impl *))((__block_impl *)myBlock)-&gt;FuncPtr)((__block_impl *)myBlock);</span><br><span class="line"></span><br><span class="line">        return UIApplicationMain(argc, argv, __null, NSStringFromClass(((Class (*)(id, SEL))(void *)objc_msgSend)((id)objc_getClass(&quot;AppDelegate&quot;), sel_registerName(&quot;class&quot;))));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct __Block_byref_name_0 &#123;</span><br><span class="line">    void *__isa;                                        &#x2F;&#x2F; 8</span><br><span class="line">    __Block_byref_name_0 *__forwarding;                 &#x2F;&#x2F; 8</span><br><span class="line">    int __flags;                                        &#x2F;&#x2F; 4</span><br><span class="line">    int __size;                                         &#x2F;&#x2F; 4</span><br><span class="line">    void (*__Block_byref_id_object_copy)(void*, void*); &#x2F;&#x2F; 8</span><br><span class="line">    void (*__Block_byref_id_object_dispose)(void*);     &#x2F;&#x2F; 8</span><br><span class="line">    NSString *name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>block修饰的name对象被转化成了一个</strong>Block_byref_name_0的结构体，在源码中也有一个<code>Block_byref</code>与之对应。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">struct Block_byref &#123;</span><br><span class="line">    void *isa;</span><br><span class="line">    struct Block_byref *forwarding;</span><br><span class="line">    volatile int32_t flags; &#x2F;&#x2F; contains ref count</span><br><span class="line">    uint32_t size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 可选变量</span><br><span class="line">struct Block_byref_2 &#123;</span><br><span class="line">    &#x2F;&#x2F; requires BLOCK_BYREF_HAS_COPY_DISPOSE</span><br><span class="line">    BlockByrefKeepFunction byref_keep;</span><br><span class="line">    BlockByrefDestroyFunction byref_destroy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 可选变量</span><br><span class="line">struct Block_byref_3 &#123;</span><br><span class="line">    &#x2F;&#x2F; requires BLOCK_BYREF_LAYOUT_EXTENDED</span><br><span class="line">    const char *layout;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们把<code>__Block_byref_name_0</code>和<code>Block_byref</code>放在一起比较一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__Block_byref_name_0                -&gt;  Block_byref</span><br><span class="line">(void*)0,                           -&gt;  isa</span><br><span class="line">(__Block_byref_name_0 *)&amp;name,      -&gt;  forwarding</span><br><span class="line">33554432,                           -&gt;  flags</span><br><span class="line">sizeof(__Block_byref_name_0),       -&gt;  size</span><br><span class="line">__Block_byref_id_object_copy_131,   -&gt;  byref_kep</span><br><span class="line">__Block_byref_id_object_dispose_131,-&gt;  byref_destroy</span><br></pre></td></tr></table></figure><p>在上面的章节中，有一个点没有说，这里再重新说一下，这个外界的变量是怎么被拷贝进block里头的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void(*myBlock)(void) &#x3D; ((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_name_0 *)&amp;name, 570425344));</span><br></pre></td></tr></table></figure><p>在block声明的时候，还记得吧，其中有<code>__main_block_desc_0_DATA</code>这个参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static struct __main_block_desc_0 &#123;</span><br><span class="line">  size_t reserved;</span><br><span class="line">  size_t Block_size;</span><br><span class="line">  void (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);</span><br><span class="line">  void (*dispose)(struct __main_block_impl_0*);</span><br><span class="line">&#125; __main_block_desc_0_DATA &#x3D; &#123; 0, sizeof(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0&#125;;</span><br></pre></td></tr></table></figure><p><code>__main_block_desc_0_DATA</code>的生成也是通过方法调用来产生的，而变量的拷贝就是发生在这里<code>__main_block_copy_0</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static void __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) &#123;</span><br><span class="line">    _Block_object_assign((void*)&amp;dst-&gt;name, (void*)src-&gt;name, 8&#x2F;*BLOCK_FIELD_IS_BYREF*&#x2F;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来看看<code>_Block_object_assign</code>是怎么实现的，在源码里头：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;_Block_object_assign有三个参数，第三个参数与下面的枚举值相对应。</span><br><span class="line">enum &#123;</span><br><span class="line">    BLOCK_FIELD_IS_OBJECT  &#x3D;  3,  &#x2F;&#x2F; 截获的是对象 __attribute__((NSObject)), block, ...</span><br><span class="line">    BLOCK_FIELD_IS_BLOCK   &#x3D;  7,  &#x2F;&#x2F; 截获的是block变量（不是block的参数）</span><br><span class="line">    BLOCK_FIELD_IS_BYREF    &#x3D;  8,  &#x2F;&#x2F; 截获的是__block修饰的对象</span><br><span class="line">    BLOCK_FIELD_IS_WEAK     &#x3D; 16,  &#x2F;&#x2F; 截获的是__weak修饰的对象</span><br><span class="line">    BLOCK_BYREF_CALLER     &#x3D; 128, &#x2F;&#x2F; called from __block (byref) copy&#x2F;dispose support routines.</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 根据传入的对象的类型</span><br><span class="line">void _Block_object_assign(void *destArg, const void *object, const int flags) &#123;</span><br><span class="line">    const void **dest &#x3D; (const void **)destArg;</span><br><span class="line">    switch (os_assumes(flags &amp; BLOCK_ALL_COPY_DISPOSE_FLAGS)) &#123;</span><br><span class="line">        &#x2F;&#x2F; 对象类型</span><br><span class="line">        case BLOCK_FIELD_IS_OBJECT:</span><br><span class="line">            &#x2F;&#x2F; retatin count +1，</span><br><span class="line">            _Block_retain_object(object);</span><br><span class="line">            &#x2F;&#x2F; 持有object，多了一次强引用</span><br><span class="line">            *dest &#x3D; object;</span><br><span class="line">            break;</span><br><span class="line">        &#x2F;&#x2F; block</span><br><span class="line">        case BLOCK_FIELD_IS_BLOCK:</span><br><span class="line">            &#x2F;&#x2F; 把block从栈上拷贝到堆上，详情看上方_Block_copy的分析，只是参数变化</span><br><span class="line">            *dest &#x3D; _Block_copy(object);</span><br><span class="line">            break;</span><br><span class="line">        </span><br><span class="line">        case BLOCK_FIELD_IS_BYREF | BLOCK_FIELD_IS_WEAK:</span><br><span class="line">        &#x2F;&#x2F; __block修饰的变量</span><br><span class="line">        case BLOCK_FIELD_IS_BYREF:</span><br><span class="line">            *dest &#x3D; _Block_byref_copy(object);</span><br><span class="line">            break;</span><br><span class="line">        </span><br><span class="line">        case BLOCK_BYREF_CALLER | BLOCK_FIELD_IS_OBJECT:</span><br><span class="line">        case BLOCK_BYREF_CALLER | BLOCK_FIELD_IS_BLOCK:</span><br><span class="line">            *dest &#x3D; object;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case BLOCK_BYREF_CALLER | BLOCK_FIELD_IS_OBJECT | BLOCK_FIELD_IS_WEAK:</span><br><span class="line">        case BLOCK_BYREF_CALLER | BLOCK_FIELD_IS_BLOCK  | BLOCK_FIELD_IS_WEAK:</span><br><span class="line">            *dest &#x3D; object;</span><br><span class="line">            break;</span><br><span class="line">        </span><br><span class="line">        default:</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="block修饰的变量拷贝"><a href="#block修饰的变量拷贝" class="headerlink" title="__block修饰的变量拷贝"></a>__block修饰的变量拷贝</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">static struct Block_byref *_Block_byref_copy(const void *arg) &#123;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; Block_byref  结构体</span><br><span class="line">    struct Block_byref *src &#x3D; (struct Block_byref *)arg;</span><br><span class="line"></span><br><span class="line">    if ((src-&gt;forwarding-&gt;flags &amp; BLOCK_REFCOUNT_MASK) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        &#x2F;&#x2F; src points to stack</span><br><span class="line">        &#x2F;&#x2F; 创建新值，申请内存空间</span><br><span class="line">        struct Block_byref *copy &#x3D; (struct Block_byref *)malloc(src-&gt;size);</span><br><span class="line">        copy-&gt;isa &#x3D; NULL;</span><br><span class="line">        &#x2F;&#x2F; byref value 4 is logical refcount of 2: one for caller, one for stack</span><br><span class="line">        &#x2F;&#x2F; 设置flags</span><br><span class="line">        copy-&gt;flags &#x3D; src-&gt;flags | BLOCK_BYREF_NEEDS_FREE | 4;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; copy的forwarding指向自己，自己在堆里</span><br><span class="line">        copy-&gt;forwarding &#x3D; copy; &#x2F;&#x2F; patch heap copy to point to itself</span><br><span class="line">        &#x2F;&#x2F; src是老值，指向的也是自己。指向的是堆，所以block内部改变，外部也会改变</span><br><span class="line">        src-&gt;forwarding &#x3D; copy;  &#x2F;&#x2F; patch stack to point to heap copy</span><br><span class="line">        </span><br><span class="line">        copy-&gt;size &#x3D; src-&gt;size;</span><br><span class="line"></span><br><span class="line">        if (src-&gt;flags &amp; BLOCK_BYREF_HAS_COPY_DISPOSE) &#123;</span><br><span class="line">            &#x2F;&#x2F; Trust copy helper to copy everything of interest</span><br><span class="line">            &#x2F;&#x2F; If more than one field shows up in a byref block this is wrong XXX</span><br><span class="line">            &#x2F;&#x2F; 通过内存偏移，获取Block_byref_2</span><br><span class="line">            struct Block_byref_2 *src2 &#x3D; (struct Block_byref_2 *)(src+1);</span><br><span class="line">            struct Block_byref_2 *copy2 &#x3D; (struct Block_byref_2 *)(copy+1);</span><br><span class="line">            &#x2F;&#x2F; 存值</span><br><span class="line">            copy2-&gt;byref_keep &#x3D; src2-&gt;byref_keep;</span><br><span class="line">            copy2-&gt;byref_destroy &#x3D; src2-&gt;byref_destroy;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 这里会判断，有没有Block_byref_3，有的话也是通过内存地址偏移来获取</span><br><span class="line">            if (src-&gt;flags &amp; BLOCK_BYREF_LAYOUT_EXTENDED) &#123;</span><br><span class="line">                struct Block_byref_3 *src3 &#x3D; (struct Block_byref_3 *)(src2+1);</span><br><span class="line">                struct Block_byref_3 *copy3 &#x3D; (struct Block_byref_3*)(copy2+1);</span><br><span class="line">                copy3-&gt;layout &#x3D; src3-&gt;layout;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 执行拷贝__Block_byref_id_object_copy</span><br><span class="line">            (*src2-&gt;byref_keep)(copy, src);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            &#x2F;&#x2F; Bitwise copy.</span><br><span class="line">            &#x2F;&#x2F; This copy includes Block_byref_3, if any.</span><br><span class="line">            memmove(copy+1, src+1, src-&gt;size - sizeof(*src));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; already copied to heap</span><br><span class="line">    else if ((src-&gt;forwarding-&gt;flags &amp; BLOCK_BYREF_NEEDS_FREE) &#x3D;&#x3D; BLOCK_BYREF_NEEDS_FREE) &#123;</span><br><span class="line">        latching_incr_int(&amp;src-&gt;forwarding-&gt;flags);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return src-&gt;forwarding;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在新生成的结构体<code>__Block_byref_name_0</code>中，还有一个名为<code>__Block_byref_id_object_copy_131</code>的方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static void __Block_byref_id_object_copy_131(void *dst, void *src) &#123;</span><br><span class="line"> _Block_object_assign((char*)dst + 40, *(void * *) ((char*)src + 40), 131);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是根据地址便宜来获取name的值，这里偏移的是40个字节。看一下<code>__Block_byref_name_0</code>中的变量，name上边的所有变量加起来所占的内存是40个字节。所以这里是对name做了一次拷贝。</p><p>对于<code>__block</code>修饰的变量可以在block内部可以修改，主要是因为：</p><ol><li>block从栈区，拷贝到堆区</li><li><strong>block修饰的变量<code>name</code>，会生成一个新的结构体`</strong>Block_byref_name_0`，拷贝到blcok内部</li><li>对元类的值进行拷贝，并修改原来值的指向（指向为block内部值）</li></ol><h3 id="block释放"><a href="#block释放" class="headerlink" title="block释放"></a>block释放</h3><p><code>__main_block_desc_0_DATA</code>中还有另外一个参数<code>__main_block_dispose_0</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static void __main_block_dispose_0(struct __main_block_impl_0*src) &#123;</span><br><span class="line">    _Block_object_dispose((void*)src-&gt;lg_name, 8&#x2F;*BLOCK_FIELD_IS_BYREF*&#x2F;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看一下<code>_Block_object_dispose</code>是怎么释放的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">void _Block_object_dispose(const void *object, const int flags) &#123;</span><br><span class="line">    switch (os_assumes(flags &amp; BLOCK_ALL_COPY_DISPOSE_FLAGS)) &#123;</span><br><span class="line">        case BLOCK_FIELD_IS_BYREF | BLOCK_FIELD_IS_WEAK:</span><br><span class="line">        &#x2F;&#x2F; 如果是__block修饰的，使用_Block_byref_release</span><br><span class="line">        case BLOCK_FIELD_IS_BYREF:</span><br><span class="line">            &#x2F;&#x2F; get rid of the __block data structure held in a Block</span><br><span class="line">            _Block_byref_release(object);</span><br><span class="line">        break;</span><br><span class="line">        &#x2F;&#x2F; block</span><br><span class="line">        case BLOCK_FIELD_IS_BLOCK:</span><br><span class="line">            _Block_release(object);</span><br><span class="line">        break;</span><br><span class="line">      &#x2F;&#x2F; 对象类型的变量</span><br><span class="line">      case BLOCK_FIELD_IS_OBJECT:</span><br><span class="line">            &#x2F;&#x2F; 调用系统方法，不用处理</span><br><span class="line">            _Block_release_object(object);</span><br><span class="line">        break;</span><br><span class="line">      case BLOCK_BYREF_CALLER | BLOCK_FIELD_IS_OBJECT:</span><br><span class="line">      case BLOCK_BYREF_CALLER | BLOCK_FIELD_IS_BLOCK:</span><br><span class="line">      case BLOCK_BYREF_CALLER | BLOCK_FIELD_IS_OBJECT | BLOCK_FIELD_IS_WEAK:</span><br><span class="line">      case BLOCK_BYREF_CALLER | BLOCK_FIELD_IS_BLOCK  | BLOCK_FIELD_IS_WEAK:</span><br><span class="line">        break;</span><br><span class="line">      default:</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_Block_byref_release</code>的释放，消耗新创建的Block_byref结构体。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">static void _Block_byref_release(const void *arg) &#123;</span><br><span class="line">    struct Block_byref *byref &#x3D; (struct Block_byref *)arg;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; dereference the forwarding pointer since the compiler isn&#39;t doing this anymore (ever?)</span><br><span class="line">    byref &#x3D; byref-&gt;forwarding;</span><br><span class="line">    </span><br><span class="line">    if (byref-&gt;flags &amp; BLOCK_BYREF_NEEDS_FREE) &#123;</span><br><span class="line">        int32_t refcount &#x3D; byref-&gt;flags &amp; BLOCK_REFCOUNT_MASK;</span><br><span class="line">        os_assert(refcount);</span><br><span class="line">        if (latching_decr_int_should_deallocate(&amp;byref-&gt;flags)) &#123;</span><br><span class="line">            if (byref-&gt;flags &amp; BLOCK_BYREF_HAS_COPY_DISPOSE) &#123;</span><br><span class="line">                struct Block_byref_2 *byref2 &#x3D; (struct Block_byref_2 *)(byref+1);</span><br><span class="line">                (*byref2-&gt;byref_destroy)(byref);</span><br><span class="line">            &#125;</span><br><span class="line">            free(byref);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>block的释放</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void _Block_release(const void *arg) &#123;</span><br><span class="line">    struct Block_layout *aBlock &#x3D; (struct Block_layout *)arg;</span><br><span class="line">    if (!aBlock) return;</span><br><span class="line">    &#x2F;&#x2F; 全局block不用释放</span><br><span class="line">    if (aBlock-&gt;flags &amp; BLOCK_IS_GLOBAL) return;</span><br><span class="line">    &#x2F;&#x2F; 还有引用计数则没办法释放</span><br><span class="line">    if (! (aBlock-&gt;flags &amp; BLOCK_NEEDS_FREE)) return;</span><br><span class="line">    </span><br><span class="line">    if (latching_decr_int_should_deallocate(&amp;aBlock-&gt;flags)) &#123;</span><br><span class="line">        _Block_call_dispose_helper(aBlock);</span><br><span class="line">        _Block_destructInstance(aBlock);</span><br><span class="line">        free(aBlock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>block的分类：global block、stack block，malloc block</li><li>block的的内部实现</li><li>block调用外部变量</li><li>__block修饰的变量</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Block的类型&quot;&gt;&lt;a href=&quot;#Block的类型&quot; class=&quot;headerlink&quot; title=&quot;Block的类型&quot;&gt;&lt;/a&gt;Block的类型&lt;/h1&gt;&lt;p&gt;Block分为 Malloc Block、 Stack Block、Global Block
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
      <category term="block" scheme="http://liujiaboy.github.io/tags/block/"/>
    
  </entry>
  
  <entry>
    <title>应用重签名</title>
    <link href="http://liujiaboy.github.io/2021/05/21/%E9%80%86%E5%90%91/%E5%BA%94%E7%94%A8%E9%87%8D%E7%AD%BE%E5%90%8D/"/>
    <id>http://liujiaboy.github.io/2021/05/21/%E9%80%86%E5%90%91/%E5%BA%94%E7%94%A8%E9%87%8D%E7%AD%BE%E5%90%8D/</id>
    <published>2021-05-21T07:42:58.000Z</published>
    <updated>2021-05-24T02:16:11.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="应用重签名"><a href="#应用重签名" class="headerlink" title="应用重签名"></a>应用重签名</h1><h2 id="codesign-命令"><a href="#codesign-命令" class="headerlink" title="codesign 命令"></a>codesign 命令</h2><p>Xcode提供了签名工具<code>codesign</code>，我们可以通过几个命令iu可以完成重签名。</p><ul><li><code>codesign -vv -d [WeChat.app]</code> 查看签名</li><li><code>$ security find-identity -v -p codesigning</code> 查看钥匙串力可以签名的证书</li><li><code>$ Codesign –fs [证书串] [filename]</code> 强制替换签名</li><li><code>$ Chmod +x [filename]</code> 给文件添加可执行权限权限</li><li><code>$ security cms -D -i ../embedded.mobileprovision</code> 查看描述文件</li><li><code>$ codesign -fs [证书串] --no-strict --entitlements=权限文件.plist APP包</code></li><li><code>$ Zip –ry [file] [outfile] 将file压缩为outfile</code></li><li><code>$ otool -l [WeChat]</code> 查看mach-O(可执行)文件， <code>cryptid</code>等于0说明是砸壳之后的（没有加密），等于1说明是加密的</li><li><code>$ otool -l WeChat &gt; ~/Desktop/123.txt</code> 把文件导出到123.txt中</li></ul><h2 id="codesign-签名步奏"><a href="#codesign-签名步奏" class="headerlink" title="codesign 签名步奏"></a>codesign 签名步奏</h2><p>首先我们需要拿到砸壳之后的<code>.ipa</code>文件，然后对这个文件解压缩，在<code>Payload</code>文件夹下看到对应的app文件。</p><h3 id="查看签名"><a href="#查看签名" class="headerlink" title="查看签名"></a>查看签名</h3><p> <code>$ codesign -vv -d WeChat.app</code> </p><p> 如果没有重签名，使用的证书还是微信自己的证书。</p><h3 id="查看本地钥匙串中可用的证书"><a href="#查看本地钥匙串中可用的证书" class="headerlink" title="查看本地钥匙串中可用的证书"></a>查看本地钥匙串中可用的证书</h3><p> <code>$ security find-identity -v -p codesigning</code></p><p> 会列出钥匙串中可用的证书。</p><h3 id="强制签名"><a href="#强制签名" class="headerlink" title="强制签名"></a>强制签名</h3><p>选中<code>WeChat.app</code>，显示包内容</p><p>app包中主要有3个文件需要处理，我们需要对这3个文件做重签名：</p><ol><li>是资源文件的签名</li><li>Mach-O文件的签名</li><li>Framework的签名</li></ol><p>但是内部的<code>PlugIns</code>文件夹中的插件，<code>watch</code>文件夹下的内容，使用免费的证书是无法签名的。可以删除掉。</p><p>然后我们先对Framework文件夹下的内容签名：</p><p><code>$ codesign -fs &quot;Apple Development: xxx&quot; andromeda.framework</code></p><p>所有的framework都要重签。</p><h3 id="创建新的描述文件"><a href="#创建新的描述文件" class="headerlink" title="创建新的描述文件"></a>创建新的描述文件</h3><ol><li>Xcode新建工程，命名为<code>WeChat</code>,选择对framework重签名使用的证书。然后在手机上运行一下。</li><li>在工程中选中<code>Products</code>,打开<code>WeChat.app</code>所在的文件夹。然后显示包内容，找到<code>embedded.mobileprovision</code>这个描述文件，复制到<code>WeChat.app</code>内。</li><li>添加了描述文件之后，还需要修改<code>info.plist</code>的bundle id，因为描述文件中是有bundle id信息的。</li></ol><h3 id="更改权限"><a href="#更改权限" class="headerlink" title="更改权限"></a>更改权限</h3><p>接下来我们看看<code>embedded.mobileprovision</code>的内容，因为我们需要拿到它的权限部分对<code>WeChat</code>重签名。</p><ol><li><code>$ security cms -D -i embedded.mobileprovision</code>查看<code>embedded.mobileprovision</code>的内容，找到<code>Entitlements</code>这个key对应的内容（注意拷贝时不需要key），复制到一个新的plist文件中，命名为<code>Entitlements</code>。</li><li>然后把这个<code>Entitlements.plist</code>文件拷贝到<code>Payload</code>文件夹下，与<code>WeChat.app</code>同级。</li><li><code>$ ls -l WeChat</code>查看Mach-O文件是否有可以执行权限，没有的话使用命令<code>$ chmod a+x WeChat</code>设置可执行权限。</li></ol><h3 id="app重签"><a href="#app重签" class="headerlink" title="app重签"></a>app重签</h3><p>对APP重签，其实就是对内部Mach-O重签。<br>退回到<code>Payload</code>文件夹下，对<code>WeChat.app</code>签名：</p><p><code>$ codesign -fs &quot;Apple Development: xxx&quot; --no-strict --entitlements=Entitlements.plist WeChat.app</code></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用Xcode - Window - Devices and Simulators，点击”+“，选择对应的app安装，安装完成之后，点击就能直接运行了。</p><blockquote><p>注意：别登录，容易被封号，我们只是完成了万里长征的第一步而已。</p></blockquote><p>这就是通过命令行使用<code>codesign</code>进行重签名的流程。</p><h1 id="Xcode重签名"><a href="#Xcode重签名" class="headerlink" title="Xcode重签名"></a>Xcode重签名</h1><p>我们对拿到的砸壳之后ipa文件进行解压缩，打开<code>Payload</code>文件夹：</p><ol><li>删除<code>PlugIns</code>、<code>Waatch</code>文件夹。</li><li>使用命令行对Framework重签名。</li><li>创建并运行一个空项目工程，项目名字需要与重签的<code>xx.app</code>文件名一致。并运行到手机上。</li><li>修改xx.app内部的info.plist文件下的bundle id，与新工程一致。</li><li>在工程下选择<code>Products</code>，打开<code>xx.app</code>所在的文件夹，把第4步修改后的app复制过来，直接替换<code>xx.app</code>。</li><li>直接运行。</li></ol><h1 id="codesign-与-Xcode签名比较"><a href="#codesign-与-Xcode签名比较" class="headerlink" title="codesign 与 Xcode签名比较"></a>codesign 与 Xcode签名比较</h1><p>与<code>codesign</code>签名相比，直接使用Xcode重签名少了好几步：</p><ol><li>省略了添加描述文件</li><li>省略了添加描述文件的权限</li><li>省略了通过权限重签app</li></ol><h1 id="Shell-重签"><a href="#Shell-重签" class="headerlink" title="Shell 重签"></a>Shell 重签</h1><p>shell是一种特殊的交互式工具，它为用户提供了启动程序、管理文件系统中文件以及运行在系统上的进程的途径。<br>Shell一般是指命令行工具。它允许你输入文本命令，然后解释命令，并在内核中执行。<br>Shell脚本，也就是用各类命令预先放入到一个文本文件中，方便一次性执行的一个脚本文件。</p><blockquote><p>iTerm 切换bash和zsh的<br><code>$ chsh -s /bin/bash</code><br><code>$ chsh -s /bin/zsh</code></p></blockquote><h2 id="文件类型与权限"><a href="#文件类型与权限" class="headerlink" title="文件类型与权限"></a>文件类型与权限</h2><p>可以通过<code>$ls -l</code>命令查看权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drwxr-xr-x  5  Alan  staff      160    10 19 2015  Public</span><br><span class="line">[文件权限]  连接 所有者 所属组     文件大小  最后修改时间 文件名称</span><br></pre></td></tr></table></figure><p>d：文件类型 表示目录。-表示 文件<br>前3位 rwx：文件所有者（user）的权限<br>中3位 r-x：这一组其他用户（group）的权限<br>后3为 r-x：非本组的用户（other）的权限，</p><table><thead><tr><th align="center">缩写</th><th>释义</th><th>二进制</th><th>十进制</th></tr></thead><tbody><tr><td align="center">r</td><td>read 读</td><td>0100</td><td>4</td></tr><tr><td align="center">w</td><td>write 写</td><td>0010</td><td>2</td></tr><tr><td align="center">x</td><td>execut 可执行</td><td>0001</td><td>1</td></tr></tbody></table><p>我们经常会用的一个命令 <code>$chmod 755 filename</code>来改变file的权限</p><p>755表示的就是权限，分别为user、group、other的权限。<br>7： 4 + 2 + 1 = r + w + x<br>5： 4 + 1     = r + x</p><p>也可以使用符号类型来表示：</p><p><code>$ chmod [u、g、o、a][+(加入)、-(除去)、=(设置)] [r、w、x] 文件名称</code><br>u：user<br>g：group<br>0：other<br>a：all</p><p>例如 <code>$ chmod a+x 123.txt</code> 表示所有人都有可执行权限。</p><h2 id="shell重签名"><a href="#shell重签名" class="headerlink" title="shell重签名"></a>shell重签名</h2><p>就是在Xcode中，运行时执行shell脚本，自动帮我们处理签名的过程。在写shell脚本的时候，有以下几个步奏：</p><ol><li>解压ipa文件到Temp文件夹下</li><li>将解压出来的app拷贝到工程下</li><li>删除PlugIns和Watch相关的文件</li><li>更新info.plist文件中bundle id</li><li>给mach-o文件执行权限</li><li>重签名framework</li><li>替换签名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"># $&#123;SRCROOT&#125; 它是工程文件所在的目录</span><br><span class="line">TEMP_PATH&#x3D;&quot;$&#123;SRCROOT&#125;&#x2F;Temp&quot;</span><br><span class="line">#资源文件夹，我们提前在工程目录下新建一个APP文件夹，里面放ipa包</span><br><span class="line">ASSETS_PATH&#x3D;&quot;$&#123;SRCROOT&#125;&#x2F;APP&quot;</span><br><span class="line">#目标ipa包路径</span><br><span class="line">TARGET_IPA_PATH&#x3D;&quot;$&#123;ASSETS_PATH&#125;&#x2F;*.ipa&quot;</span><br><span class="line">#清空Temp文件夹</span><br><span class="line">rm -rf &quot;$&#123;SRCROOT&#125;&#x2F;Temp&quot;</span><br><span class="line">mkdir -p &quot;$&#123;SRCROOT&#125;&#x2F;Temp&quot;</span><br><span class="line"></span><br><span class="line">#----------------------------------------</span><br><span class="line"># 1. 解压IPA到Temp下</span><br><span class="line">unzip -oqq &quot;$TARGET_IPA_PATH&quot; -d &quot;$TEMP_PATH&quot;</span><br><span class="line"># 拿到解压的临时的APP的路径</span><br><span class="line">TEMP_APP_PATH&#x3D;$(set -- &quot;$TEMP_PATH&#x2F;Payload&#x2F;&quot;*.app;echo &quot;$1&quot;)</span><br><span class="line"># echo &quot;路径是:$TEMP_APP_PATH&quot;</span><br><span class="line"></span><br><span class="line">#----------------------------------------</span><br><span class="line"># 2. 将解压出来的.app拷贝进入工程下</span><br><span class="line"># BUILT_PRODUCTS_DIR 工程生成的APP包的路径</span><br><span class="line"># TARGET_NAME target名称</span><br><span class="line">TARGET_APP_PATH&#x3D;&quot;$BUILT_PRODUCTS_DIR&#x2F;$TARGET_NAME.app&quot;</span><br><span class="line">echo &quot;app路径:$TARGET_APP_PATH&quot;</span><br><span class="line"></span><br><span class="line">rm -rf &quot;$TARGET_APP_PATH&quot;</span><br><span class="line">mkdir -p &quot;$TARGET_APP_PATH&quot;</span><br><span class="line">cp -rf &quot;$TEMP_APP_PATH&#x2F;&quot; &quot;$TARGET_APP_PATH&quot;</span><br><span class="line"></span><br><span class="line">#----------------------------------------</span><br><span class="line"># 3. 删除extension和WatchAPP.个人证书没法签名Extention</span><br><span class="line">rm -rf &quot;$TARGET_APP_PATH&#x2F;PlugIns&quot;</span><br><span class="line">rm -rf &quot;$TARGET_APP_PATH&#x2F;Watch&quot;</span><br><span class="line"></span><br><span class="line">#----------------------------------------</span><br><span class="line"># 4. 更新info.plist文件 CFBundleIdentifier</span><br><span class="line">#  设置:&quot;Set : KEY Value&quot; &quot;目标文件路径&quot;</span><br><span class="line"># PlistBuddy工具修改info.plist文件中的BundleID为工程的BundleID</span><br><span class="line">&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &quot;Set :CFBundleIdentifier $PRODUCT_BUNDLE_IDENTIFIER&quot; &quot;$TARGET_APP_PATH&#x2F;Info.plist&quot;</span><br><span class="line"></span><br><span class="line">#----------------------------------------</span><br><span class="line"># 5. 给MachO文件上执行权限</span><br><span class="line"># 拿到MachO文件的路径</span><br><span class="line">APP_BINARY&#x3D;&#96;plutil -convert xml1 -o - $TARGET_APP_PATH&#x2F;Info.plist|grep -A1 Exec|tail -n1|cut -f2 -d\&gt;|cut -f1 -d\&lt;&#96;</span><br><span class="line">#上可执行权限</span><br><span class="line">chmod +x &quot;$TARGET_APP_PATH&#x2F;$APP_BINARY&quot;</span><br><span class="line"></span><br><span class="line">#----------------------------------------</span><br><span class="line"># 6. 重签名第三方 FrameWorks</span><br><span class="line">TARGET_APP_FRAMEWORKS_PATH&#x3D;&quot;$TARGET_APP_PATH&#x2F;Frameworks&quot;</span><br><span class="line">if [ -d &quot;$TARGET_APP_FRAMEWORKS_PATH&quot; ];</span><br><span class="line">then</span><br><span class="line">for FRAMEWORK in &quot;$TARGET_APP_FRAMEWORKS_PATH&#x2F;&quot;*</span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">#签名 </span><br><span class="line">#--force --sign 替换签名</span><br><span class="line"># EXPANDED_CODE_SIGN_IDENTITY 当前工程的证书</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;codesign --force --sign &quot;$EXPANDED_CODE_SIGN_IDENTITY&quot; &quot;$FRAMEWORK&quot;</span><br><span class="line">done</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><blockquote><p>这里在第一次运行Xcode时，注意要先注释掉该shell脚本，运行一次之后再打开该shell脚本，重新运行。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;应用重签名&quot;&gt;&lt;a href=&quot;#应用重签名&quot; class=&quot;headerlink&quot; title=&quot;应用重签名&quot;&gt;&lt;/a&gt;应用重签名&lt;/h1&gt;&lt;h2 id=&quot;codesign-命令&quot;&gt;&lt;a href=&quot;#codesign-命令&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="逆向" scheme="http://liujiaboy.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="应用签名" scheme="http://liujiaboy.github.io/tags/%E5%BA%94%E7%94%A8%E7%AD%BE%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>应用签名</title>
    <link href="http://liujiaboy.github.io/2021/05/20/%E9%80%86%E5%90%91/%E5%BA%94%E7%94%A8%E7%AD%BE%E5%90%8D/"/>
    <id>http://liujiaboy.github.io/2021/05/20/%E9%80%86%E5%90%91/%E5%BA%94%E7%94%A8%E7%AD%BE%E5%90%8D/</id>
    <published>2021-05-20T03:19:01.000Z</published>
    <updated>2021-05-20T09:56:33.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码签名"><a href="#代码签名" class="headerlink" title="代码签名"></a>代码签名</h1><p>代码签名是对<code>可执行文件或脚本</code>进行<code>数字签名</code>，用来确认软件在签名后未被修改或损坏的措施。和数字签名原理一样,只不过签名的数据是代码。</p><h2 id="简单的代码签名"><a href="#简单的代码签名" class="headerlink" title="简单的代码签名"></a>简单的代码签名</h2><p>在iOS出来之前，以前的主流操作系统(Mac/Windows)软件随便从哪里下载都能运行，系统安全存在隐患，盗版软件、病毒入侵、静默安装等等，那么苹果希望解决这样的问题，要保证每一个安装到 iOS 上的 APP 都是经过苹果官方允许的，为了保证都是经过苹果官方允许的，就有了<code>代码签名</code>。</p><p>如果要实现验证，其实最简单的方式就是通过苹果官方生成<code>非对称加密的一对公私钥</code>,在iOS的系统中内置一个<code>公钥</code>，<code>私钥</code>由苹果后台保存，我们传APP到AppStore时，苹果后台用私钥对APP数据进行签名，iOS系统下载这个APP后，用公钥验证这个签名，若签名正确，这个APP肯定是由苹果后台认证的，并且没有被修改过，也就达到了苹果的需求：保证安装的每一个APP都是经过苹果官方允许的。</p><p>如果我们iOS设备安装APP只从App Store这一个入口这件事就简单解决了，没有任何复杂的东西，一个数字签名搞定。</p><p>但是实际上iOS安装APP还有其他渠道。比如对于我们开发者而言,我们是需要在开发APP时直接真机调试，而且苹果还开放了企业内部分发的渠道，企业证书签名的APP也是需要顺利安装的。</p><p>苹果需要开放这些方式安装APP,这些需求就无法通过简单的代码签名来办到了。</p><h1 id="双重签名"><a href="#双重签名" class="headerlink" title="双重签名"></a>双重签名</h1><p>为了解决上述的问题，苹果采用了双层签名。</p><p>首先我们需要两个设备，一个iOS系统的设备，一个Mac系统的设备。iOS开发是在Mac环境下进行的，这也就是双层签名的基础。</p><ol><li>在Mac上生成非对称加密算法的公钥、私钥。我们称之为公钥M、私钥M。M=Mac</li><li>苹果自己有一套公钥、私钥，与简单签名中的逻辑一致，私钥在苹果后台，公钥在每一个iOS系统的设备中，称之为公钥A，私钥A，A=Apple</li><li>公钥M打包开发者的信息，上传到苹果后台（通过CSR请求文件申请证书）。苹果后台用私钥A去签名公钥M，得到一份包含了公钥M的Hash值（签名）以及开发者信息等。这个东西就是证书。然后下载到本地</li><li>在开发时，编译完一个APP，用本地的私钥M（p12文件），对这个APP进行签名，其实就是对Mach-O文件签名，同时步奏3得到的证书也一同打包，生成.ipa文件。</li><li>这个ipa文件也就是我们的APP，安装到手机时，手机上有公钥A，通过公钥A解密步奏3得到的证书，可以拿到公钥M。</li><li>然后再用公钥M验证步奏4对APP的签名。如果签名验证通过，则APP就是合法的。</li></ol><p>但是这样还是会有问题，我们只要有了证书，任何设备都可以安装，而且没有设备数限制。</p><h1 id="描述文件"><a href="#描述文件" class="headerlink" title="描述文件"></a>描述文件</h1><p>苹果为了解决上面的问题，就又加了限制，引入了描述文件。</p><ol><li>对开发者来说，只有添加了udid的设备才能安装。</li><li>只能安装某一个，或者某一类的APP。（指定了bundle id，或者是通配类型：com.apple.*）</li><li>还指定了APP的权限(Entitlements)，比如：iCloud、Push、后台运行等等权限，由xcode生成。</li></ol><p>苹果把这些内容，放在一个文件中，叫做描述文件（Provisioning Profile）。后缀名为mobileprovision</p><p>描述文件一般包括三样东西：证书、App ID、设备信息、权限信息。当我们在真机运行或者打包一个项目的时候，证书用来证明我们程序的安全性和合法性。</p><p>所以我们再来看看真正定双重签名。</p><h1 id="真正的双重签名、验证"><a href="#真正的双重签名、验证" class="headerlink" title="真正的双重签名、验证"></a>真正的双重签名、验证</h1><ol><li>在Mac上生成非对称加密算法的公钥、私钥。我们称之为公钥M、私钥M。M=Mac</li><li>苹果自己有一套公钥、私钥，与简单签名中的逻辑一致，私钥在苹果后台，公钥在每一个iOS系统的设备中，称之为公钥A，私钥A，A=Apple</li><li>公钥M打包开发者的信息，上传到苹果后台（通过CSR请求文件申请证书）。苹果后台用私钥A去签名公钥M，得到一份包含了公钥M的Hash值（签名）以及开发者信息，这个东西就是证书（CRT。可以下载到本地，如果多开发者协同开发，需要把证书的密钥导出来，生成p12文件）。同时打包bundle id，设备的udid、APP权限等和证书一起生成描述文件。然后下载到本地。（多开发者协同开发，需要把对应的p12文件、描述文件一起给开发人员）</li><li>在开发时，选择对应的描述文件，用本地的私钥M（p12文件），对Mach-O文件签名，同时步奏3得到的描述文件也一同打包，生成.ipa文件。<br> 权限文件为<code>embedded.mobileprovision</code>(由xcode生成)，也在ipa内。包含了设备udid的数组、权限数组、app id、有效时间等信息</li><li>这个ipa文件也就是我们的APP，安装到手机时，通过公钥A解密步奏3得到的证书，可以拿到公钥M。</li><li>然后再用公钥M验证步奏4对APP的签名。如果签名验证通过，则APP就是合法的。</li></ol><p><img src="%E5%8F%8C%E9%87%8D%E7%AD%BE%E5%90%8D-%E9%AA%8C%E8%AF%81.jpg" alt=""></p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ul><li>苹果的双重签名验证流程</li><li>生成的证书，需要导出p12文件和描述文件一起发给其他开发人员。</li></ul><p>关于证书相关的配置这里推荐一篇来自知乎的文章，<a href="https://zhuanlan.zhihu.com/p/69162456" target="_blank" rel="noopener">iOS证书配置</a>。写的比较详细了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;代码签名&quot;&gt;&lt;a href=&quot;#代码签名&quot; class=&quot;headerlink&quot; title=&quot;代码签名&quot;&gt;&lt;/a&gt;代码签名&lt;/h1&gt;&lt;p&gt;代码签名是对&lt;code&gt;可执行文件或脚本&lt;/code&gt;进行&lt;code&gt;数字签名&lt;/code&gt;，用来确认软件在签名后未被修改或
      
    
    </summary>
    
    
      <category term="逆向" scheme="http://liujiaboy.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="应用签名" scheme="http://liujiaboy.github.io/tags/%E5%BA%94%E7%94%A8%E7%AD%BE%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>锁的原理-2</title>
    <link href="http://liujiaboy.github.io/2021/05/19/OC%E5%8E%9F%E7%90%86/%E9%94%81%E7%9A%84%E5%8E%9F%E7%90%86-2/"/>
    <id>http://liujiaboy.github.io/2021/05/19/OC%E5%8E%9F%E7%90%86/%E9%94%81%E7%9A%84%E5%8E%9F%E7%90%86-2/</id>
    <published>2021-05-19T14:01:16.000Z</published>
    <updated>2021-05-24T02:16:11.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NSLock"><a href="#NSLock" class="headerlink" title="NSLock"></a>NSLock</h1><p>老规矩，直接上代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSLock *lock &#x3D; [[NSLock alloc] init];</span><br><span class="line">[lock lock];</span><br></pre></td></tr></table></figure><p>之所以这么写，就是为了找到NSLock所在的底层库，我们在<code>[lock lock]</code>这一行打个断点，然后使用符号断点<code>symbolic breakpoint</code>添加一个<code>lock</code>的符号，全靠盲猜。因为使用符合断点是最有效的方法，有时候汇编也不一定能进去。</p><p><img src="foundation_lock.jpg" alt=""></p><p>很容易就找到了，这是在foundation框架中的，但是这个框架是没有开源的，怎么搞呢？</p><p>还有swift源码哈~莫慌</p><p>在<code>NSLock.swift</code>文件中可以找到<code>NSLock</code>的类，下方代码对其做了删减。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">open class NSLock: NSObject, NSLocking &#123;</span><br><span class="line">    internal var mutex &#x3D; _MutexPointer.allocate(capacity: 1)</span><br><span class="line">#if os(macOS) || os(iOS) || os(Windows)</span><br><span class="line">    private var timeoutCond &#x3D; _ConditionVariablePointer.allocate(capacity: 1)</span><br><span class="line">    private var timeoutMutex &#x3D; _MutexPointer.allocate(capacity: 1)</span><br><span class="line">#endif</span><br><span class="line">    &#x2F;&#x2F; init 初始化，内部是pthread_mutex_init，是个互斥锁</span><br><span class="line">    public override init() &#123;</span><br><span class="line">        pthread_mutex_init(mutex, nil)</span><br><span class="line">#if os(macOS) || os(iOS)</span><br><span class="line">        pthread_cond_init(timeoutCond, nil)</span><br><span class="line">        pthread_mutex_init(timeoutMutex, nil)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; dealloc，析构方法</span><br><span class="line">    deinit &#123;</span><br><span class="line">        pthread_mutex_destroy(mutex)</span><br><span class="line">        mutex.deinitialize(count: 1)</span><br><span class="line">        mutex.deallocate()</span><br><span class="line">#if os(macOS) || os(iOS) || os(Windows)</span><br><span class="line">        deallocateTimedLockData(cond: timeoutCond, mutex: timeoutMutex)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 加锁</span><br><span class="line">    open func lock() &#123;</span><br><span class="line">        pthread_mutex_lock(mutex)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 解锁</span><br><span class="line">    open func unlock() &#123;</span><br><span class="line">        pthread_mutex_unlock(mutex)</span><br><span class="line">#if os(macOS) || os(iOS)</span><br><span class="line">        &#x2F;&#x2F; Wakeup any threads waiting in lock(before:)</span><br><span class="line">        pthread_mutex_lock(timeoutMutex)</span><br><span class="line">        pthread_cond_broadcast(timeoutCond)</span><br><span class="line">        pthread_mutex_unlock(timeoutMutex)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; tryLock</span><br><span class="line">    open func &#96;try&#96;() -&gt; Bool &#123;</span><br><span class="line">        return pthread_mutex_trylock(mutex) &#x3D;&#x3D; 0</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;  lockBeforeDate</span><br><span class="line">    open func lock(before limit: Date) -&gt; Bool &#123;</span><br><span class="line">        if pthread_mutex_trylock(mutex) &#x3D;&#x3D; 0 &#123;</span><br><span class="line">            return true</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">#if os(macOS) || os(iOS) || os(Windows)</span><br><span class="line">        return timedLock(mutex: mutex, endTime: limit, using: timeoutCond, with: timeoutMutex)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    open var name: String?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些方法在iOS中都可以找到，我们通过源码可以看到内部的实现逻辑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@interface NSLock : NSObject &lt;NSLocking&gt; &#123;</span><br><span class="line">@private</span><br><span class="line">    void *_priv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)tryLock;</span><br><span class="line">- (BOOL)lockBeforeDate:(NSDate *)limit;</span><br><span class="line"></span><br><span class="line">@property (nullable, copy) NSString *name API_AVAILABLE(macos(10.5), ios(2.0), watchos(2.0), tvos(9.0));</span><br></pre></td></tr></table></figure><p>NSLock内部调用的就是<code>pthread</code>的互斥锁。</p><p>首先我们运行一下下面对的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">NSLock *lock &#x3D; [[NSLock alloc] init];</span><br><span class="line">NSRecursiveLock *recursiveLock &#x3D; [[NSRecursiveLock alloc] init];</span><br><span class="line">for (int i &#x3D; 0; i &lt; 100; i ++) &#123;</span><br><span class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">        &#x2F;&#x2F; 1. lock位置 1</span><br><span class="line">        &#x2F;&#x2F;[lock lock];</span><br><span class="line">        &#x2F;&#x2F;[recursiveLock lock];</span><br><span class="line">        &#x2F;&#x2F; 这里定义了一个block</span><br><span class="line">        static void(^testMethod)(int value);</span><br><span class="line">        testMethod &#x3D; ^(int value) &#123;</span><br><span class="line">            &#x2F;&#x2F; 2. lock位置 2</span><br><span class="line">            &#x2F;&#x2F;[lock lock];</span><br><span class="line">            &#x2F;&#x2F;[recursiveLock lock];</span><br><span class="line">            if (value &gt; 0) &#123;</span><br><span class="line">                NSLog(@&quot;i &#x3D; %d, current value &#x3D; %d&quot;, i, value);</span><br><span class="line">                &#x2F;&#x2F; block内部调用block，形成了嵌套-递归</span><br><span class="line">                testMethod(value - 1);</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;[lock unlock];</span><br><span class="line">            &#x2F;&#x2F;[recursiveLock unlock];</span><br><span class="line">        &#125;;</span><br><span class="line">        testMethod(10);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我虽然把锁都写出来了。但是一开始的情况下，我们不加锁运行一下，看是怎么打印的。</p><p><img src="lock-1.jpg" alt=""></p><p>打印出来的就是一堆无序的数字。</p><p>然后我们使用NSLock，把1处的lock打开，底部unlock也需要打开，再执行一下。</p><p>诶~~ 怎么还发生崩溃了呢？就是因为内部发生了递归调用，这个锁已经玩不了了。<br>那我们该用递归锁试一下，我们使用<code>NSRecursiveLock</code>再运行一下，把1处对应的lock打开。</p><p><img src="lock-2.jpg" alt=""></p><p>这次没问题了哈~ 为啥呢？</p><h1 id="NSRecursiveLock"><a href="#NSRecursiveLock" class="headerlink" title="NSRecursiveLock"></a>NSRecursiveLock</h1><p>我们看一下NSRecursiveLock的源码是啥？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">open class NSRecursiveLock: NSObject, NSLocking &#123;</span><br><span class="line">    internal var mutex &#x3D; _RecursiveMutexPointer.allocate(capacity: 1)</span><br><span class="line">#if os(macOS) || os(iOS) || os(Windows)</span><br><span class="line">    private var timeoutCond &#x3D; _ConditionVariablePointer.allocate(capacity: 1)</span><br><span class="line">    private var timeoutMutex &#x3D; _MutexPointer.allocate(capacity: 1)</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    public override init() &#123;</span><br><span class="line">        super.init()</span><br><span class="line">        var attrib &#x3D; pthread_mutexattr_t()</span><br><span class="line"></span><br><span class="line">        withUnsafeMutablePointer(to: &amp;attrib) &#123; attrs in</span><br><span class="line">            pthread_mutexattr_init(attrs)</span><br><span class="line">            pthread_mutexattr_settype(attrs, Int32(PTHREAD_MUTEX_RECURSIVE))</span><br><span class="line">            pthread_mutex_init(mutex, attrs)</span><br><span class="line">        &#125;</span><br><span class="line">#if os(macOS) || os(iOS)</span><br><span class="line">        pthread_cond_init(timeoutCond, nil)</span><br><span class="line">        pthread_mutex_init(timeoutMutex, nil)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    deinit &#123;</span><br><span class="line">        pthread_mutex_destroy(mutex)</span><br><span class="line">        </span><br><span class="line">        mutex.deinitialize(count: 1)</span><br><span class="line">        mutex.deallocate()</span><br><span class="line">#if os(macOS) || os(iOS) || os(Windows)</span><br><span class="line">        deallocateTimedLockData(cond: timeoutCond, mutex: timeoutMutex)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    open func lock() &#123;</span><br><span class="line">        pthread_mutex_lock(mutex)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    open func unlock() &#123;</span><br><span class="line">        pthread_mutex_unlock(mutex)</span><br><span class="line">#if os(macOS) || os(iOS)</span><br><span class="line">        &#x2F;&#x2F; Wakeup any threads waiting in lock(before:)</span><br><span class="line">        pthread_mutex_lock(timeoutMutex)</span><br><span class="line">        pthread_cond_broadcast(timeoutCond)</span><br><span class="line">        pthread_mutex_unlock(timeoutMutex)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    open func &#96;try&#96;() -&gt; Bool &#123;</span><br><span class="line">        return pthread_mutex_trylock(mutex) &#x3D;&#x3D; 0</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    open func lock(before limit: Date) -&gt; Bool &#123;</span><br><span class="line">        if pthread_mutex_trylock(mutex) &#x3D;&#x3D; 0 &#123;</span><br><span class="line">            return true</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">#if os(macOS) || os(iOS) || os(Windows)</span><br><span class="line">        return timedLock(mutex: mutex, endTime: limit, using: timeoutCond, with: timeoutMutex)</span><br><span class="line">#else</span><br><span class="line">        guard var endTime &#x3D; timeSpecFrom(date: limit) else &#123;</span><br><span class="line">            return false</span><br><span class="line">        &#125;</span><br><span class="line">        return pthread_mutex_timedlock(mutex, &amp;endTime) &#x3D;&#x3D; 0</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    open var name: String?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯哼？？？怎么跟NSLock中的源码没有什么区别？在<code>init()</code>中有略微的不同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public override init() &#123;</span><br><span class="line">    super.init()</span><br><span class="line">    var attrib &#x3D; pthread_mutexattr_t()</span><br><span class="line"></span><br><span class="line">    withUnsafeMutablePointer(to: &amp;attrib) &#123; attrs in</span><br><span class="line">        pthread_mutexattr_init(attrs)</span><br><span class="line">        &#x2F;&#x2F; 设置互斥锁的类型 RECURSIVE（递归）</span><br><span class="line">        pthread_mutexattr_settype(attrs, Int32(PTHREAD_MUTEX_RECURSIVE))</span><br><span class="line">        pthread_mutex_init(mutex, attrs)</span><br><span class="line">    &#125;</span><br><span class="line">#if os(macOS) || os(iOS)</span><br><span class="line">    pthread_cond_init(timeoutCond, nil)</span><br><span class="line">    pthread_mutex_init(timeoutMutex, nil)</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这下就清晰了，NSRecursiveLock在内部是一个互斥锁设置了递归的类型，只有这一点点的区别，就导致上方的代码运行出现那么大的区别。</p><h3 id="lock的位置"><a href="#lock的位置" class="headerlink" title="lock的位置"></a>lock的位置</h3><p>我们继续看上方的代码，把lock的位置放在2.的位置。分别打开NSLock和NSRecursiveLock看看有什么不同：</p><ol><li><p>打开NSLock</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2021-05-20 00:05:11.816871+0800 LockDemo[10150:520495] i &#x3D; 0, current value &#x3D; 10</span><br></pre></td></tr></table></figure><p> 只有一条输出？</p><p> 因为<code>NSLock</code>只是一个互斥锁，执行了<code>lock</code>操作之后，就必须等待<code>unlock</code>才能继续执行，否则就一直等待。</p></li><li><p>打开NSRecursiveLock</p><p> <img src="lock-3.jpg" alt=""></p><p> 竟然发生了crash，但是current value的值是有序的，i的值却是无序的，这是个啥情况？</p><p> 也就是说，递归锁我用了，但是递归执行中，线程与线程直接，递归没有直接的联系，也就是递归锁在多线程中跑偏了~造成了锁内部发生了错乱，导致了crash。</p></li></ol><p>所以啊，别总乱加锁。那么有人可能会说，我直接在调用的时候加锁不就可以了吗，还很省事，不用担心发生crash。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[lock lock];</span><br><span class="line">testMethod(10);</span><br><span class="line">[lock unlock];</span><br></pre></td></tr></table></figure><p>肯定不行啊，这样只是控制了，递归调用不会出现问题，但是i的值呢？</p><p><img src="lock-4.jpg" alt=""></p><p>不管你这这里使用NSLock或NSRecursiveLock都是一样的效果。所以，这种情况，我们经常会使用<code>@synchronized (self)</code>，不用管什么时候加锁和什么时候解锁，也不用担心会发生等待、崩溃。而且性能上，并没有差多少。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">testMethod &#x3D; ^(int value) &#123;</span><br><span class="line">    @synchronized (self) &#123;</span><br><span class="line">        if (value &gt; 0) &#123;</span><br><span class="line">            NSLog(@&quot;i &#x3D; %d, current value &#x3D; %d&quot;, i, value);</span><br><span class="line">            testMethod(value - 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="NSCondition-条件变量"><a href="#NSCondition-条件变量" class="headerlink" title="NSCondition 条件变量"></a>NSCondition 条件变量</h1><p><code>NSCondition</code>的对象实际上作为一个锁和一个线程检查器：锁主要为了当检测条件时保护数据源，执行条件引发的任务；线程检查器主要是根据条件决定是否继续运行线程，即线程是否被阻塞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@interface NSCondition : NSObject &lt;NSLocking&gt; &#123;</span><br><span class="line">&#x2F;&#x2F; 让当前线程处于等待状态</span><br><span class="line">- (void)wait;</span><br><span class="line">&#x2F;&#x2F; 在时间到达之前让当前线程一直等待</span><br><span class="line">- (BOOL)waitUntilDate:(NSDate *)limit;</span><br><span class="line">&#x2F;** </span><br><span class="line"> * CPU发送信号，唤醒等待条件的一个线程，可以执行。可以多次调用，唤醒多个线程。</span><br><span class="line"> * 没有线程等待，则什么也不处理。只有在被锁的情况下才可以调用</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (void)signal;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 唤醒等待的所有线程，如果没有等待，则什么也不做。只有在被锁的情况下才可以调用</span><br><span class="line"> *&#x2F; </span><br><span class="line">- (void)broadcast;</span><br><span class="line"></span><br><span class="line">@property (nullable, copy) NSString *name;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 一般用于多线程同时访问、修改同一个数据源，保证在同一 时间内数据源只被访问、修改一次，其他线程的命令需要在lock外等待，只到unlock ，才可访问</span><br><span class="line">- (void)lock;</span><br><span class="line">&#x2F;&#x2F; 与lock同时使用。</span><br><span class="line">- (void)unlock;</span><br></pre></td></tr></table></figure><p>接下来我们看代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">- (void)conditionTest &#123;</span><br><span class="line">    self.ticketCount &#x3D; 0;</span><br><span class="line">    for (int i &#x3D; 0; i &lt; 100; i++) &#123;</span><br><span class="line">        dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">            [self addTicket];</span><br><span class="line">        &#125;);</span><br><span class="line">        dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">            [self saleTicket];</span><br><span class="line">        &#125;);</span><br><span class="line">        dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">            [self saleTicket];</span><br><span class="line">        &#125;);</span><br><span class="line">        dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">            [self addTicket];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)addTicket &#123;</span><br><span class="line">    self.ticketCount +&#x3D; 1;</span><br><span class="line">    NSLog(@&quot;有票了 %ld&quot;, self.ticketCount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)saleTicket &#123;</span><br><span class="line">    self.ticketCount -&#x3D; 1;</span><br><span class="line">    NSLog(@&quot;卖了一张 %ld&quot;, self.ticketCount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下代码。</p><p><img src="NSCondition-1.jpg" alt=""></p><p>都有可能卖超了。怎么解决这个问题，虽然上面的锁能解决，但是我们使用NSCondition来处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">- (void)addTicket &#123;</span><br><span class="line">    &#x2F;&#x2F; 加锁</span><br><span class="line">    [self.condition lock];</span><br><span class="line">    self.ticketCount +&#x3D; 1;</span><br><span class="line">    NSLog(@&quot;有票了 count &#x3D; %ld&quot;, self.ticketCount);</span><br><span class="line">    &#x2F;&#x2F; 通知，有票了，等待的线程可以执行了</span><br><span class="line">    [self.condition signal];</span><br><span class="line">    &#x2F;&#x2F; 解锁</span><br><span class="line">    [self.condition unlock];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)saleTicket &#123;</span><br><span class="line">    &#x2F;&#x2F; 加锁</span><br><span class="line">    [self.condition lock];</span><br><span class="line">    if (self.ticketCount &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        NSLog(@&quot;wait...没有票了 count &#x3D; 0&quot;);</span><br><span class="line">        &#x2F;&#x2F; 没有票，就等待，不执行，等到有票了再执行</span><br><span class="line">        [self.condition wait];</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 有票了，就执行了</span><br><span class="line">    self.ticketCount -&#x3D; 1;</span><br><span class="line">    NSLog(@&quot;卖了一张 count &#x3D; %ld&quot;, self.ticketCount);</span><br><span class="line">    [self.condition unlock];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下，看看结果</p><p><img src="NSCondition-2.jpg" alt=""></p><p>很是完美，<code>NSCondition</code>条件变量是很少使用的，因为用起来比较麻烦。其主要的点就是在什么时候执行<code>wait</code>、什么时候发送<code>signal</code>。</p><p>看了代码的运用，我们看看内部是怎么实现的。</p><h2 id="NSCondition-内部实现"><a href="#NSCondition-内部实现" class="headerlink" title="NSCondition 内部实现"></a>NSCondition 内部实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">open class NSCondition: NSObject, NSLocking &#123;</span><br><span class="line">    internal var mutex &#x3D; _MutexPointer.allocate(capacity: 1)</span><br><span class="line">    &#x2F;&#x2F; 条件</span><br><span class="line">    internal var cond &#x3D; _ConditionVariablePointer.allocate(capacity: 1)</span><br><span class="line"></span><br><span class="line">    public override init() &#123;</span><br><span class="line">#if os(Windows)</span><br><span class="line">        InitializeSRWLock(mutex)</span><br><span class="line">        InitializeConditionVariable(cond)</span><br><span class="line">#else</span><br><span class="line">        &#x2F;&#x2F; 内部封装了pthread 的互斥锁</span><br><span class="line">        pthread_mutex_init(mutex, nil)</span><br><span class="line">        pthread_cond_init(cond, nil)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    deinit &#123;</span><br><span class="line">#if os(Windows)</span><br><span class="line">        &#x2F;&#x2F; SRWLock do not need to be explicitly destroyed</span><br><span class="line">#else</span><br><span class="line">        pthread_mutex_destroy(mutex)</span><br><span class="line">        pthread_cond_destroy(cond)</span><br><span class="line">#endif</span><br><span class="line">        mutex.deinitialize(count: 1)</span><br><span class="line">        cond.deinitialize(count: 1)</span><br><span class="line">        mutex.deallocate()</span><br><span class="line">        cond.deallocate()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    open func lock() &#123;</span><br><span class="line">#if os(Windows)</span><br><span class="line">        AcquireSRWLockExclusive(mutex)</span><br><span class="line">#else</span><br><span class="line">        pthread_mutex_lock(mutex)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    open func unlock() &#123;</span><br><span class="line">#if os(Windows)</span><br><span class="line">        ReleaseSRWLockExclusive(mutex)</span><br><span class="line">#else</span><br><span class="line">        pthread_mutex_unlock(mutex)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 等待</span><br><span class="line">    open func wait() &#123;</span><br><span class="line">#if os(Windows)</span><br><span class="line">        SleepConditionVariableSRW(cond, mutex, WinSDK.INFINITE, 0)</span><br><span class="line">#else</span><br><span class="line">        pthread_cond_wait(cond, mutex)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    open func wait(until limit: Date) -&gt; Bool &#123;</span><br><span class="line">#if os(Windows)</span><br><span class="line">        return SleepConditionVariableSRW(cond, mutex, timeoutFrom(date: limit), 0)</span><br><span class="line">#else</span><br><span class="line">        guard var timeout &#x3D; timeSpecFrom(date: limit) else &#123;</span><br><span class="line">            return false</span><br><span class="line">        &#125;</span><br><span class="line">        return pthread_cond_timedwait(cond, mutex, &amp;timeout) &#x3D;&#x3D; 0</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 发送信号</span><br><span class="line">    open func signal() &#123;</span><br><span class="line">#if os(Windows)</span><br><span class="line">        WakeConditionVariable(cond)</span><br><span class="line">#else</span><br><span class="line">        pthread_cond_signal(cond)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 唤醒所有条件</span><br><span class="line">    open func broadcast() &#123;</span><br><span class="line">#if os(Windows)</span><br><span class="line">        WakeAllConditionVariable(cond)</span><br><span class="line">#else</span><br><span class="line">        &#x2F;&#x2F; 根据window的释义，唤醒所有条件锁</span><br><span class="line">        pthread_cond_broadcast(cond)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    open var name: String?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NSCondition内部封装的是一个pthread的互斥锁。</p><h1 id="NSConditionLock-条件锁"><a href="#NSConditionLock-条件锁" class="headerlink" title="NSConditionLock 条件锁"></a>NSConditionLock 条件锁</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 初始化当前的条件</span><br><span class="line">- (instancetype)initWithCondition:(NSInteger)condition;</span><br><span class="line">&#x2F;&#x2F; 只读，当前的条件</span><br><span class="line">@property (readonly) NSInteger condition;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 当前线程加锁，如果当前条件与参数一致，则执行，否则等待，直到有对应的条件被解锁。</span><br><span class="line">- (void)lockWhenCondition:(NSInteger)condition;</span><br><span class="line">&#x2F;&#x2F; 解锁，然后把条件传尽来，如果有等待的线程，并且条件与condition相同则执行，没有不处理。</span><br><span class="line">- (void)unlockWithCondition:(NSInteger)condition;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 加锁，没有条件，可以的话直接执行</span><br><span class="line">- (void)lock;</span><br><span class="line">&#x2F;&#x2F; 解锁</span><br><span class="line">- (void)unlock;</span><br></pre></td></tr></table></figure><p>接下来，看一下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- (void)conditonLockTest &#123;</span><br><span class="line">    NSConditionLock *conditionLock &#x3D; [[NSConditionLock alloc] initWithCondition:2];</span><br><span class="line">    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^&#123;</span><br><span class="line">&#x2F;&#x2F;        [conditionLock lockWhenCondition:1];</span><br><span class="line">        NSLog(@&quot;1&quot;);</span><br><span class="line">&#x2F;&#x2F;         [conditionLock unlockWithCondition:0];</span><br><span class="line">    &#125;);</span><br><span class="line">    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, 0), ^&#123;</span><br><span class="line">&#x2F;&#x2F;        [conditionLock lockWhenCondition:2];</span><br><span class="line">        NSLog(@&quot;2&quot;);</span><br><span class="line">&#x2F;&#x2F;        [conditionLock unlockWithCondition:1];</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">&#x2F;&#x2F;       [conditionLock lock];</span><br><span class="line">       NSLog(@&quot;3&quot;);</span><br><span class="line">&#x2F;&#x2F;       [conditionLock unlock];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先不使用<code>NSConditionLock</code>，跑一下代码看看，输出情况：</p><p>根据之前GCD全局队列的内容，该输出可能很随意，每次输出都可能不一样。那接下来把注释的代码打开，在有锁的情况下，再跑一次。</p><p>这次的输出结果为：3-2-1，也有可能是2-3-1。<br>因为初始的<code>NSConditionLock</code>的条件是2，而且是全局并发队列，所以2和3都有可能先执行，但是1肯定是最后执行。因为在2执行完毕之后，才解锁，并把条件该成了1。这个时候才通知条件为1的锁执行。</p><p>条件锁有点类似信号量。</p><h2 id="NSConditionLock-源码："><a href="#NSConditionLock-源码：" class="headerlink" title="NSConditionLock 源码："></a>NSConditionLock 源码：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">open class NSConditionLock : NSObject, NSLocking &#123;</span><br><span class="line">    &#x2F;&#x2F; 内部封装了一个NSCondition</span><br><span class="line">    internal var _cond &#x3D; NSCondition()</span><br><span class="line">    &#x2F;&#x2F; int类型的数据，当做锁的条件</span><br><span class="line">    internal var _value: Int</span><br><span class="line">    internal var _thread: _swift_CFThreadRef?</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 默认init操作，condition &#x3D;&#x3D; 0</span><br><span class="line">    public convenience override init() &#123;</span><br><span class="line">        self.init(condition: 0)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public init(condition: Int) &#123;</span><br><span class="line">        _value &#x3D; condition</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 加锁</span><br><span class="line">    open func lock() &#123;</span><br><span class="line">        let _ &#x3D; lock(before: Date.distantFuture)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 解锁，直接_thread&#x3D;nil，并且唤醒其他线程</span><br><span class="line">    open func unlock() &#123;</span><br><span class="line">        _cond.lock()</span><br><span class="line">#if os(Windows)</span><br><span class="line">        _thread &#x3D; INVALID_HANDLE_VALUE</span><br><span class="line">#else</span><br><span class="line">        _thread &#x3D; nil</span><br><span class="line">#endif</span><br><span class="line">        _cond.broadcast()</span><br><span class="line">        _cond.unlock()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 可读的condition</span><br><span class="line">    open var condition: Int &#123;</span><br><span class="line">        return _value</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 加锁，并且当条件满足时执行，</span><br><span class="line">    open func lock(whenCondition condition: Int) &#123;</span><br><span class="line">        &#x2F;&#x2F; 这里详细说明</span><br><span class="line">        let _ &#x3D; lock(whenCondition: condition, before: Date.distantFuture)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    open func &#96;try&#96;() -&gt; Bool &#123;</span><br><span class="line">        return lock(before: Date.distantPast)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    open func tryLock(whenCondition condition: Int) -&gt; Bool &#123;</span><br><span class="line">        return lock(whenCondition: condition, before: Date.distantPast)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 解锁，并且设置条件</span><br><span class="line">    open func unlock(withCondition condition: Int) &#123;</span><br><span class="line">        _cond.lock()</span><br><span class="line">#if os(Windows)</span><br><span class="line">        _thread &#x3D; INVALID_HANDLE_VALUE</span><br><span class="line">#else</span><br><span class="line">        _thread &#x3D; nil</span><br><span class="line">#endif</span><br><span class="line">        &#x2F;&#x2F; 设置条件锁的条件，并且执行等待的条件锁</span><br><span class="line">        _value &#x3D; condition</span><br><span class="line">        _cond.broadcast()</span><br><span class="line">        _cond.unlock()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    open func lock(before limit: Date) -&gt; Bool &#123;</span><br><span class="line">        _cond.lock()</span><br><span class="line">        while _thread !&#x3D; nil &#123;</span><br><span class="line">            if !_cond.wait(until: limit) &#123;</span><br><span class="line">                _cond.unlock()</span><br><span class="line">                return false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">#if os(Windows)</span><br><span class="line">        _thread &#x3D; GetCurrentThread()</span><br><span class="line">#else</span><br><span class="line">        _thread &#x3D; pthread_self()</span><br><span class="line">#endif</span><br><span class="line">        _cond.unlock()</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; </span><br><span class="line">    open func lock(whenCondition condition: Int, before limit: Date) -&gt; Bool &#123;</span><br><span class="line">        &#x2F;&#x2F; NSCondition 加锁</span><br><span class="line">        _cond.lock()</span><br><span class="line">        &#x2F;&#x2F; 这里是一个while循环，当条件不满足时，就一直循环下去，除非不是等待状态。</span><br><span class="line">        while _thread !&#x3D; nil || _value !&#x3D; condition &#123;</span><br><span class="line">            if !_cond.wait(until: limit) &#123;</span><br><span class="line">                _cond.unlock()</span><br><span class="line">                return false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 当条件满足，直接跳出while循环，向下执行。</span><br><span class="line">#if os(Windows)</span><br><span class="line">        _thread &#x3D; GetCurrentThread()</span><br><span class="line">#else</span><br><span class="line">        _thread &#x3D; pthread_self()</span><br><span class="line">#endif</span><br><span class="line">        _cond.unlock()</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    open var name: String?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NSConditionLock内部封装了NSCondtion，使用起来比<code>NSCondtion</code>更加方便。这个也是一个互斥锁。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="lock-cmp.jpg" alt=""></p><ul><li>@synchronized(obj)<ul><li>objc_sync_enter加锁、objc_sync_exit解锁</li><li>查找obj的流程：当前链表查找 - 线程池中查找 - hash表中查找</li><li>不要乱用obj</li></ul></li><li>NSLock - pthread的互斥锁<ul><li>在递归调用中会发生等待</li></ul></li><li>NSRecursiveLock - 递归锁，封装的也是互斥锁，内部原理与NSLock一致，只是设置了递归的类型。<ul><li>注意递归锁，在多线程中会发生crash</li></ul></li><li>NSCondtion - 互斥锁<ul><li>注意wait和signal调用时机</li></ul></li><li>NSConditionLock - 互斥锁<ul><li>内部封装了NSCondtion</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;NSLock&quot;&gt;&lt;a href=&quot;#NSLock&quot; class=&quot;headerlink&quot; title=&quot;NSLock&quot;&gt;&lt;/a&gt;NSLock&lt;/h1&gt;&lt;p&gt;老规矩，直接上代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>锁的原理</title>
    <link href="http://liujiaboy.github.io/2021/05/16/OC%E5%8E%9F%E7%90%86/%E9%94%81%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>http://liujiaboy.github.io/2021/05/16/OC%E5%8E%9F%E7%90%86/%E9%94%81%E7%9A%84%E5%8E%9F%E7%90%86/</id>
    <published>2021-05-16T15:45:44.000Z</published>
    <updated>2021-05-24T02:16:11.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h1><h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><p>线程反复检查锁变量是否可用。由于线程在这一过程中保持执行，因此是一种<code>忙等待</code>。一旦获取了自旋锁，线程会<code>一直保持该锁</code>，直至显式释放自旋锁。</p><p>自旋锁避免了进程上下文的调度开销，因此对于线程只会阻塞很短时间的场合是有效的。在iOS中，声明属性，默认修饰符atomic，原子性操作自带一把自旋锁。</p><ul><li>OSSpinLock （已经不安全，不在使用）</li><li>atomic</li></ul><h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><p>是一种用于<code>多线程</code>编程中，防止两条线程同时对<code>同一</code>公共资源(比如全局变量)进行读写的机制。该目的通过将代码切片成一个一个的临界区而达成</p><p>这里属于互斥锁的有:</p><ul><li>NSLock</li><li>NSRecursiveLock</li><li>@synchronized</li><li>pthread_mutex </li><li>NSCondition</li><li>NSCondtionLock</li></ul><h2 id="自旋锁与互斥锁的区别"><a href="#自旋锁与互斥锁的区别" class="headerlink" title="自旋锁与互斥锁的区别"></a>自旋锁与互斥锁的区别</h2><ol><li>原理：<ol><li>自旋锁：线程一直处于 加锁 - 解锁 - 忙等，消耗CPU资源较高。</li><li>互斥锁：线程处于 加锁 - 解锁 - 休眠（等待被唤醒）</li></ol></li><li>如果共享数据已有其他线程加锁：<ul><li>自旋锁：死循环的方式等待，一旦被访问的资源被解锁，则立即执行。</li><li>互斥锁：线程会进入休眠状态，等待解锁。</li></ul></li><li>使用自旋锁应及时释放自旋锁，否则等待中的自旋锁会浪费CPU资源。</li></ol><h2 id="条件锁"><a href="#条件锁" class="headerlink" title="条件锁"></a>条件锁</h2><p>就是<code>条件变量</code>，当进程的某些资源要求不满足时就进入休眠，也就是锁住了。当资源被分配到了，条件锁打开，进程继续运行。</p><ul><li>NSCondition</li><li>NSConditionLock</li></ul><h2 id="递归锁"><a href="#递归锁" class="headerlink" title="递归锁"></a>递归锁</h2><p>就是同一个线程可以加锁N次而<code>不会引发死锁</code>。递归锁是特殊的互斥锁，一种带有<code>递归性质的互斥锁</code>。</p><ul><li>NSRecursiveLock</li><li>pthread_mutex(recursive)</li></ul><h2 id="信号量-semaphore"><a href="#信号量-semaphore" class="headerlink" title="信号量(semaphore)"></a>信号量(semaphore)</h2><p>是一种更高级的同步机制，互斥锁可以说是semaphore在仅取值0/1时的特例。信号量可以有更多的取值空间，用来实现更加复杂的同步，而不单单是线程间互斥。它是一个互斥锁。</p><ul><li>dispatch_semaphore</li></ul><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>基本的锁包括两大类：自旋锁和互斥锁，其它锁都是在这两种的封装。</p><h1 id="synchronized-底层原理"><a href="#synchronized-底层原理" class="headerlink" title="@synchronized 底层原理"></a>@synchronized 底层原理</h1><p>我们把如下代码放在<code>main.m</code>文件中执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@synchronized (appDelegateClassName) &#123;</span><br><span class="line">    &#x2F;&#x2F; 进行读写操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过xcrun的命令生成main.cpp文件之后，才看文件可以到@synchronized的内部逻辑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">id _sync_obj &#x3D; (id)appDelegateClassName;</span><br><span class="line">objc_sync_enter(_sync_obj);</span><br><span class="line">try &#123;</span><br><span class="line">    struct _SYNC_EXIT &#123; _SYNC_EXIT(id arg) : sync_exit(arg) &#123;&#125;</span><br><span class="line">        ~_SYNC_EXIT() &#123;</span><br><span class="line">            objc_sync_exit(sync_exit);</span><br><span class="line">        &#125;</span><br><span class="line">        id sync_exit;</span><br><span class="line">    &#125;</span><br><span class="line">    _sync_exit(_sync_obj);</span><br><span class="line"></span><br><span class="line">&#125; catch (id e) &#123;</span><br><span class="line">    _rethrow &#x3D; e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有两个操作，看着像是我们要找的重点内容<code>objc_sync_enter</code>和<code>objc_sync_exit</code>。</p><p>为了以防万一，我们再汇编模式下debug一下代码。<br>在汇编模式下，同样发现了这两处代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">libobjc.A.dylib&#96;objc_sync_enter:</span><br><span class="line"></span><br><span class="line">libobjc.A.dylib&#96;objc_sync_exit:</span><br></pre></td></tr></table></figure><p>并且这两处代码在libobjc.A.dylib中，这是个啥，感觉跟runtime的源码有点关系。是的，就是在runtime的源码中。接下来分析一下源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; Begin synchronizing on &#39;obj&#39;. </span><br><span class="line">&#x2F;&#x2F; Allocates recursive mutex associated with &#39;obj&#39; if needed.</span><br><span class="line">&#x2F;&#x2F; Returns OBJC_SYNC_SUCCESS once lock is acquired.  </span><br><span class="line">int objc_sync_enter(id obj)</span><br><span class="line">&#123;</span><br><span class="line">    int result &#x3D; OBJC_SYNC_SUCCESS;</span><br><span class="line">    &#x2F;&#x2F; 1. obj有值</span><br><span class="line">    if (obj) &#123;</span><br><span class="line">        &#x2F;&#x2F; 2. 生成SyncData类型的data，这是重点，注意参数ACQUIRE</span><br><span class="line">        SyncData* data &#x3D; id2data(obj, ACQUIRE);</span><br><span class="line">        ASSERT(data);</span><br><span class="line">        &#x2F;&#x2F; 3. 加互斥锁</span><br><span class="line">        data-&gt;mutex.lock();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; 4.</span><br><span class="line">        &#x2F;&#x2F; @synchronized(nil) does nothing</span><br><span class="line">        if (DebugNilSync) &#123;</span><br><span class="line">            _objc_inform(&quot;NIL SYNC DEBUG: @synchronized(nil); set a breakpoint on objc_sync_nil to debug&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        objc_sync_nil();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们一步步分析源码：</p><ol><li>obj就是<code>@synchronized (self)</code>传进来的参数。有值的情况下会执行 2. 没有值则执行 4.</li><li><code>SyncData</code>是一个结构体</li><li>加锁</li><li>执行<code>objc_sync_nil();</code>直接返回</li></ol><p>我们先看一下<code>objc_sync_exit</code>的内部结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; End synchronizing on &#39;obj&#39;. </span><br><span class="line">&#x2F;&#x2F; Returns OBJC_SYNC_SUCCESS or OBJC_SYNC_NOT_OWNING_THREAD_ERROR</span><br><span class="line">int objc_sync_exit(id obj)</span><br><span class="line">&#123;</span><br><span class="line">    int result &#x3D; OBJC_SYNC_SUCCESS;</span><br><span class="line">    &#x2F;&#x2F; 1. 判断是否有obj</span><br><span class="line">    if (obj) &#123;</span><br><span class="line">        &#x2F;&#x2F; 获取data，注意传的值的参数是RELEASE</span><br><span class="line">        SyncData* data &#x3D; id2data(obj, RELEASE); </span><br><span class="line">        if (!data) &#123;</span><br><span class="line">            result &#x3D; OBJC_SYNC_NOT_OWNING_THREAD_ERROR;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            &#x2F;&#x2F; 有值的情况下，就进行解锁</span><br><span class="line">            bool okay &#x3D; data-&gt;mutex.tryUnlock();</span><br><span class="line">            if (!okay) &#123;</span><br><span class="line">                result &#x3D; OBJC_SYNC_NOT_OWNING_THREAD_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; @synchronized(nil) does nothing</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现<code>objc_sync_exit</code>和<code>objc_sync_enter</code>的内部大同小异。主要的内容都是在<code>id2data</code>函数内部。</p><p>接下来，我们重点看一下这个函数：</p><p><img src="id2data.jpg" alt=""></p><p>这个函数太大了，先把一些代码逻辑隐藏掉了，接着一步一步分析：</p><h2 id="SyncData-链表"><a href="#SyncData-链表" class="headerlink" title="SyncData 链表"></a>SyncData 链表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef struct alignas(CacheLineSize) SyncData &#123;</span><br><span class="line">    struct SyncData* nextData;  &#x2F;&#x2F; 指向下一个值，</span><br><span class="line">    DisguisedPtr&lt;objc_object&gt; object;</span><br><span class="line">    int32_t threadCount;  &#x2F;&#x2F; number of THREADS using this block</span><br><span class="line">    recursive_mutex_t mutex;</span><br><span class="line">&#125; SyncData;</span><br></pre></td></tr></table></figure><ol><li><code>nextData</code>指向下一个值，类似与链表结构。</li><li>object：hash map的关联对象，就是<code>@synchronized (self)</code>中self这个参数。</li><li>threadCount：有多少个线程执行了这个block</li><li>mutex：这是一个递归锁，递归锁是互斥锁的一种</li></ol><h2 id="SyncList"><a href="#SyncList" class="headerlink" title="SyncList"></a>SyncList</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spinlock_t *lockp &#x3D; &amp;LOCK_FOR_OBJ(object);</span><br><span class="line">SyncData **listp &#x3D; &amp;LIST_FOR_OBJ(object);</span><br></pre></td></tr></table></figure><p>首先出现的就是spinlock_t类型的锁，这是一个自旋锁，通过<code>LOCK_FOR_OBJ(object)</code>来获取。<br><code>SyncData指针类型</code>的数据，通过LIST_FOR_OBJ获取。都是通过<code>SyncList</code>获取的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">struct SyncList &#123;</span><br><span class="line">    SyncData *data;</span><br><span class="line">    spinlock_t lock;</span><br><span class="line"></span><br><span class="line">    constexpr SyncList() : data(nil), lock(fork_unsafe_lock) &#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Use multiple parallel lists to decrease contention among unrelated objects.</span><br><span class="line">#define LOCK_FOR_OBJ(obj) sDataLists[obj].lock</span><br><span class="line">#define LIST_FOR_OBJ(obj) sDataLists[obj].data</span><br><span class="line">static StripedMap&lt;SyncList&gt; sDataLists;</span><br></pre></td></tr></table></figure><p><code>SyncList</code>是一个结构体类型，内部有一个链表，<code>spinlock_t</code>是一个自旋锁。它存放的是一个总表。</p><p><code>tls</code>：是一个线程缓存的表，通过set和get方法获取对应key的值。</p><ul><li>SYNC_DATA_DIRECT_KEY： 数据data对应的key</li><li>SYNC_COUNT_DIRECT_KEY：锁的个数对应的key</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">typedef struct SyncCache &#123;</span><br><span class="line">    unsigned int allocated;</span><br><span class="line">    unsigned int used;</span><br><span class="line">    SyncCacheItem list[0];</span><br><span class="line">&#125; SyncCache;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">    SyncData *data;</span><br><span class="line">    unsigned int lockCount;  &#x2F;&#x2F; number of times THIS THREAD locked this block</span><br><span class="line">&#125; SyncCacheItem;</span><br></pre></td></tr></table></figure><p><code>SyncCache</code>也是一个结构体，主要作用是存储线程，内部有一个list数组，存储不同的线程。<code>list[0]</code>存放的是当前线程的SyncData链表。</p><h2 id="第一步-有data"><a href="#第一步-有data" class="headerlink" title="第一步 有data"></a>第一步 有data</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Check per-thread single-entry fast cache for matching object</span><br><span class="line">bool fastCacheOccupied &#x3D; NO;</span><br><span class="line">&#x2F;&#x2F; 1. 通过get方法，从tls缓存表中获取data</span><br><span class="line">SyncData *data &#x3D; (SyncData *)tls_get_direct(SYNC_DATA_DIRECT_KEY);</span><br><span class="line">if (data) &#123;</span><br><span class="line">    &#x2F;&#x2F; 快速缓存查找 为YES</span><br><span class="line">    fastCacheOccupied &#x3D; YES;</span><br><span class="line">    &#x2F;&#x2F; 如果缓存中获取的data-&gt;object等于@synchronized(object)，说明之前有使用过object</span><br><span class="line">    if (data-&gt;object &#x3D;&#x3D; object) &#123;</span><br><span class="line">        &#x2F;&#x2F; Found a match in fast cache.</span><br><span class="line">        &#x2F;&#x2F; 有几个锁，也就是有几次执行synchronized</span><br><span class="line">        uintptr_t lockCount;    </span><br><span class="line"></span><br><span class="line">        result &#x3D; data;</span><br><span class="line">        &#x2F;&#x2F; 在快速缓存中</span><br><span class="line">        lockCount &#x3D; (uintptr_t)tls_get_direct(SYNC_COUNT_DIRECT_KEY);</span><br><span class="line">        &#x2F;&#x2F; 表中中data，但是对应的线程数和锁的个数都小于0，说明获取的data有问题</span><br><span class="line">        if (result-&gt;threadCount &lt;&#x3D; 0  ||  lockCount &lt;&#x3D; 0) &#123;</span><br><span class="line">            _objc_fatal(&quot;id2data fastcache is buggy&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 还记得上层方法enter、exit调用这个方法传的参数吗？</span><br><span class="line">        switch(why) &#123;</span><br><span class="line">        case ACQUIRE: &#123;</span><br><span class="line">            &#x2F;&#x2F; enter -- 锁的个数+1</span><br><span class="line">            lockCount++;</span><br><span class="line">            &#x2F;&#x2F; 然后通过set方法存的tls表中</span><br><span class="line">            tls_set_direct(SYNC_COUNT_DIRECT_KEY, (void*)lockCount);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        case RELEASE:</span><br><span class="line">            &#x2F;&#x2F; exit -- 锁的个数-1</span><br><span class="line">            lockCount--;</span><br><span class="line">            &#x2F;&#x2F; 存放到tls表中</span><br><span class="line">            tls_set_direct(SYNC_COUNT_DIRECT_KEY, (void*)lockCount);</span><br><span class="line">            if (lockCount &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                &#x2F;&#x2F; 锁的个数等于 0 ，直接从表中移除</span><br><span class="line">                &#x2F;&#x2F; remove from fast cache</span><br><span class="line">                tls_set_direct(SYNC_DATA_DIRECT_KEY, NULL);</span><br><span class="line">                &#x2F;&#x2F; atomic because may collide with concurrent ACQUIRE</span><br><span class="line">                OSAtomicDecrement32Barrier(&amp;result-&gt;threadCount);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        case CHECK:</span><br><span class="line">            &#x2F;&#x2F; do nothing</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二步-cache"><a href="#第二步-cache" class="headerlink" title="第二步 cache"></a>第二步 cache</h2><p>SyncCache还有印象吗？内部list[0]存放的是当前的SyncData</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Check per-thread cache of already-owned locks for matching object</span><br><span class="line">&#x2F;&#x2F; 从线程的缓存池里捞数据，先看看这个函数，</span><br><span class="line">SyncCache *cache &#x3D; fetch_cache(NO);</span><br><span class="line">if (cache) &#123;</span><br><span class="line">    unsigned int i;</span><br><span class="line">    for (i &#x3D; 0; i &lt; cache-&gt;used; i++) &#123;</span><br><span class="line">        &#x2F;&#x2F; list存放的是SyncCacheItem的数组，判断每一个item中对应的object是不是我们使用@synchronized传的参数。</span><br><span class="line">        SyncCacheItem *item &#x3D; &amp;cache-&gt;list[i];</span><br><span class="line">        if (item-&gt;data-&gt;object !&#x3D; object) continue;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Found a match. 恰好在线程的缓存池中找到了</span><br><span class="line">        result &#x3D; item-&gt;data;</span><br><span class="line">        &#x2F;&#x2F; 判断错误</span><br><span class="line">        if (result-&gt;threadCount &lt;&#x3D; 0  ||  item-&gt;lockCount &lt;&#x3D; 0) &#123;</span><br><span class="line">            _objc_fatal(&quot;id2data cache is buggy&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 这是直接在线程池中的数据做的操作</span><br><span class="line">        switch(why) &#123;</span><br><span class="line">        case ACQUIRE:</span><br><span class="line">            item-&gt;lockCount++;</span><br><span class="line">            break;</span><br><span class="line">        case RELEASE:</span><br><span class="line">            item-&gt;lockCount--;</span><br><span class="line">            if (item-&gt;lockCount &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                &#x2F;&#x2F; remove from per-thread cache</span><br><span class="line">                &#x2F;&#x2F; 直接从线程池中移除</span><br><span class="line">                cache-&gt;list[i] &#x3D; cache-&gt;list[--cache-&gt;used];</span><br><span class="line">                &#x2F;&#x2F; atomic because may collide with concurrent ACQUIRE</span><br><span class="line">                OSAtomicDecrement32Barrier(&amp;result-&gt;threadCount);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        case CHECK:</span><br><span class="line">            &#x2F;&#x2F; do nothing</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 找到了就返回</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fetch-cache-函数"><a href="#fetch-cache-函数" class="headerlink" title="fetch_cache 函数"></a>fetch_cache 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">static SyncCache *fetch_cache(bool create)</span><br><span class="line">&#123;</span><br><span class="line">    _objc_pthread_data *data;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 这个函数有解释，而且一目了然，没有从线程缓存池中拿到数据，并且参数create&#x3D;&#x3D;NO，然后null，如果参数是YES，则创建一个。所以这里没有找到的话返回的是null，这个函数的主要作用就是获取cache</span><br><span class="line">    data &#x3D; _objc_fetch_pthread_data(create);</span><br><span class="line">    if (!data) return NULL;</span><br><span class="line"></span><br><span class="line">    if (!data-&gt;syncCache) &#123;</span><br><span class="line">        if (!create) &#123;</span><br><span class="line">            return NULL;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            int count &#x3D; 4;</span><br><span class="line">            data-&gt;syncCache &#x3D; (SyncCache *)</span><br><span class="line">                calloc(1, sizeof(SyncCache) + count*sizeof(SyncCacheItem));</span><br><span class="line">            data-&gt;syncCache-&gt;allocated &#x3D; count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Make sure there&#39;s at least one open slot in the list.</span><br><span class="line">    if (data-&gt;syncCache-&gt;allocated &#x3D;&#x3D; data-&gt;syncCache-&gt;used) &#123;</span><br><span class="line">        data-&gt;syncCache-&gt;allocated *&#x3D; 2;</span><br><span class="line">        data-&gt;syncCache &#x3D; (SyncCache *)</span><br><span class="line">            realloc(data-&gt;syncCache, sizeof(SyncCache) </span><br><span class="line">                    + data-&gt;syncCache-&gt;allocated * sizeof(SyncCacheItem));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return data-&gt;syncCache;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先看一下<code>_objc_fetch_pthread_data</code>，这个方法已经说的很清楚了，有注释，代码都不用看。</p><p>其主要目的是从tls表中获取通过key获取<code>_objc_pthread_data</code>（结构体），内部有一个<code>SyncCache</code>，我们的最终目的也就是通过这个<code>SyncCache</code>中的list获取我们<code>@synchronized(object)</code>中object对应的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***********************************************************************</span><br><span class="line">* _objc_fetch_pthread_data</span><br><span class="line">* Fetch objc&#39;s pthread data for this thread.</span><br><span class="line">* If the data doesn&#39;t exist yet and create is NO, return NULL.</span><br><span class="line">* If the data doesn&#39;t exist yet and create is YES, allocate and return it.</span><br><span class="line">**********************************************************************&#x2F;</span><br><span class="line">_objc_pthread_data *_objc_fetch_pthread_data(bool create)</span><br><span class="line">&#123;</span><br><span class="line">    _objc_pthread_data *data;</span><br><span class="line"></span><br><span class="line">    data &#x3D; (_objc_pthread_data *)tls_get(_objc_pthread_key);</span><br><span class="line">    if (!data  &amp;&amp;  create) &#123;</span><br><span class="line">        data &#x3D; (_objc_pthread_data *)</span><br><span class="line">            calloc(1, sizeof(_objc_pthread_data));</span><br><span class="line">        tls_set(_objc_pthread_key, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 首先执行的就上锁，这是一个自旋锁</span><br><span class="line">lockp-&gt;lock();</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    SyncData* p;</span><br><span class="line">    SyncData* firstUnused &#x3D; NULL;</span><br><span class="line">    &#x2F;&#x2F; 执行for循环，这里的目的就是一直在遍历SyncData这个链表，看其中是否有数据</span><br><span class="line">    for (p &#x3D; *listp; p !&#x3D; NULL; p &#x3D; p-&gt;nextData) &#123;</span><br><span class="line">        &#x2F;&#x2F; 有数据，正好是我们用的那个。直接执行done语句</span><br><span class="line">        if ( p-&gt;object &#x3D;&#x3D; object ) &#123;</span><br><span class="line">            result &#x3D; p;</span><br><span class="line">            &#x2F;&#x2F; atomic because may collide with concurrent RELEASE</span><br><span class="line">            OSAtomicIncrement32Barrier(&amp;result-&gt;threadCount);</span><br><span class="line">            goto done;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 没有发现，则直接赋值</span><br><span class="line">        if ( (firstUnused &#x3D;&#x3D; NULL) &amp;&amp; (p-&gt;threadCount &#x3D;&#x3D; 0) )</span><br><span class="line">            firstUnused &#x3D; p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; no SyncData currently associated with object</span><br><span class="line">    if ( (why &#x3D;&#x3D; RELEASE) || (why &#x3D;&#x3D; CHECK) )</span><br><span class="line">        goto done;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; an unused one was found, use it</span><br><span class="line">    if ( firstUnused !&#x3D; NULL ) &#123;</span><br><span class="line">        &#x2F;&#x2F; for循环中捞到的值赋给result</span><br><span class="line">        result &#x3D; firstUnused;</span><br><span class="line">        &#x2F;&#x2F; object指向@synchronized的参数</span><br><span class="line">        result-&gt;object &#x3D; (objc_object *)object;</span><br><span class="line">        &#x2F;&#x2F; 线程数是1</span><br><span class="line">        result-&gt;threadCount &#x3D; 1;</span><br><span class="line">        goto done;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 上面的流程也没有得到数据，哪就自己创建一个，并且加到线程池中。</span><br><span class="line">posix_memalign((void **)&amp;result, alignof(SyncData), sizeof(SyncData));</span><br><span class="line">result-&gt;object &#x3D; (objc_object *)object;</span><br><span class="line">result-&gt;threadCount &#x3D; 1;</span><br><span class="line">new (&amp;result-&gt;mutex) recursive_mutex_t(fork_unsafe_lock);</span><br><span class="line">result-&gt;nextData &#x3D; *listp;</span><br><span class="line">*listp &#x3D; result;</span><br></pre></td></tr></table></figure><p>我们接下来看done的操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">done:</span><br><span class="line">    &#x2F;&#x2F; 自旋锁解锁， 这个锁只在第三步有使用。因为这是一个耗时操作</span><br><span class="line">    lockp-&gt;unlock();</span><br><span class="line">    if (result) &#123;</span><br><span class="line">        &#x2F;&#x2F; Only new ACQUIRE should get here.</span><br><span class="line">        &#x2F;&#x2F; All RELEASE and CHECK and recursive ACQUIRE are </span><br><span class="line">        &#x2F;&#x2F; handled by the per-thread caches above.</span><br><span class="line">        if (why &#x3D;&#x3D; RELEASE) &#123;</span><br><span class="line">            &#x2F;&#x2F; 啥都没有呢，就释放，返回nil</span><br><span class="line">            &#x2F;&#x2F; Probably some thread is incorrectly exiting </span><br><span class="line">            &#x2F;&#x2F; while the object is held by another thread.</span><br><span class="line">            return nil;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 错误判断</span><br><span class="line">        if (why !&#x3D; ACQUIRE) _objc_fatal(&quot;id2data is buggy&quot;);</span><br><span class="line">        if (result-&gt;object !&#x3D; object) _objc_fatal(&quot;id2data is buggy&quot;);</span><br><span class="line"></span><br><span class="line">#if SUPPORT_DIRECT_THREAD_KEYS</span><br><span class="line">        &#x2F;&#x2F; 走了第一步就会变成YES。</span><br><span class="line">        if (!fastCacheOccupied) &#123;</span><br><span class="line">            &#x2F;&#x2F; Save in fast thread cache</span><br><span class="line">            &#x2F;&#x2F; 把SyncData、lockCount&#x3D;1锁的个数存到tls表中，快速查找的表</span><br><span class="line">            tls_set_direct(SYNC_DATA_DIRECT_KEY, result);</span><br><span class="line">            tls_set_direct(SYNC_COUNT_DIRECT_KEY, (void*)1);</span><br><span class="line">        &#125; else </span><br><span class="line">#endif</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; Save in thread cache</span><br><span class="line">            &#x2F;&#x2F; 存到线程池的表中</span><br><span class="line">            if (!cache) cache &#x3D; fetch_cache(YES);</span><br><span class="line">            cache-&gt;list[cache-&gt;used].data &#x3D; result;</span><br><span class="line">            cache-&gt;list[cache-&gt;used].lockCount &#x3D; 1;</span><br><span class="line">            cache-&gt;used++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 返回结果。</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="lock_find_data.jpg" alt=""></p><p>图上，左边就是线程list，每一个线程有一个链表。 先从当前的链表中查找，如果找到直接处理。没有找到则从线程中找到对应的链表再处理。</p><p>所以性能是最差的，内部有两个锁，一个自旋锁，一个递归锁，再加上快速查找，线程池缓存查找，等一系列操作，十分消耗性能，但是还是使用非常广泛，就是因为使用简单，不用自己加锁、解锁。</p><p>再看另外一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (int i &#x3D; 0; i &lt; 100000; i ++) &#123;</span><br><span class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">        self.mArray &#x3D; [NSMutableArray array];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的代码，是否会发生crash？</p><p>会发生crash，就是因为点属性是一个set方法，在set方法内部，会对旧值relase，新值retain，在某一个节点，就有可能release的次数过多，造成重复释放，发生了野指针，就发生了crash。</p><p>最简单的做法就是使用<code>@synchronized(self)</code>，那能不能锁<code>@synchronized(_mArray)</code>呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@synchronized (self) &#123;</span><br><span class="line">    self.mArray &#x3D; [NSMutableArray array];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案是不能，因为在运行的过程中，_mArray会有等于nil的情况，那还能锁住啥？</p><p><code>@synchronized (self)</code>锁的对象一定要有声明周期，是可以释放的，并且block中执行的变量最好与锁住的对象有关系，两人存在声明周期上的关联。</p><p>但是也不要乱用self，当在不同线程执行不同的block时，<code>@synchronized</code>的查找会更加耗时，因为链表的查找需要从头开始找。这个时候就需要使用其他的锁来处理了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p>锁的分类</p><ol><li>自旋锁 ：atomic</li><li>互斥锁 ：@synchronized，NSLock，pthread</li><li>条件锁 ：NSCondition，NSConditionLock</li><li>递归锁 ：NSRecursiveLock</li><li>信号量 ：dispatch_semaphore</li><li>主要分为两大类：自旋锁、互斥锁</li></ol></li><li><p>@synchronized底层原理</p><ol><li>通过objc_sync_enter加锁</li><li>通过objc_sync_exit解锁</li><li>内部有一个自旋锁、一个递归锁。自旋锁用于hash表中的查找，查找线程池。递归锁用于锁住的对象的操作。</li><li>查找分为3个步奏：<ol><li>通过当前链表查找，找到了直接返回</li><li>当前链表没有则通过线程池缓存查找，</li><li>在hash表中查找</li><li>锁住的对象最好与block执行的变量有关联关系，不要乱用self</li></ol></li></ol></li></ul><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="https://opensource.apple.com/tarballs/objc4/" target="_blank" rel="noopener">objc源码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;锁的分类&quot;&gt;&lt;a href=&quot;#锁的分类&quot; class=&quot;headerlink&quot; title=&quot;锁的分类&quot;&gt;&lt;/a&gt;锁的分类&lt;/h1&gt;&lt;h2 id=&quot;自旋锁&quot;&gt;&lt;a href=&quot;#自旋锁&quot; class=&quot;headerlink&quot; title=&quot;自旋锁&quot;&gt;&lt;/a&gt;自旋
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>GCD底层原理-3</title>
    <link href="http://liujiaboy.github.io/2021/05/16/OC%E5%8E%9F%E7%90%86/GCD-3/"/>
    <id>http://liujiaboy.github.io/2021/05/16/OC%E5%8E%9F%E7%90%86/GCD-3/</id>
    <published>2021-05-16T09:41:00.000Z</published>
    <updated>2021-05-17T02:21:40.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h1><p>先看代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">- (void)semaphore &#123;</span><br><span class="line">    &#x2F;&#x2F; 全局队列</span><br><span class="line">    dispatch_queue_t queue &#x3D; dispatch_get_global_queue(0, 0);</span><br><span class="line">    &#x2F;&#x2F; 初始化一个信号量可以并发执行2个任务</span><br><span class="line">    dispatch_semaphore_t sem &#x3D; dispatch_semaphore_create(2);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;任务1</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);</span><br><span class="line">        NSLog(@&quot;1 start..&quot;);</span><br><span class="line">        sleep(1);</span><br><span class="line">        NSLog(@&quot;1 end...&quot;);</span><br><span class="line">        dispatch_semaphore_signal(sem);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;任务2</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);</span><br><span class="line">        NSLog(@&quot;2 start..&quot;);</span><br><span class="line">        sleep(1);</span><br><span class="line">        NSLog(@&quot;2 end...&quot;);</span><br><span class="line">        dispatch_semaphore_signal(sem);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;任务3</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);</span><br><span class="line">        NSLog(@&quot;3 start..&quot;);</span><br><span class="line">        sleep(1);</span><br><span class="line">        NSLog(@&quot;3 end...&quot;);</span><br><span class="line">        dispatch_semaphore_signal(sem);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先运行一下这个demo，看输出的结果是什么样子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2021-05-16 17:38:16.018150+0800 GCDDemo[972:7272767] 1 start..</span><br><span class="line">2021-05-16 17:38:16.018154+0800 GCDDemo[972:7272769] 2 start..</span><br><span class="line">2021-05-16 17:38:17.027319+0800 GCDDemo[972:7272767] 1 end...</span><br><span class="line">2021-05-16 17:38:17.027332+0800 GCDDemo[972:7272769] 2 end...</span><br><span class="line">2021-05-16 17:38:17.027556+0800 GCDDemo[972:7272765] 3 start..</span><br><span class="line">2021-05-16 17:38:18.031174+0800 GCDDemo[972:7272765] 3 end...</span><br></pre></td></tr></table></figure><p>我们也需要看打印的时间点，先执行1、2 start，1s之后执行了1、2 end，紧接着执行3。</p><p>如果把信号量的初始值改成1呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2021-05-16 18:07:48.061949+0800 GCDDemo[1220:7292903] 1 start..</span><br><span class="line">2021-05-16 18:07:49.063438+0800 GCDDemo[1220:7292903] 1 end...</span><br><span class="line">2021-05-16 18:07:49.063639+0800 GCDDemo[1220:7292901] 2 start..</span><br><span class="line">2021-05-16 18:07:50.063905+0800 GCDDemo[1220:7292901] 2 end...</span><br><span class="line">2021-05-16 18:07:50.064202+0800 GCDDemo[1220:7292906] 3 start..</span><br><span class="line">2021-05-16 18:07:51.064940+0800 GCDDemo[1220:7292906] 3 end...</span><br></pre></td></tr></table></figure><p>结果就是先执行1，然后2，3每次间隔都是1s。</p><p>为什么能确定并发执行的个数呢？就是因为其中有两个语句，确定了最大的并发数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 执行-1操作</span><br><span class="line">dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);</span><br><span class="line">&#x2F;&#x2F; 执行+1操作</span><br><span class="line">dispatch_semaphore_signal(sem);</span><br></pre></td></tr></table></figure><p>分别看一下内部实现。</p><h2 id="dispatch-semaphore-create"><a href="#dispatch-semaphore-create" class="headerlink" title="dispatch_semaphore_create"></a>dispatch_semaphore_create</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">dispatch_semaphore_t</span><br><span class="line">dispatch_semaphore_create(intptr_t value)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_semaphore_t dsema;</span><br><span class="line">if (value &lt; 0) &#123;</span><br><span class="line">return DISPATCH_BAD_INPUT;</span><br><span class="line">&#125;</span><br><span class="line">   &#x2F;&#x2F; 初始化信号量结构体  </span><br><span class="line">dsema &#x3D; _dispatch_object_alloc(DISPATCH_VTABLE(semaphore),</span><br><span class="line">sizeof(struct dispatch_semaphore_s));</span><br><span class="line">dsema-&gt;do_next &#x3D; DISPATCH_OBJECT_LISTLESS;</span><br><span class="line">dsema-&gt;do_targetq &#x3D; _dispatch_get_default_queue(false);</span><br><span class="line">&#x2F;&#x2F; 用来保存初始化的最大并发数</span><br><span class="line">dsema-&gt;dsema_value &#x3D; value;</span><br><span class="line">_dispatch_sema4_init(&amp;dsema-&gt;dsema_sema, _DSEMA4_POLICY_FIFO);</span><br><span class="line">dsema-&gt;dsema_orig &#x3D; value;</span><br><span class="line">return dsema;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到了吧，最开始就已经有判断了，如果创建时的参数小于0，直接返回一个<code>DISPATCH_BAD_INPUT</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define DISPATCH_BAD_INPUT((void *_Nonnull)0)</span><br></pre></td></tr></table></figure><p>知道时啥了吗？就是一个野指针。</p><p>那我们接下来看<code>dispatch_semaphore_wait</code>函数。</p><h2 id="dispatch-semaphore-wait"><a href="#dispatch-semaphore-wait" class="headerlink" title="dispatch_semaphore_wait"></a>dispatch_semaphore_wait</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">intptr_t</span><br><span class="line">dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)</span><br><span class="line">&#123;</span><br><span class="line">long value &#x3D; os_atomic_dec2o(dsema, dsema_value, acquire);</span><br><span class="line">if (likely(value &gt;&#x3D; 0)) &#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">return _dispatch_semaphore_wait_slow(dsema, timeout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用了<code>os_atomic_dec2o</code>，但是有一个dec，猜测应该是减法操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#define os_atomic_dec2o(p, f, m) \</span><br><span class="line">os_atomic_sub2o(p, f, 1, m)</span><br><span class="line"></span><br><span class="line">#define os_atomic_sub2o(p, f, v, m) \</span><br><span class="line">os_atomic_sub(&amp;(p)-&gt;f, (v), m)</span><br><span class="line"></span><br><span class="line">#define os_atomic_sub(p, v, m) \</span><br><span class="line">_os_atomic_c11_op((p), (v), m, sub, -)</span><br><span class="line"></span><br><span class="line">#define _os_atomic_c11_op(p, v, m, o, op) \</span><br><span class="line">(&#123; _os_atomic_basetypeof(p) _v &#x3D; (v), _r &#x3D; \</span><br><span class="line">atomic_fetch_##o##_explicit(_os_atomic_c11_atomic(p), _v, \</span><br><span class="line">memory_order_##m); (__typeof__(_r))(_r op _v); &#125;)</span><br></pre></td></tr></table></figure><p>一层一层的宏定义，最后可以得出的函数是<code>atomic_fetch_sub_explicit</code>。<br>这是一个C语言的原子类型减的函数。也就是<code>dsema-&gt;dsema_value - 1</code>。</p><p>大于等于0都可以正常执行，否则发生等待。</p><h2 id="dispatch-semaphore-signal"><a href="#dispatch-semaphore-signal" class="headerlink" title="dispatch_semaphore_signal"></a>dispatch_semaphore_signal</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">intptr_t</span><br><span class="line">dispatch_semaphore_signal(dispatch_semaphore_t dsema)</span><br><span class="line">&#123;</span><br><span class="line">long value &#x3D; os_atomic_inc2o(dsema, dsema_value, release);</span><br><span class="line">if (likely(value &gt; 0)) &#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">if (unlikely(value &#x3D;&#x3D; LONG_MIN)) &#123;</span><br><span class="line">DISPATCH_CLIENT_CRASH(value,</span><br><span class="line">&quot;Unbalanced call to dispatch_semaphore_signal()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return _dispatch_semaphore_signal_slow(dsema);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dispatch_semaphore_signal</code>与<code>dispatch_semaphore_wait</code>正好相反，执行的是加法操作，每次加1。</p><p>这里的判断条件是<code>value &gt; 0</code>，都可以正常执行，也就是必须有1个才行，否则阻塞线程，一直处于等待状态。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>dispatch_semaphore_wait</code>和<code>dispatch_semaphore_signal</code>肯定是成对出现的。</p><h1 id="dispatch-group-调度组"><a href="#dispatch-group-调度组" class="headerlink" title="dispatch_group 调度组"></a>dispatch_group 调度组</h1><p>当我们在业务中，需要两个网络请求都返回之后，才能处理某一个业务逻辑时，调度组就能很好的发挥作用，而且用起来很简单。</p><p>先看一下简单的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">- (void)groupDemo &#123;</span><br><span class="line">    dispatch_group_t group &#x3D; dispatch_group_create();</span><br><span class="line">    dispatch_queue_t globle &#x3D; dispatch_get_global_queue(0, 0);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 1.</span><br><span class="line">    dispatch_group_enter(group);</span><br><span class="line">    dispatch_async(globle, ^&#123;</span><br><span class="line">        NSLog(@&quot;1 start ...&quot;);</span><br><span class="line">        sleep(3);</span><br><span class="line">        dispatch_group_leave(group);</span><br><span class="line">    &#125;);</span><br><span class="line">    &#x2F;&#x2F; 2.</span><br><span class="line">    dispatch_group_enter(group);</span><br><span class="line">    dispatch_async(globle, ^&#123;</span><br><span class="line">        NSLog(@&quot;2 start ...&quot;);</span><br><span class="line">        sleep(3);</span><br><span class="line">        dispatch_group_leave(group);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 3.</span><br><span class="line">    dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        NSLog(@&quot;3 ...&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们执行一下代码，发现3是最后执行的。</p><p>如果出现<code>dispatch_group_enter</code>比<code>dispatch_group_leave</code>多的情况呢？<br>不会发生crash。</p><p>如果出现<code>dispatch_group_leave</code>比<code>dispatch_group_enter</code>多的情况呢？<br>会发生crash。</p><p>这里需要注意的是：</p><ol><li><code>dispatch_group_enter</code>和<code>dispatch_group_leave</code>是成对出现的。<br> 不管执行的顺序如何，必须保证成对出现，否则不会触发<code>dispatch_group_notify</code>。</li><li><code>dispatch_group_notify</code>一般出现在最下边，有<code>dispatch_group_leave</code>就会触发，可以把3的代码放在最上边试一下。</li><li><code>dispatch_group_enter</code>和<code>dispatch_group_leave</code>可以使用<code>dispatch_group_async</code>来代替，减少代码量以及没有成对出现可能带来的问题。</li><li><code>dispatch_group_wait</code>设置超时时间，如果超时了任务还没有执行完成，则会直接触发<code>dispatch_group_notify</code>。</li></ol><p>这些代码可以试一下哈，我们接下来看内部实现原理。</p><h2 id="dispatch-group-create"><a href="#dispatch-group-create" class="headerlink" title="dispatch_group_create"></a>dispatch_group_create</h2><p>首先我们先看一下group的创建。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dispatch_group_t</span><br><span class="line">dispatch_group_create(void)</span><br><span class="line">&#123;</span><br><span class="line">return _dispatch_group_create_with_count(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用了<code>_dispatch_group_create_with_count</code>，参数是一个0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">static inline dispatch_group_t</span><br><span class="line">_dispatch_group_create_with_count(uint32_t n)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 1. 初始化dg，dispatch_group_s是一个结构体</span><br><span class="line">dispatch_group_t dg &#x3D; _dispatch_object_alloc(DISPATCH_VTABLE(group),</span><br><span class="line">sizeof(struct dispatch_group_s));</span><br><span class="line">&#x2F;&#x2F; 赋默认值</span><br><span class="line">dg-&gt;do_next &#x3D; DISPATCH_OBJECT_LISTLESS;</span><br><span class="line">dg-&gt;do_targetq &#x3D; _dispatch_get_default_queue(false);</span><br><span class="line">&#x2F;&#x2F; n &#x3D; 0，所以创建的时候永远不会执行这里。</span><br><span class="line">if (n) &#123;</span><br><span class="line">os_atomic_store2o(dg, dg_bits,</span><br><span class="line">(uint32_t)-n * DISPATCH_GROUP_VALUE_INTERVAL, relaxed);</span><br><span class="line">os_atomic_store2o(dg, do_ref_cnt, 1, relaxed); &#x2F;&#x2F; &lt;rdar:&#x2F;&#x2F;22318411&gt;</span><br><span class="line">&#125;</span><br><span class="line">return dg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建group还是很好理解的，接下来看<code>dispatch_group_enter</code></p><h2 id="dispatch-group-enter"><a href="#dispatch-group-enter" class="headerlink" title="dispatch_group_enter"></a>dispatch_group_enter</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">dispatch_group_enter(dispatch_group_t dg)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F; The value is decremented on a 32bits wide atomic so that the carry</span><br><span class="line">&#x2F;&#x2F; for the 0 -&gt; -1 transition is not propagated to the upper 32bits.</span><br><span class="line">&#x2F;&#x2F; dg-&gt;dg_bits的值从0 变成 -1</span><br><span class="line">uint32_t old_bits &#x3D; os_atomic_sub_orig2o(dg, dg_bits,</span><br><span class="line">DISPATCH_GROUP_VALUE_INTERVAL, acquire);</span><br><span class="line">uint32_t old_value &#x3D; old_bits &amp; DISPATCH_GROUP_VALUE_MASK;</span><br><span class="line">&#x2F;&#x2F; 等于0</span><br><span class="line">if (unlikely(old_value &#x3D;&#x3D; 0)) &#123;</span><br><span class="line">_dispatch_retain(dg); &#x2F;&#x2F; &lt;rdar:&#x2F;&#x2F;problem&#x2F;22318411&gt;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 我们上面执行了多个enter之后，没有发生crash，但是这里也有解释</span><br><span class="line">&#x2F;&#x2F; 超过一个最大值时也会发生crash</span><br><span class="line">if (unlikely(old_value &#x3D;&#x3D; DISPATCH_GROUP_VALUE_MAX)) &#123;</span><br><span class="line">DISPATCH_CLIENT_CRASH(old_bits,</span><br><span class="line">&quot;Too many nested calls to dispatch_group_enter()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>os_atomic_sub_orig2o</code>这个函数跟上面信号量的函数有点类似，并且已经给了注释：dg-&gt;dg_bits的值从0 变成 -1。</p><h2 id="dispatch-group-leave"><a href="#dispatch-group-leave" class="headerlink" title="dispatch_group_leave"></a>dispatch_group_leave</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">dispatch_group_leave(dispatch_group_t dg)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F; The value is incremented on a 64bits wide atomic so that the carry for</span><br><span class="line">&#x2F;&#x2F; the -1 -&gt; 0 transition increments the generation atomically.</span><br><span class="line">&#x2F;&#x2F; dg_state从-1 -&gt; 0 </span><br><span class="line">uint64_t new_state, old_state &#x3D; os_atomic_add_orig2o(dg, dg_state,</span><br><span class="line">DISPATCH_GROUP_VALUE_INTERVAL, release);</span><br><span class="line">uint32_t old_value &#x3D; (uint32_t)(old_state &amp; DISPATCH_GROUP_VALUE_MASK);</span><br><span class="line"></span><br><span class="line">if (unlikely(old_value &#x3D;&#x3D; DISPATCH_GROUP_VALUE_1)) &#123;</span><br><span class="line">old_state +&#x3D; DISPATCH_GROUP_VALUE_INTERVAL;</span><br><span class="line">do &#123;</span><br><span class="line">new_state &#x3D; old_state;</span><br><span class="line">if ((old_state &amp; DISPATCH_GROUP_VALUE_MASK) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">new_state &amp;&#x3D; ~DISPATCH_GROUP_HAS_WAITERS;</span><br><span class="line">new_state &amp;&#x3D; ~DISPATCH_GROUP_HAS_NOTIFS;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">&#x2F;&#x2F; If the group was entered again since the atomic_add above,</span><br><span class="line">&#x2F;&#x2F; we can&#39;t clear the waiters bit anymore as we don&#39;t know for</span><br><span class="line">&#x2F;&#x2F; which generation the waiters are for</span><br><span class="line">new_state &amp;&#x3D; ~DISPATCH_GROUP_HAS_NOTIFS;</span><br><span class="line">&#125;</span><br><span class="line">if (old_state &#x3D;&#x3D; new_state) break;</span><br><span class="line">&#125; while (unlikely(!os_atomic_cmpxchgv2o(dg, dg_state,</span><br><span class="line">old_state, new_state, &amp;old_state, relaxed)));</span><br><span class="line">return _dispatch_group_wake(dg, old_state, true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; old_value</span><br><span class="line">if (unlikely(old_value &#x3D;&#x3D; 0)) &#123;</span><br><span class="line">DISPATCH_CLIENT_CRASH((uintptr_t)old_value,</span><br><span class="line">&quot;Unbalanced call to dispatch_group_leave()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们一步一步的分析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uint64_t new_state, old_state &#x3D; os_atomic_add_orig2o(dg, dg_state,</span><br><span class="line">DISPATCH_GROUP_VALUE_INTERVAL, release);</span><br></pre></td></tr></table></figure><p>这里有注释，写了解释内容，从-1变成了0，所以：<br>old_state = -1, new_state = 0 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uint32_t old_value &#x3D; (uint32_t)(old_state &amp; DISPATCH_GROUP_VALUE_MASK);</span><br><span class="line"></span><br><span class="line">#define DISPATCH_GROUP_VALUE_MASK       0x00000000fffffffcULL</span><br></pre></td></tr></table></figure><p>old_value 是通过&amp;运算得来的， -1 = 0xfffffffff，是一个全是1的二进制数，所以&amp;运算之后old_value = DISPATCH_GROUP_VALUE_MASK。</p><p>如果再执行一次leave操作，那么old_state=0,然后经过&amp;运算，old_value=0，也就是最后会发生crash。所以enter和leave一定要成对出现。</p><p>接下来就到重点了，当enter和leave达到平衡时，就会触发<code>_dispatch_group_wake</code>函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">static void</span><br><span class="line">_dispatch_group_wake(dispatch_group_t dg, uint64_t dg_state, bool needs_release)</span><br><span class="line">&#123;</span><br><span class="line">uint16_t refs &#x3D; needs_release ? 1 : 0; &#x2F;&#x2F; &lt;rdar:&#x2F;&#x2F;problem&#x2F;22318411&gt;</span><br><span class="line">    &#x2F;&#x2F; &amp;运算 </span><br><span class="line">if (dg_state &amp; DISPATCH_GROUP_HAS_NOTIFS) &#123;</span><br><span class="line">dispatch_continuation_t dc, next_dc, tail;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Snapshot before anything is notified&#x2F;woken &lt;rdar:&#x2F;&#x2F;problem&#x2F;8554546&gt;</span><br><span class="line">dc &#x3D; os_mpsc_capture_snapshot(os_mpsc(dg, dg_notify), &amp;tail);</span><br><span class="line">do &#123;</span><br><span class="line">dispatch_queue_t dsn_queue &#x3D; (dispatch_queue_t)dc-&gt;dc_data;</span><br><span class="line">next_dc &#x3D; os_mpsc_pop_snapshot_head(dc, tail, do_next);</span><br><span class="line">&#x2F;&#x2F; 执行这个操作，在第一章中有介绍，执行dx_push操作。直到block执行完成</span><br><span class="line">_dispatch_continuation_async(dsn_queue, dc,</span><br><span class="line">_dispatch_qos_from_pp(dc-&gt;dc_priority), dc-&gt;dc_flags);</span><br><span class="line">_dispatch_release(dsn_queue);</span><br><span class="line">&#125; while ((dc &#x3D; next_dc));</span><br><span class="line"></span><br><span class="line">refs++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (dg_state &amp; DISPATCH_GROUP_HAS_WAITERS) &#123;</span><br><span class="line">_dispatch_wake_by_address(&amp;dg-&gt;dg_gen);</span><br><span class="line">&#125;</span><br><span class="line">   &#x2F;&#x2F; 释放</span><br><span class="line">if (refs) _dispatch_release_n(dg, refs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dispatch-group-notify"><a href="#dispatch-group-notify" class="headerlink" title="dispatch_group_notify"></a>dispatch_group_notify</h2><p>接下来我们看一下<code>dispatch_group_notify</code>操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">dispatch_group_notify(dispatch_group_t dg, dispatch_queue_t dq,</span><br><span class="line">dispatch_block_t db)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_continuation_t dsn &#x3D; _dispatch_continuation_alloc();</span><br><span class="line">_dispatch_continuation_init(dsn, dq, db, 0, DC_FLAG_CONSUME);</span><br><span class="line">_dispatch_group_notify(dg, dq, dsn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_dispatch_continuation_init</code> 内部是对属性赋值，保存dg(group)、dq(queue)、db(block)。在第一章有介绍。</p><p><code>_dispatch_group_notify</code>的函数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">static inline void</span><br><span class="line">_dispatch_group_notify(dispatch_group_t dg, dispatch_queue_t dq,</span><br><span class="line">dispatch_continuation_t dsn)</span><br><span class="line">&#123;</span><br><span class="line">uint64_t old_state, new_state;</span><br><span class="line">dispatch_continuation_t prev;</span><br><span class="line"></span><br><span class="line">dsn-&gt;dc_data &#x3D; dq;</span><br><span class="line">_dispatch_retain(dq);</span><br><span class="line"></span><br><span class="line">prev &#x3D; os_mpsc_push_update_tail(os_mpsc(dg, dg_notify), dsn, do_next);</span><br><span class="line">if (os_mpsc_push_was_empty(prev)) _dispatch_retain(dg);</span><br><span class="line">os_mpsc_push_update_prev(os_mpsc(dg, dg_notify), prev, dsn, do_next);</span><br><span class="line">if (os_mpsc_push_was_empty(prev)) &#123;</span><br><span class="line">os_atomic_rmw_loop2o(dg, dg_state, old_state, new_state, release, &#123;</span><br><span class="line">new_state &#x3D; old_state | DISPATCH_GROUP_HAS_NOTIFS;</span><br><span class="line">&#x2F;&#x2F; 重点哈~</span><br><span class="line">if ((uint32_t)old_state &#x3D;&#x3D; 0) &#123;</span><br><span class="line">os_atomic_rmw_loop_give_up(&#123;</span><br><span class="line">return _dispatch_group_wake(dg, new_state, false);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里会有一系列的判断，当old_value=0的时候，执行wake操作。</p><h2 id="dispatch-group-async"><a href="#dispatch-group-async" class="headerlink" title="dispatch_group_async"></a>dispatch_group_async</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">dispatch_group_async(dispatch_group_t dg, dispatch_queue_t dq,</span><br><span class="line">dispatch_block_t db)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_continuation_t dc &#x3D; _dispatch_continuation_alloc();</span><br><span class="line">uintptr_t dc_flags &#x3D; DC_FLAG_CONSUME | DC_FLAG_GROUP_ASYNC;</span><br><span class="line">dispatch_qos_t qos;</span><br><span class="line">  &#x2F;&#x2F; 任务包装器，存储block等信息</span><br><span class="line">qos &#x3D; _dispatch_continuation_init(dc, dq, db, 0, dc_flags);</span><br><span class="line">&#x2F;&#x2F; 重点_dispatch_continuation_group_async(dg, dq, dc, qos);</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>这里的重点代码是<code>_dispatch_continuation_group_async</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static inline void</span><br><span class="line">_dispatch_continuation_group_async(dispatch_group_t dg, dispatch_queue_t dq,</span><br><span class="line">dispatch_continuation_t dc, dispatch_qos_t qos)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_group_enter(dg);</span><br><span class="line">dc-&gt;dc_data &#x3D; dg;</span><br><span class="line">_dispatch_continuation_async(dq, dc, qos, dc-&gt;dc_flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到了吧，其内部有自动执行<code>dispatch_group_enter</code>操作。但是什么时候执行的leave呢？还记得上一章中介绍<code>_dispatch_continuation_invoke_inline</code>的时候吗？里头有一局代码是关于group的操作，我还专门写了注释。</p><p><code>_dispatch_continuation_async</code>是执行dx_push操作。</p><p><code>_dispatch_continuation_invoke_inline</code>在group的情况会值执行group相关的逻辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">static inline void</span><br><span class="line">_dispatch_continuation_with_group_invoke(dispatch_continuation_t dc)</span><br><span class="line">&#123;</span><br><span class="line">struct dispatch_object_s *dou &#x3D; dc-&gt;dc_data;</span><br><span class="line">unsigned long type &#x3D; dx_type(dou);</span><br><span class="line">if (type &#x3D;&#x3D; DISPATCH_GROUP_TYPE) &#123;</span><br><span class="line">_dispatch_client_callout(dc-&gt;dc_ctxt, dc-&gt;dc_func);</span><br><span class="line">_dispatch_trace_item_complete(dc);</span><br><span class="line">dispatch_group_leave((dispatch_group_t)dou);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">DISPATCH_INTERNAL_CRASH(dx_type(dou), &quot;Unexpected object type&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯哼~这里也会执行<code>dispatch_group_leave</code>操作，这也就是dispatch_group_async可以代替enter和leave的原因。<br>下面的代码可以很好的解释<code>dispatch_group_async</code>的原理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_retain(group);</span><br><span class="line">dispatch_group_enter(group);</span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">block();</span><br><span class="line">dispatch_group_leave(group);</span><br><span class="line">dispatch_release(group);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="dispatch-source"><a href="#dispatch-source" class="headerlink" title="dispatch_source"></a>dispatch_source</h1><p><code>dispatch_source</code>是一个更为底层，直接与内核交互的东西，所以它执行起来会更快，效率更高。所以type类型是time的时候，准确率是最高的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">NSUInteger totalComplete &#x3D; 0</span><br><span class="line">&#x2F;&#x2F; 创建DISPATCH_SOURCE_TYPE_DATA_ADD类型的source，再主线程执行</span><br><span class="line">dispatch_source_t source &#x3D; dispatch_source_create(DISPATCH_SOURCE_TYPE_DATA_ADD, 0, 0, dispatch_get_main_queue());</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置block回调</span><br><span class="line">dispatch_source_set_event_handler(self.source, ^&#123;</span><br><span class="line">    &#x2F;&#x2F; 获取数据</span><br><span class="line">    NSUInteger value &#x3D; dispatch_source_get_data(self.source);</span><br><span class="line">    totalComplete +&#x3D; value;</span><br><span class="line">    NSLog(@&quot;进度: %.2f&quot;, totalComplete&#x2F;100.0);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 开始执行</span><br><span class="line">dispatch_resume(source);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 异步执行for</span><br><span class="line">for (int i&#x3D; 0; i&lt;100; i++) &#123;</span><br><span class="line">    dispatch_async(self.queue, ^&#123;</span><br><span class="line">        sleep(1);</span><br><span class="line">        &#x2F;&#x2F; merge数据，每次+1，每次merge就会触发dispatch_source_set_event_handler</span><br><span class="line">        dispatch_source_merge_data(self.source, 1);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(100 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    &#x2F;&#x2F; 停止</span><br><span class="line">    dispatch_suspend(_source);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面内容就是source相关的。不是很常用，了解一下。</p><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><ol><li>dispatch_semaphore信号量<ol><li><code>dispatch_semaphore_signal</code>与<code>dispatch_semaphore_wait</code>成对出现。</li><li><code>dispatch_semaphore_signal</code>是+1操作</li><li><code>dispatch_semaphore_wait</code>是-1操作</li></ol></li><li>dispatch_group调度组<ol><li>enter和leave是成对出现的，否则可能发生crash</li><li><code>dispatch_group_notify</code>一般放在最下边执行。</li><li><code>dispatch_group_async</code>可以替代enter和leave两个操作。</li><li><code>dispatch_group_wait</code>超时操作。</li></ol></li><li>source，每次执行merge操作就会执行block。</li></ol><p>以上就是GCD的相关内容了，写了3章，有不对的地方欢迎指正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;信号量&quot;&gt;&lt;a href=&quot;#信号量&quot; class=&quot;headerlink&quot; title=&quot;信号量&quot;&gt;&lt;/a&gt;信号量&lt;/h1&gt;&lt;p&gt;先看代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>对称加密</title>
    <link href="http://liujiaboy.github.io/2021/05/14/%E9%80%86%E5%90%91/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    <id>http://liujiaboy.github.io/2021/05/14/%E9%80%86%E5%90%91/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/</id>
    <published>2021-05-14T03:06:56.000Z</published>
    <updated>2021-05-20T03:46:20.527Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h1><p>明文通过密钥加密得到密文。密文通过密钥解密得到明文。</p><p>这类算法再加密和解密时使用相同的密钥，或是使用两个可以简单的互相推算的密钥。与公开密钥加密相比，要求双方获取相同的密钥是对称加密的主要缺点之一。</p><h2 id="DES-数据加密标准"><a href="#DES-数据加密标准" class="headerlink" title="DES - 数据加密标准"></a>DES - 数据加密标准</h2><blockquote><p>数据加密标准（Data Encryption Standard），简称DES。是一种对称密钥加密块密码算法。</p></blockquote><p>DES是一种典型的块密码。一种将明文分成若干个固定长度的小块，再通过一系列的加密生成同样长度的密文的算法。对DES而言，块长度为64位（8个字节）。</p><p>强度不够，现在使用较少。</p><h2 id="3DES-三重数据加密算法"><a href="#3DES-三重数据加密算法" class="headerlink" title="3DES - 三重数据加密算法"></a>3DES - 三重数据加密算法</h2><p>英文名称：Triple Data Encryption Algorithm，缩写为TDEA。也被称为3DES（Triple DES）。是一种对称密钥加密块密码，相当于是对每个数据块应用三次DES算法。</p><p>就是因为DES强度过低容易被暴利破解，3DES则是在DES的基础上演变过来的。采用3个密钥，即通过增加DES密钥长度来避免被暴利破解。</p><h2 id="AES-高级加密标准"><a href="#AES-高级加密标准" class="headerlink" title="AES - 高级加密标准"></a>AES - 高级加密标准</h2><p>AES（Advanced Encryption Standard）是用来代替DES的高级加密算法。AES的区块长度固定为128比特，密钥长度则可以是128，192或256比特。</p><h1 id="分组密码"><a href="#分组密码" class="headerlink" title="分组密码"></a>分组密码</h1><p>分组密码的数学模型是将明文消息编码表示后的数字（简称明文数字）序列，划分成长度为n的组（可看成长度为n的矢量），每组分别在密钥的控制下变换成等长的密文序列。</p><h2 id="ECB模式"><a href="#ECB模式" class="headerlink" title="ECB模式"></a>ECB模式</h2><p>ECB（Electronic Codebook，电码本）模式是分组密码的一种最基本的工作模式。在该模式下，待处理信息被分为大小合适的分组，然后分别对每一分组独立进行加密或解密处理。</p><p><img src="ECB.jpg" alt=""></p><h3 id="ECB的特点"><a href="#ECB的特点" class="headerlink" title="ECB的特点"></a>ECB的特点</h3><ol><li>是分组密码最基本的工作模式，操作简单，易于实现。</li><li>所有分组的加密方式一致，明文中重复内容会在密文中体现。不能很好的隐藏数据。</li></ol><h2 id="CBC模式"><a href="#CBC模式" class="headerlink" title="CBC模式"></a>CBC模式</h2><p>CBC指的是密码分组链接。</p><p>在CBC模式中，每个明文块先与前一个密文块进行异或后，再进行加密。在这种方法中，每个密文块都依赖于它前面的所有明文块。同时，为了保证每条消息的唯一性，在第一个块中需要使用初始化向量。</p><p><img src="CBC.jpg" alt=""></p><h3 id="CBC的特点"><a href="#CBC的特点" class="headerlink" title="CBC的特点"></a>CBC的特点</h3><ol><li>CBC是最常用的工作模式</li><li>CBC加密依赖分组的上下文，加密过程是串行的，无法并行化。</li><li>明文中微小的变动，会影响后续所有的密文块多改变。</li><li>其中一个分组丢失（错误），后续所有的都将作废</li></ol><p>CBC可以有效的保证密文的完整性，如果一个分组数据块丢失或改变，后续的数据都将无法正常解密。</p><h2 id="IV-初始化向量"><a href="#IV-初始化向量" class="headerlink" title="IV 初始化向量"></a>IV 初始化向量</h2><p>初始化向量（IV，Initialization Vector）是许多任务作模式中用于将加密随机化的一个位块，由此即使同样的明文被多次加密也会产生不同的密文，避免了较慢的重新产生密钥的过程。</p><p>在CBC模式下，同一密钥的情况下重用IV会导致泄露明文首个块的信息。</p><h1 id="终端命令"><a href="#终端命令" class="headerlink" title="终端命令"></a>终端命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> *  终端测试指令</span><br><span class="line"> *</span><br><span class="line"> *  DES(ECB)加密，key是必须的，</span><br><span class="line"> *  $ echo -n hello | openssl enc -des-ecb -K &#39;abc&#39; -nosalt | base64</span><br><span class="line"> *</span><br><span class="line"> *  DES(ECB)解密</span><br><span class="line"> *  $ echo -n P8TeEbkBDds&#x3D; | base64 -D | openssl enc -des-ecb -K &#39;abc&#39; -nosalt -d</span><br><span class="line"> *  DES(CBC)加密</span><br><span class="line"> *  $ echo -n hello | openssl enc -des-cbc -iv 12345678 -K &#39;abc&#39; -nosalt | base64</span><br><span class="line"> *  </span><br><span class="line"> *  DES(CBC)解密</span><br><span class="line"> *  $ echo -n fGkwzGbNomY&#x3D; | base64 -D | openssl enc -des-cbc -iv 12345678 -K &#39;abc&#39; -nosalt -d</span><br><span class="line"> *</span><br><span class="line"> *  ----------------------</span><br><span class="line"> * </span><br><span class="line"> *  AES(ECB)加密 密钥长度128，192或256比特</span><br><span class="line"> *  $ echo -n hello | openssl enc -aes-128-ecb -K &#39;abc&#39; -nosalt | base64</span><br><span class="line"> *</span><br><span class="line"> *  AES(ECB)解密</span><br><span class="line"> *  $ echo -n p+nWPDBu7iGX0ZXgw3jAXw&#x3D;&#x3D; | base64 -D | openssl enc -aes-128-ecb -K &#39;abc&#39; -nosalt -d</span><br><span class="line"> *  </span><br><span class="line"> *  AES(CBC)加密</span><br><span class="line"> *  $ echo -n hello | openssl enc -aes-128-cbc -iv 12345678 -K &#39;abc&#39; -nosalt | base64</span><br><span class="line"> *</span><br><span class="line"> *  AES(CBC)解密</span><br><span class="line"> *  $ echo -n jK4VTW&#x2F;k7P8PsmW16ztlCw&#x3D;&#x3D; | base64 -D | openssl enc -aes-128-cbc -iv 12345678 -K &#39;abc&#39; -nosalt -d</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><p>加密过程是先加密，然后再base64编码。<br>解密过程是先base64解码。然后再解密。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%8A%A0%E5%AF%86%E6%A8%99%E6%BA%96" target="_blank" rel="noopener">DES-数据加密标准</a><br><a href="https://zh.wikipedia.org/wiki/3DES" target="_blank" rel="noopener">3DES</a><br><a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86" target="_blank" rel="noopener">AES - 高级加密标准</a><br><a href="https://zh.wikipedia.org/wiki/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">分组密码工作模式-ECB、CBC等</a><br><a href="https://baike.baidu.com/item/ECB%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">ECB模式-百度百科</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对称加密&quot;&gt;&lt;a href=&quot;#对称加密&quot; class=&quot;headerlink&quot; title=&quot;对称加密&quot;&gt;&lt;/a&gt;对称加密&lt;/h1&gt;&lt;p&gt;明文通过密钥加密得到密文。密文通过密钥解密得到明文。&lt;/p&gt;
&lt;p&gt;这类算法再加密和解密时使用相同的密钥，或是使用两个可以简
      
    
    </summary>
    
    
      <category term="逆向" scheme="http://liujiaboy.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="对称加密" scheme="http://liujiaboy.github.io/tags/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>GCD底层原理-2</title>
    <link href="http://liujiaboy.github.io/2021/05/12/OC%E5%8E%9F%E7%90%86/GCD-2/"/>
    <id>http://liujiaboy.github.io/2021/05/12/OC%E5%8E%9F%E7%90%86/GCD-2/</id>
    <published>2021-05-12T13:32:39.000Z</published>
    <updated>2021-05-17T02:21:40.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dispatch-async异步函数的调用"><a href="#dispatch-async异步函数的调用" class="headerlink" title="dispatch_async异步函数的调用"></a>dispatch_async异步函数的调用</h1><p>我们继续上一章的内容继续研究一下block的调用，在<code>NSlog</code>这里打一个断点，看看调用的函数栈。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dispatch_async(conque, ^&#123;</span><br><span class="line">    NSLog(@&quot;12334&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们运行代码，通过bt命令看一下调用栈：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(lldb) bt</span><br><span class="line">* thread #8, queue &#x3D; &#39;conque&#39;, stop reason &#x3D; breakpoint 2.1</span><br><span class="line">  * frame #0: 0x0000000103abd0d7 __29-[ViewController viewDidLoad]_block_invoke(.block_descriptor&#x3D;0x0000000103ac00e8) at ViewController.m:48:9</span><br><span class="line">    frame #1: 0x0000000103d2e7ec libdispatch.dylib&#96;_dispatch_call_block_and_release + 12</span><br><span class="line">    frame #2: 0x0000000103d2f9c8 libdispatch.dylib&#96;_dispatch_client_callout + 8</span><br><span class="line">    frame #3: 0x0000000103d32316 libdispatch.dylib&#96;_dispatch_continuation_pop + 557</span><br><span class="line">    frame #4: 0x0000000103d3171c libdispatch.dylib&#96;_dispatch_async_redirect_invoke + 779</span><br><span class="line">    frame #5: 0x0000000103d41508 libdispatch.dylib&#96;_dispatch_root_queue_drain + 351</span><br><span class="line">    frame #6: 0x0000000103d41e6d libdispatch.dylib&#96;_dispatch_worker_thread2 + 135</span><br><span class="line">    frame #7: 0x00007fff60c8e453 libsystem_pthread.dylib&#96;_pthread_wqthread + 244</span><br><span class="line">    frame #8: 0x00007fff60c8d467 libsystem_pthread.dylib&#96;start_wqthread + 15</span><br></pre></td></tr></table></figure><p>从下往上看哈~函数的调用竟然是通过与pthread交互之后发生的。然后到了<code>_dispatch_worker_thread2</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">static void</span><br><span class="line">_dispatch_worker_thread2(pthread_priority_t pp)</span><br><span class="line">&#123;</span><br><span class="line">bool overcommit &#x3D; pp &amp; _PTHREAD_PRIORITY_OVERCOMMIT_FLAG;</span><br><span class="line">dispatch_queue_global_t dq;</span><br><span class="line"></span><br><span class="line">pp &amp;&#x3D; _PTHREAD_PRIORITY_OVERCOMMIT_FLAG | ~_PTHREAD_PRIORITY_FLAGS_MASK;</span><br><span class="line">_dispatch_thread_setspecific(dispatch_priority_key, (void *)(uintptr_t)pp);</span><br><span class="line">dq &#x3D; _dispatch_get_root_queue(_dispatch_qos_from_pp(pp), overcommit);</span><br><span class="line"></span><br><span class="line">_dispatch_introspection_thread_add();</span><br><span class="line">_dispatch_trace_runtime_event(worker_unpark, dq, 0);</span><br><span class="line"></span><br><span class="line">int pending &#x3D; os_atomic_dec2o(dq, dgq_pending, relaxed);</span><br><span class="line">dispatch_assert(pending &gt;&#x3D; 0);</span><br><span class="line">_dispatch_root_queue_drain(dq, dq-&gt;dq_priority,</span><br><span class="line">DISPATCH_INVOKE_WORKER_DRAIN | DISPATCH_INVOKE_REDIRECTING_DRAIN);</span><br><span class="line">_dispatch_voucher_debug(&quot;root queue clear&quot;, NULL);</span><br><span class="line">_dispatch_reset_voucher(NULL, DISPATCH_THREAD_PARK);</span><br><span class="line">_dispatch_trace_runtime_event(worker_park, NULL, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据函数调用栈，来到<code>_dispatch_root_queue_drain</code>这个函数。函数内容做了删减。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">static void</span><br><span class="line">_dispatch_root_queue_drain(dispatch_queue_global_t dq,</span><br><span class="line">dispatch_priority_t pri, dispatch_invoke_flags_t flags)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">  &#x2F;&#x2F; 设置当前queue</span><br><span class="line">_dispatch_queue_set_current(dq);</span><br><span class="line">_dispatch_init_basepri(pri);</span><br><span class="line">_dispatch_adopt_wlh_anon();</span><br><span class="line"></span><br><span class="line">struct dispatch_object_s *item;</span><br><span class="line">bool reset &#x3D; false;</span><br><span class="line">dispatch_invoke_context_s dic &#x3D; &#123; &#125;;</span><br><span class="line">#if DISPATCH_COCOA_COMPAT</span><br><span class="line">_dispatch_last_resort_autorelease_pool_push(&amp;dic);</span><br><span class="line">#endif &#x2F;&#x2F; DISPATCH_COCOA_COMPAT</span><br><span class="line">_dispatch_queue_drain_init_narrowing_check_deadline(&amp;dic, pri);</span><br><span class="line">_dispatch_perfmon_start();</span><br><span class="line">while (likely(item &#x3D; _dispatch_root_queue_drain_one(dq))) &#123;</span><br><span class="line">if (reset) _dispatch_wqthread_override_reset();</span><br><span class="line">&#x2F;&#x2F; 函数重点</span><br><span class="line">_dispatch_continuation_pop_inline(item, &amp;dic, flags, dq);</span><br><span class="line">reset &#x3D; _dispatch_reset_basepri_override();</span><br><span class="line">if (unlikely(_dispatch_queue_drain_should_narrow(&amp;dic))) &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">_dispatch_reset_wlh();</span><br><span class="line">_dispatch_clear_basepri();</span><br><span class="line">&#x2F;&#x2F; 设置当前queue为NULL</span><br><span class="line">_dispatch_queue_set_current(NULL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数内一开始需要将当前队列调回来，然后执行block中的内容，完成之后，在把对列置空。block内部怎么调用，就在<code>_dispatch_continuation_pop_inline</code>里头。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">static inline void</span><br><span class="line">_dispatch_continuation_pop_inline(dispatch_object_t dou,</span><br><span class="line">dispatch_invoke_context_t dic, dispatch_invoke_flags_t flags,</span><br><span class="line">dispatch_queue_class_t dqu)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_pthread_root_queue_observer_hooks_t observer_hooks &#x3D;</span><br><span class="line">_dispatch_get_pthread_root_queue_observer_hooks();</span><br><span class="line">if (observer_hooks) observer_hooks-&gt;queue_will_execute(dqu._dq);</span><br><span class="line">flags &amp;&#x3D; _DISPATCH_INVOKE_PROPAGATE_MASK;</span><br><span class="line">if (_dispatch_object_has_vtable(dou)) &#123;</span><br><span class="line">dx_invoke(dou._dq, dic, flags);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">_dispatch_continuation_invoke_inline(dou, flags, dqu);</span><br><span class="line">&#125;</span><br><span class="line">if (observer_hooks) observer_hooks-&gt;queue_did_execute(dqu._dq);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们猜测有可能执行的是<code>_dispatch_continuation_invoke_inline</code>，因为其他的看着也不咋像那回事。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">static inline void</span><br><span class="line">_dispatch_continuation_invoke_inline(dispatch_object_t dou,</span><br><span class="line">dispatch_invoke_flags_t flags, dispatch_queue_class_t dqu)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_continuation_t dc &#x3D; dou._dc, dc1;</span><br><span class="line">dispatch_invoke_with_autoreleasepool(flags, &#123;</span><br><span class="line">uintptr_t dc_flags &#x3D; dc-&gt;dc_flags;</span><br><span class="line">_dispatch_continuation_voucher_adopt(dc, dc_flags);</span><br><span class="line">if (!(dc_flags &amp; DC_FLAG_NO_INTROSPECTION)) &#123;</span><br><span class="line">_dispatch_trace_item_pop(dqu, dou);</span><br><span class="line">&#125;</span><br><span class="line">if (dc_flags &amp; DC_FLAG_CONSUME) &#123;</span><br><span class="line">dc1 &#x3D; _dispatch_continuation_free_cacheonly(dc);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">dc1 &#x3D; NULL;</span><br><span class="line">&#125;</span><br><span class="line">if (unlikely(dc_flags &amp; DC_FLAG_GROUP_ASYNC)) &#123;</span><br><span class="line">  &#x2F;&#x2F; 这个可能跟group有关</span><br><span class="line">_dispatch_continuation_with_group_invoke(dc);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  &#x2F;&#x2F; 应该会执行这个</span><br><span class="line">_dispatch_client_callout(dc-&gt;dc_ctxt, dc-&gt;dc_func);</span><br><span class="line">_dispatch_trace_item_complete(dc);</span><br><span class="line">&#125;</span><br><span class="line">if (unlikely(dc1)) &#123;</span><br><span class="line">_dispatch_continuation_free_to_cache_limit(dc1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">_dispatch_perfmon_workitem_inc();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dispatch_invoke_with_autoreleasepool</code>这里有一个<code>autoreleasepool</code>，源码内部对自动释放池的操作还是很严谨的。</p><p>这里先看看<code>_dispatch_client_callout</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">_dispatch_client_callout(void *ctxt, dispatch_function_t f)</span><br><span class="line">&#123;</span><br><span class="line">_dispatch_get_tsd_base();</span><br><span class="line">void *u &#x3D; _dispatch_get_unwind_tsd();</span><br><span class="line">&#x2F;&#x2F; 执行这里</span><br><span class="line">if (likely(!u)) return f(ctxt);</span><br><span class="line">_dispatch_set_unwind_tsd(NULL);</span><br><span class="line">f(ctxt);</span><br><span class="line">_dispatch_free_unwind_tsd();</span><br><span class="line">_dispatch_set_unwind_tsd(u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到了木有啊，f还记得是啥吗？回到上一章的这个<code>_dispatch_continuation_init</code>的函数中，有解释哦，f就等于<code>_dispatch_call_block_and_release</code>。</p><p>我们再回过头看看打印的函数调用栈，最后执行的不就是<code>_dispatch_call_block_and_release</code>吗？前面的dispatch_asyn内部实现对block进行保存，这里进行调用。</p><p>到此为止整个异步函数的调用就结束了。</p><p>结合上一章的<code>dispatch_async</code>的内容，我们可以通过汇编添加<code>symbolic breakpoint</code>进行判断，我们所分析的函数执行步奏是否正确，在不知道执行流程的情况下，添加断点可以让我们比较清楚的知道其内部是怎么执行的。这里就不去操作了哈~</p><h1 id="dispatch-once"><a href="#dispatch-once" class="headerlink" title="dispatch_once"></a>dispatch_once</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static dispatch_once_t onceToken;</span><br><span class="line">dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">    NSLog(@&quot;once ...&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们使用dispatch_once都是这么写，经常用于创建单利或者只执行一次的代码。接下来看看其内部实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#define dispatch_once _dispatch_once</span><br><span class="line"></span><br><span class="line">void</span><br><span class="line">_dispatch_once(dispatch_once_t *predicate,</span><br><span class="line">DISPATCH_NOESCAPE dispatch_block_t block)</span><br><span class="line">&#123;</span><br><span class="line">if (DISPATCH_EXPECT(*predicate, ~0l) !&#x3D; ~0l) &#123;</span><br><span class="line">  &#x2F;&#x2F; 调用这个</span><br><span class="line">    dispatch_once(predicate, block);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">   &#x2F;&#x2F; 栅栏函数</span><br><span class="line">   dispatch_compiler_barrier();</span><br><span class="line">&#125;</span><br><span class="line">DISPATCH_COMPILER_CAN_ASSUME(*predicate &#x3D;&#x3D; ~0l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个函数内部会通过条件判断执行栅栏函数还是，调用dispatch_once;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@param val</span><br><span class="line">A pointer to a dispatch_once_t that is used to test whether the block has completed or not.</span><br><span class="line"></span><br><span class="line">@param block</span><br><span class="line">The block to execute once.</span><br><span class="line"></span><br><span class="line">void</span><br><span class="line">dispatch_once(dispatch_once_t *val, dispatch_block_t block)</span><br><span class="line">&#123;</span><br><span class="line">    dispatch_once_f(val, block, _dispatch_Block_invoke(block));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有两个相关参数的介绍，</p><ol><li>val：是一个指针，用来判断block执行完成与否。</li><li>block：只执行一次的block块</li></ol><p>之后就到了<code>dispatch_once_f</code>方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">dispatch_once_f(dispatch_once_t *val, void *ctxt, dispatch_function_t func)</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; 1. dispatch_once_gate_t结构体</span><br><span class="line">  dispatch_once_gate_t l &#x3D; (dispatch_once_gate_t)val;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.真机的情况下，是arm64，DISPATCH_ONCE_INLINE_FASTPATH &#x3D; 0，</span><br><span class="line">&#x2F;&#x2F; DISPATCH_ONCE_USE_QUIESCENT_COUNTER &#x3D; 0</span><br><span class="line">#if !DISPATCH_ONCE_INLINE_FASTPATH || DISPATCH_ONCE_USE_QUIESCENT_COUNTER</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; 3. 所以执行这里，进行原子类型的加载，就是判断是否执行过</span><br><span class="line">uintptr_t v &#x3D; os_atomic_load(&amp;l-&gt;dgo_once, acquire);</span><br><span class="line">if (likely(v &#x3D;&#x3D; DLOCK_ONCE_DONE)) &#123;</span><br><span class="line">   return;    </span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 4. 不会执行</span><br><span class="line">#if DISPATCH_ONCE_USE_QUIESCENT_COUNTER</span><br><span class="line">if (likely(DISPATCH_ONCE_IS_GEN(v))) &#123;</span><br><span class="line">return _dispatch_once_mark_done_if_quiesced(l, v);</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br><span class="line">#endif</span><br><span class="line">  &#x2F;&#x2F; 5. 条件判断是否执行，</span><br><span class="line">if (_dispatch_once_gate_tryenter(l)) &#123;</span><br><span class="line">   &#x2F;&#x2F; 6.</span><br><span class="line">return _dispatch_once_callout(l, ctxt, func);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 7. 等待</span><br><span class="line">return _dispatch_once_wait(l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们分析一下这个代码：</p><ol><li><p><code>dispatch_once_gate_t</code>是一个结构体，内部有两个变量<code>dispatch_gate_s dgo_gate</code>是一个锁，<code>uintptr_t dgo_once</code>是否执行过。</p></li><li><p>arm64判断。</p></li><li><p>原子类型的加载，判断当前block块是否执行过，已经执行则return。</p></li><li><p>arm64下DISPATCH_ONCE_USE_QUIESCENT_COUNTER=0</p></li><li><p>条件判断，是否执行过，其内部实现如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static inline bool</span><br><span class="line">_dispatch_once_gate_tryenter(dispatch_once_gate_t l)</span><br><span class="line">&#123;</span><br><span class="line">return os_atomic_cmpxchg(&amp;l-&gt;dgo_once, DLOCK_ONCE_UNLOCKED,</span><br><span class="line">(uintptr_t)_dispatch_lock_value_for_self(), relaxed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 通过<code>os_atomic_cmpxchg</code>函数比较，在这个锁<code>_dispatch_lock_value_for_self</code>下判断<code>&amp;l-&gt;dgo_once, DLOCK_ONCE_UNLOCKED</code>是否相同。不相同执行6.<code>_dispatch_once_callout</code>，否则执行7.</p></li><li><p><code>_dispatch_once_callout</code>这个函数内部调用的是<code>_dispatch_client_callout</code>之前已经讲过，就是执行block的内容。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">static void</span><br><span class="line">_dispatch_once_callout(dispatch_once_gate_t l, void *ctxt,</span><br><span class="line">dispatch_function_t func)</span><br><span class="line">&#123;</span><br><span class="line"> &#x2F;&#x2F; 执行block</span><br><span class="line">_dispatch_client_callout(ctxt, func);</span><br><span class="line">&#x2F;&#x2F; &amp;l-&gt;dgo_once赋值，标记已执行</span><br><span class="line">_dispatch_once_gate_broadcast(l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 接下来看一下是如何标记的：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">static inline void</span><br><span class="line">_dispatch_once_gate_broadcast(dispatch_once_gate_t l)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F; 首先获取self的一个锁</span><br><span class="line">dispatch_lock value_self &#x3D; _dispatch_lock_value_for_self();</span><br><span class="line">uintptr_t v;</span><br><span class="line">&#x2F;&#x2F; arm64下不会执行这个</span><br><span class="line">#if DISPATCH_ONCE_USE_QUIESCENT_COUNTER</span><br><span class="line">v &#x3D; _dispatch_once_mark_quiescing(l);</span><br><span class="line">#else</span><br><span class="line">&#x2F;&#x2F; 执行这里</span><br><span class="line">v &#x3D; _dispatch_once_mark_done(l);</span><br><span class="line">#endif</span><br><span class="line">&#x2F;&#x2F; 判断锁是不是自己，是就return</span><br><span class="line">if (likely((dispatch_lock)v &#x3D;&#x3D; value_self)) return;</span><br><span class="line">_dispatch_gate_broadcast_slow(&amp;l-&gt;dgo_gate, (dispatch_lock)v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 我们在看一下<code>_dispatch_once_mark_done</code>内部实现：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static inline uintptr_t</span><br><span class="line">_dispatch_once_mark_done(dispatch_once_gate_t dgo)</span><br><span class="line">&#123;</span><br><span class="line">return os_atomic_xchg(&amp;dgo-&gt;dgo_once, DLOCK_ONCE_DONE, release);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 用这个函数<code>os_atomic_xchg</code>去改变<code>dgo_once</code>的值。</p></li><li><p><code>_dispatch_once_wait</code>函数内部是一个<code>for (;;)</code>的死循环，会一直等待<code>dispatch_once</code>的执行，执行完成之后<code>os_atomic_rmw_loop_give_up(return)</code>，不在阻塞线程。</p></li></ol><p>这就是<code>dispatch_once</code>的整个流程。使用了一个<code>dgo_once</code>变量来标记是否执行过:</p><ol><li>没有执行则去执行block，并标记<code>dgo_once</code></li><li>执行过，直接返回</li><li>正在执行，则等待block执行完成。</li></ol><h1 id="栅栏函数"><a href="#栅栏函数" class="headerlink" title="栅栏函数"></a>栅栏函数</h1><p>先看栅栏函数的代码演示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- (void)barrierDemo &#123;</span><br><span class="line">    &#x2F;&#x2F; 创建一个并发队列</span><br><span class="line">    dispatch_queue_t concurrentQueue &#x3D; dispatch_queue_create(&quot;concurrent&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F;    dispatch_queue_t concurrentQueue &#x3D; dispatch_get_global_queue(0, 0);</span><br><span class="line">    </span><br><span class="line">    &#x2F;* 1. 异步函数 *&#x2F;</span><br><span class="line">    dispatch_async(concurrentQueue, ^&#123;</span><br><span class="line">        NSLog(@&quot;1&quot;);</span><br><span class="line">        &#x2F;&#x2F;sleep(3); &#x2F;&#x2F; ①</span><br><span class="line">    &#125;);</span><br><span class="line">    &#x2F;* 2. 栅栏函数 *&#x2F; &#x2F;&#x2F; - ②dispatch_barrier_sync</span><br><span class="line">    dispatch_barrier_async(concurrentQueue, ^&#123;</span><br><span class="line">        NSLog(@&quot;2--%@--&quot;,[NSThread currentThread]);</span><br><span class="line">    &#125;);</span><br><span class="line">    &#x2F;* 3. 异步函数 *&#x2F;</span><br><span class="line">    dispatch_async(concurrentQueue, ^&#123;</span><br><span class="line">        NSLog(@&quot;3&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    NSLog(@&quot;4&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>看一下这个的打印顺序，<code>4-1-2-3</code>也有可能<code>1-4-2-3</code>，打算肯定是先2之后才3。</li><li>这时候把①的代码放开，执行sleep，看看打印顺序。<code>4-1-2-3</code>。2在1之后3s才打印</li><li>把②的代码进行替换，异步的栅栏函数，换成同步函数，看一下执行顺序：<code>1-2-4-3</code>。</li></ol><p>所以栅栏函数是拦截队列用的，会等待栅栏函数之前的任务执行完成。</p><ol><li>如果把创建的队列换成全局并发队列，会怎么样？可以试一下，这里会发生crash。因为全局队列是系统生成的，系统可能在别的地方也有调用，使用栅栏函数相当于拦截了系统函数，会出现不可控的问题。</li><li>如果是同步函数呢？同步函数本身就是按照队列中任务添加的顺序执行的。如果再加上栅栏函数，完全没有意义，反而会更耗性能。</li></ol><p>所以：栅栏函数只能用于自定义的并发队列。</p><h1 id="同步函数-dispatch-sync"><a href="#同步函数-dispatch-sync" class="headerlink" title="同步函数 dispatch_sync"></a>同步函数 dispatch_sync</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">dispatch_sync(dispatch_queue_t dq, dispatch_block_t work)</span><br><span class="line">&#123;</span><br><span class="line">uintptr_t dc_flags &#x3D; DC_FLAG_BLOCK;</span><br><span class="line">if (unlikely(_dispatch_block_has_private_data(work))) &#123;</span><br><span class="line">   &#x2F;&#x2F; 对私有数据的处理，最后还是会回到_dispatch_sync_f函数</span><br><span class="line">return _dispatch_sync_block_with_privdata(dq, work, dc_flags);</span><br><span class="line">&#125;</span><br><span class="line">_dispatch_sync_f(dq, work, _dispatch_Block_invoke(work), dc_flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个的重点就是<code>_dispatch_sync_f</code>函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static void</span><br><span class="line">_dispatch_sync_f(dispatch_queue_t dq, void *ctxt, dispatch_function_t func,</span><br><span class="line">uintptr_t dc_flags)</span><br><span class="line">&#123;</span><br><span class="line">_dispatch_sync_f_inline(dq, ctxt, func, dc_flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部没有做任何处理，只是调用了<code>_dispatch_sync_f_inline</code>函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">static inline void</span><br><span class="line">_dispatch_sync_f_inline(dispatch_queue_t dq, void *ctxt,</span><br><span class="line">dispatch_function_t func, uintptr_t dc_flags)</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; 串行队列的宽度等于1，</span><br><span class="line">if (likely(dq-&gt;dq_width &#x3D;&#x3D; 1)) &#123;</span><br><span class="line">   &#x2F;&#x2F; 所以就会执行这里。直接return</span><br><span class="line">return _dispatch_barrier_sync_f(dq, ctxt, func, dc_flags);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (unlikely(dx_metatype(dq) !&#x3D; _DISPATCH_LANE_TYPE)) &#123;</span><br><span class="line">DISPATCH_CLIENT_CRASH(0, &quot;Queue type doesn&#39;t support dispatch_sync&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch_lane_t dl &#x3D; upcast(dq)._dl;</span><br><span class="line">&#x2F;&#x2F; Global concurrent queues and queues bound to non-dispatch threads</span><br><span class="line">&#x2F;&#x2F; always fall into the slow case, see DISPATCH_ROOT_QUEUE_STATE_INIT_VALUE</span><br><span class="line">if (unlikely(!_dispatch_queue_try_reserve_sync_width(dl))) &#123;</span><br><span class="line">   &#x2F;&#x2F; 发生死锁的原因。</span><br><span class="line">return _dispatch_sync_f_slow(dl, ctxt, func, 0, dl, dc_flags);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (unlikely(dq-&gt;do_targetq-&gt;do_targetq)) &#123;</span><br><span class="line">return _dispatch_sync_recurse(dl, ctxt, func, dc_flags);</span><br><span class="line">&#125;</span><br><span class="line">_dispatch_introspection_sync_begin(dl);</span><br><span class="line">_dispatch_sync_invoke_and_complete(dl, ctxt, func DISPATCH_TRACE_ARG(</span><br><span class="line">_dispatch_trace_item_sync_push_pop(dq, ctxt, func, dc_flags)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这个<code>_dispatch_barrier_sync_f</code>函数，是不是感觉很眼熟，跟上面说的栅栏函数一样啊，我们接着看一下栅栏函数的内部实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">dispatch_barrier_sync(dispatch_queue_t dq, dispatch_block_t work)</span><br><span class="line">&#123;</span><br><span class="line">uintptr_t dc_flags &#x3D; DC_FLAG_BARRIER | DC_FLAG_BLOCK;</span><br><span class="line">if (unlikely(_dispatch_block_has_private_data(work))) &#123;</span><br><span class="line">return _dispatch_sync_block_with_privdata(dq, work, dc_flags);</span><br><span class="line">&#125;</span><br><span class="line">_dispatch_barrier_sync_f(dq, work, _dispatch_Block_invoke(work), dc_flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还真的是一模一样啊，同步函数内部竟然是一个同步栅栏函数。</p><p>我们再一步步的探索，<code>_dispatch_barrier_sync_f</code>内部调用的是<code>_dispatch_barrier_sync_f_inline</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">static inline void</span><br><span class="line">_dispatch_barrier_sync_f_inline(dispatch_queue_t dq, void *ctxt,</span><br><span class="line">dispatch_function_t func, uintptr_t dc_flags)</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; tid是一个mach_port类型，获取当前的mach_port，一般情况下，mach_port是和线程同时存在的，用来保活。</span><br><span class="line">dispatch_tid tid &#x3D; _dispatch_tid_self();</span><br><span class="line"></span><br><span class="line">if (unlikely(dx_metatype(dq) !&#x3D; _DISPATCH_LANE_TYPE)) &#123;</span><br><span class="line">DISPATCH_CLIENT_CRASH(0, &quot;Queue type doesn&#39;t support dispatch_sync&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch_lane_t dl &#x3D; upcast(dq)._dl;</span><br><span class="line">if (unlikely(!_dispatch_queue_try_acquire_barrier_sync(dl, tid))) &#123;</span><br><span class="line">   &#x2F;&#x2F; 这里也会发生死锁</span><br><span class="line">return _dispatch_sync_f_slow(dl, ctxt, func, DC_FLAG_BARRIER, dl,</span><br><span class="line">DC_FLAG_BARRIER | dc_flags);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (unlikely(dl-&gt;do_targetq-&gt;do_targetq)) &#123;</span><br><span class="line">return _dispatch_sync_recurse(dl, ctxt, func,</span><br><span class="line">DC_FLAG_BARRIER | dc_flags);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 对列内部进行排序</span><br><span class="line">_dispatch_introspection_sync_begin(dl);</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">_dispatch_lane_barrier_sync_invoke_and_complete(dl, ctxt, func</span><br><span class="line">DISPATCH_TRACE_ARG(_dispatch_trace_item_sync_push_pop(</span><br><span class="line">dq, ctxt, func, dc_flags | DC_FLAG_BARRIER)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着就到了block调用和调用完成的函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">static void</span><br><span class="line">_dispatch_lane_barrier_sync_invoke_and_complete(dispatch_lane_t dq,</span><br><span class="line">void *ctxt, dispatch_function_t func DISPATCH_TRACE_ARG(void *dc))</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; 这里执行block的内容，</span><br><span class="line">_dispatch_sync_function_invoke_inline(dq, ctxt, func);</span><br><span class="line">_dispatch_trace_item_complete(dc);</span><br><span class="line">if (unlikely(dq-&gt;dq_items_tail || dq-&gt;dq_width &gt; 1)) &#123;</span><br><span class="line">return _dispatch_lane_barrier_complete(dq, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; block执行完成之后，对当前线程操作，因为同步操作会占用当前线程</span><br><span class="line">&#x2F;&#x2F; 执行完之后，需要后续的任务继续执行。</span><br><span class="line">const uint64_t fail_unlock_mask &#x3D; DISPATCH_QUEUE_SUSPEND_BITS_MASK |</span><br><span class="line">DISPATCH_QUEUE_ENQUEUED | DISPATCH_QUEUE_DIRTY |</span><br><span class="line">DISPATCH_QUEUE_RECEIVED_OVERRIDE |</span><br><span class="line">DISPATCH_QUEUE_RECEIVED_SYNC_WAIT;</span><br><span class="line">uint64_t old_state, new_state;</span><br><span class="line">dispatch_wakeup_flags_t flags &#x3D; 0;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; loop寻找当前线程，根据线程的状态释放当前任务的堵塞。不在阻塞当前线程</span><br><span class="line">os_atomic_rmw_loop2o(dq, dq_state, old_state, new_state, release, &#123;</span><br><span class="line">new_state  &#x3D; old_state - DISPATCH_QUEUE_SERIAL_DRAIN_OWNED;</span><br><span class="line">new_state &amp;&#x3D; ~DISPATCH_QUEUE_DRAIN_UNLOCK_MASK;</span><br><span class="line">new_state &amp;&#x3D; ~DISPATCH_QUEUE_MAX_QOS_MASK;</span><br><span class="line">if (unlikely(old_state &amp; fail_unlock_mask)) &#123;</span><br><span class="line">os_atomic_rmw_loop_give_up(&#123;</span><br><span class="line">return _dispatch_lane_barrier_complete(dq, 0, flags);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">if (_dq_state_is_base_wlh(old_state)) &#123;</span><br><span class="line">_dispatch_event_loop_assert_not_owned((dispatch_wlh_t)dq);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先看一下<code>_dispatch_sync_function_invoke_inline</code>函数的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">static inline void</span><br><span class="line">_dispatch_sync_function_invoke_inline(dispatch_queue_class_t dq, void *ctxt,</span><br><span class="line">dispatch_function_t func)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_thread_frame_s dtf;</span><br><span class="line">_dispatch_thread_frame_push(&amp;dtf, dq);</span><br><span class="line">_dispatch_client_callout(ctxt, func);</span><br><span class="line">_dispatch_perfmon_workitem_inc();</span><br><span class="line">_dispatch_thread_frame_pop(&amp;dtf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其主要目的是把当前任务添加（push）到线程中，然后执行<code>_dispatch_client_callout</code>(这个就不细说了)，执行完成之后pop出去。</p><p>这个就是同步函数为啥会阻塞当前线程的内部原理。接下来我们再看看死锁。</p><h2 id="同步死锁"><a href="#同步死锁" class="headerlink" title="同步死锁"></a>同步死锁</h2><p>我们再回到<code>_dispatch_sync_f_inline</code>函数，看看发生死锁的原因<code>_dispatch_sync_f_slow</code>。在同步函数内部和栅栏函数内部都会发生死锁。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">static void</span><br><span class="line">_dispatch_sync_f_slow(dispatch_queue_class_t top_dqu, void *ctxt,</span><br><span class="line">dispatch_function_t func, uintptr_t top_dc_flags,</span><br><span class="line">dispatch_queue_class_t dqu, uintptr_t dc_flags)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_queue_t top_dq &#x3D; top_dqu._dq;</span><br><span class="line">dispatch_queue_t dq &#x3D; dqu._dq;</span><br><span class="line">if (unlikely(!dq-&gt;do_targetq)) &#123;</span><br><span class="line">   &#x2F;&#x2F; 没有找到target执行invoke</span><br><span class="line">return _dispatch_sync_function_invoke(dq, ctxt, func);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 设置默认值</span><br><span class="line">pthread_priority_t pp &#x3D; _dispatch_get_priority();</span><br><span class="line">struct dispatch_sync_context_s dsc &#x3D; &#123;</span><br><span class="line">.dc_flags    &#x3D; DC_FLAG_SYNC_WAITER | dc_flags,</span><br><span class="line">.dc_func     &#x3D; _dispatch_async_and_wait_invoke,</span><br><span class="line">.dc_ctxt     &#x3D; &amp;dsc,</span><br><span class="line">.dc_other    &#x3D; top_dq,</span><br><span class="line">.dc_priority &#x3D; pp | _PTHREAD_PRIORITY_ENFORCE_FLAG,</span><br><span class="line">.dc_voucher  &#x3D; _voucher_get(),</span><br><span class="line">.dsc_func    &#x3D; func,</span><br><span class="line">.dsc_ctxt    &#x3D; ctxt,</span><br><span class="line">.dsc_waiter  &#x3D; _dispatch_tid_self(),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; push到队列中</span><br><span class="line">_dispatch_trace_item_push(top_dq, &amp;dsc);</span><br><span class="line">&#x2F;&#x2F; 等待当前线程，这里会一直等</span><br><span class="line">__DISPATCH_WAIT_FOR_QUEUE__(&amp;dsc, dq);</span><br><span class="line"></span><br><span class="line">if (dsc.dsc_func &#x3D;&#x3D; NULL) &#123;</span><br><span class="line">&#x2F;&#x2F; dsc_func being cleared means that the block ran on another thread ie.</span><br><span class="line">&#x2F;&#x2F; case (2) as listed in _dispatch_async_and_wait_f_slow.</span><br><span class="line">dispatch_queue_t stop_dq &#x3D; dsc.dc_other;</span><br><span class="line">return _dispatch_sync_complete_recurse(top_dq, stop_dq, top_dc_flags);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_dispatch_introspection_sync_begin(top_dq);</span><br><span class="line">_dispatch_trace_item_pop(top_dq, &amp;dsc);</span><br><span class="line">_dispatch_sync_invoke_and_complete_recurse(top_dq, ctxt, func,top_dc_flags</span><br><span class="line">DISPATCH_TRACE_ARG(&amp;dsc));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">static void</span><br><span class="line">__DISPATCH_WAIT_FOR_QUEUE__(dispatch_sync_context_t dsc, dispatch_queue_t dq)</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; 获取当前的状态</span><br><span class="line">uint64_t dq_state &#x3D; _dispatch_wait_prepare(dq);</span><br><span class="line">&#x2F;&#x2F; 判断状态是否是waiter</span><br><span class="line">if (unlikely(_dq_state_drain_locked_by(dq_state, dsc-&gt;dsc_waiter))) &#123;</span><br><span class="line">   &#x2F;&#x2F; 发生crash</span><br><span class="line">DISPATCH_CLIENT_CRASH((uintptr_t)dq_state,</span><br><span class="line">&quot;dispatch_sync called on queue &quot;</span><br><span class="line">&quot;already owned by current thread&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dsc-&gt;dsc_waiter</code>的值是在上一层函数通过<code>_dispatch_tid_self()</code>获取到的。然后判断是否是在等待，是的话则触发crash。</p><p>我们还用之前的例子来看一下死锁的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (void)textDemo4 &#123;</span><br><span class="line">    &#x2F;&#x2F; 串行队列</span><br><span class="line">    dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;queue&quot;, NULL);</span><br><span class="line">    NSLog(@&quot;1&quot;);</span><br><span class="line">    &#x2F;&#x2F; 异步函数</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        NSLog(@&quot;2&quot;);</span><br><span class="line">        &#x2F;&#x2F; 同步</span><br><span class="line">        dispatch_sync(queue, ^&#123;</span><br><span class="line">            NSLog(@&quot;3&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">        NSLog(@&quot;4&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    NSLog(@&quot;5&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下，发现就会crash，如果</p><p><img src="loop-demo.jpg" alt=""></p><p>可以看出最后的调用栈就是我们上面分析的<code>_dispatch_sync_f_slow</code> -&gt; <code>__DISPATCH_WAIT_FOR_QUEUE__</code>。</p><p>还用这张图来分析它的原因，虽然我们已经看到了其内部的实现原理。<br><img src="loop-queue.jpg" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>异步函数的调用逻辑原理</li><li>dispatch_once的原理：使用dgo_once标记是否执行过。</li><li>栅栏函数<ol><li>只用于自定义的并发函数</li></ol></li><li>dispatch_sync 同步函数<ol><li>内部是一个栅栏函数</li><li>死锁的原因：互相等待</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;dispatch-async异步函数的调用&quot;&gt;&lt;a href=&quot;#dispatch-async异步函数的调用&quot; class=&quot;headerlink&quot; title=&quot;dispatch_async异步函数的调用&quot;&gt;&lt;/a&gt;dispatch_async异步函数的调用&lt;/
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>GCD底层原理-1</title>
    <link href="http://liujiaboy.github.io/2021/05/10/OC%E5%8E%9F%E7%90%86/GCD-1/"/>
    <id>http://liujiaboy.github.io/2021/05/10/OC%E5%8E%9F%E7%90%86/GCD-1/</id>
    <published>2021-05-10T13:24:11.000Z</published>
    <updated>2021-05-17T02:21:40.554Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GCD简介"><a href="#GCD简介" class="headerlink" title="GCD简介"></a>GCD简介</h1><p>全称是 Grand Central Dispatch。底层为C语言，将任务添加到队列，并且指定执行任务的函数。GCD提供了非常强大的函数。</p><h2 id="GCD的优势"><a href="#GCD的优势" class="headerlink" title="GCD的优势"></a>GCD的优势</h2><ul><li>是苹果公司为多核的并行运算提出的解决方案</li><li>会自动利用更多的CPU内核(比如双核、四核)</li><li>会自动管理线程的生命周期(创建线程、调度任务、销毁线程) 程序员只需要告诉 GCD 想要执行什么任务，不需要编写任何线程管理代码</li></ul><h2 id="同步和异步函数"><a href="#同步和异步函数" class="headerlink" title="同步和异步函数"></a>同步和异步函数</h2><p>GCD使用block封装任务，任务的block没有参数也没有返回值。</p><p>任务的调度有同步和异步之分。</p><h3 id="同步dispatch-sync"><a href="#同步dispatch-sync" class="headerlink" title="同步dispatch_sync"></a>同步<code>dispatch_sync</code></h3><ol><li>必须等待当前语句执行完毕，才会执行下一条语句。</li><li>同步不会开启线程。</li><li>在当前线程执行block任务。</li></ol><h3 id="异步-dispatch-async"><a href="#异步-dispatch-async" class="headerlink" title="异步 dispatch_async"></a>异步 <code>dispatch_async</code></h3><ol><li>会开启新线程执行block任务</li><li>异步是多线程的代名词</li></ol><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列是一种数据结构，遵循先进先出的原则（FIFO）。分为串行队列和并发队列（并行）。</p><p>不管是串行还是并发队列，谁在队列的最前头谁先开始执行。但是执行的快慢与当前所需资源有关。</p><p><img src="queue.jpg" alt=""></p><p>串行等待上一个任务执行完成<br>并发不会等待上一个任务执行完成</p><h2 id="函数与队列"><a href="#函数与队列" class="headerlink" title="函数与队列"></a>函数与队列</h2><h3 id="同步函数-串行队列"><a href="#同步函数-串行队列" class="headerlink" title="同步函数 + 串行队列"></a>同步函数 + 串行队列</h3><ul><li>不会开启线程，在当前线程执行任务</li><li>执行完一个执行下一个，会产生堵塞</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建串行队列</span><br><span class="line">- (void)serialSyncTest&#123;</span><br><span class="line">    dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;queue1&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">    for (int i &#x3D; 0; i &lt; 20; i++) &#123;</span><br><span class="line">        &#x2F;&#x2F; a</span><br><span class="line">        dispatch_sync(queue, ^&#123;</span><br><span class="line">            &#x2F;&#x2F; b</span><br><span class="line">            NSLog(@&quot;i &#x3D; %d, thread &#x3D; %@&quot;,i,[NSThread currentThread]);</span><br><span class="line">        &#125;);</span><br><span class="line">        &#x2F;&#x2F; c</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会从0到19，按照a-b-c的顺序输出所有数据。根据打印的线程，发现就是主线程，并不会开启新线程。</p><h3 id="同步函数-并发队列"><a href="#同步函数-并发队列" class="headerlink" title="同步函数 + 并发队列"></a>同步函数 + 并发队列</h3><ul><li>不会开启线程，在当前线程执行任务</li><li>任务一个接着一个执行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (void)concurrentSyncTest&#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;1:创建并发队列</span><br><span class="line">    dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;queue2&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    for (int i &#x3D; 0; i&lt;20; i++) &#123;</span><br><span class="line">        dispatch_sync(queue, ^&#123;</span><br><span class="line">            NSLog(@&quot;i &#x3D; %d, thread &#x3D; %@&quot;,i,[NSThread currentThread]);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    NSLog(@&quot;hello queue&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步并发队列，会按照顺序执行，最后打印<code>hello queue</code>。</p><p>同步函数的情况下，不管是串行还是并发，都不会开启新线程，任务按步执行。</p><h3 id="异步函数-串行队列"><a href="#异步函数-串行队列" class="headerlink" title="异步函数 + 串行队列"></a>异步函数 + 串行队列</h3><ul><li>开启新线程</li><li>任务一个接一个执行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 异步串行</span><br><span class="line">- (void)serialAsyncTest&#123;</span><br><span class="line">    &#x2F;&#x2F;1:创建串行队列</span><br><span class="line">    dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;queue3&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">    for (int i &#x3D; 0; i&lt;20; i++) &#123;</span><br><span class="line">        &#x2F;&#x2F; a</span><br><span class="line">        dispatch_async(queue, ^&#123;</span><br><span class="line">            &#x2F;&#x2F; b</span><br><span class="line">            NSLog(@&quot;i &#x3D; %d，thread &#x3D; %@&quot;,i,[NSThread currentThread]);</span><br><span class="line">        &#125;);</span><br><span class="line">        &#x2F;&#x2F; c</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; d</span><br><span class="line">    NSLog(@&quot;hello queue&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于是异步串行队列，线程的创建会有耗时操作，在for循环中执行的顺序是a-c-b(a)，执行了a之后是c，在之后不一定是a还是b。</p><p>而d语句可能先执行，也可能后执行。</p><p>根据线程的打印情况，发现会开启新线程。</p><h3 id="异步函数-并发队列"><a href="#异步函数-并发队列" class="headerlink" title="异步函数 + 并发队列"></a>异步函数 + 并发队列</h3><ul><li>开启新线程，并开始执行</li><li>任务异步执行，没有顺序，与CPU调度有关</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (void)concurrentAsyncTest&#123;</span><br><span class="line">    &#x2F;&#x2F;1:创建并发队列</span><br><span class="line">    dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;queue4&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    for (int i &#x3D; 0; i&lt;20; i++) &#123;</span><br><span class="line">        dispatch_async(queue, ^&#123;</span><br><span class="line">            NSLog(@&quot;%d-%@&quot;,i,[NSThread currentThread]);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    NSLog(@&quot;hello queue&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会开启新的线程，执行没有顺序。</p><h2 id="函数队列的面试题"><a href="#函数队列的面试题" class="headerlink" title="函数队列的面试题"></a>函数队列的面试题</h2><h3 id="异步并发队列"><a href="#异步并发队列" class="headerlink" title="异步并发队列"></a>异步并发队列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (void)textDemo &#123;</span><br><span class="line">    dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;queue&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    NSLog(@&quot;1&quot;);</span><br><span class="line">    &#x2F;&#x2F; 耗时</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        NSLog(@&quot;2&quot;);</span><br><span class="line">        dispatch_async(queue, ^&#123;</span><br><span class="line">            NSLog(@&quot;3&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">        NSLog(@&quot;4&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    NSLog(@&quot;5&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个并行队列，内部是异步执行。当block内部有任务需要执行时，会产生耗时，所以就会先执行完成block外部的简单调用。而在block内部，是按照正常的流程执行的。</p><p>打印的结果是<code>1 5 2 4 3</code>。</p><h3 id="异步串行队列"><a href="#异步串行队列" class="headerlink" title="异步串行队列"></a>异步串行队列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (void)textDemo1&#123;</span><br><span class="line">    &#x2F;&#x2F; 串行队列</span><br><span class="line">    dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;queue&quot;, NULL);</span><br><span class="line">    NSLog(@&quot;1&quot;);</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        NSLog(@&quot;2&quot;);</span><br><span class="line">        dispatch_async(queue, ^&#123;</span><br><span class="line">            NSLog(@&quot;3&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">        NSLog(@&quot;4&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    NSLog(@&quot;5&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要是block内部需要执行，则一定是耗时操作，所以先执行1，然后5，在异步串行队列内部，是与外部一样的道理，</p><p>结果是：1 5 2 4 3</p><h3 id="并发队列-异步同步嵌套"><a href="#并发队列-异步同步嵌套" class="headerlink" title="并发队列 异步同步嵌套"></a>并发队列 异步同步嵌套</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (void)textDemo3 &#123;</span><br><span class="line">    &#x2F;&#x2F; 并发队列</span><br><span class="line">    dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;queue&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    NSLog(@&quot;1&quot;);</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        NSLog(@&quot;2&quot;);</span><br><span class="line">        dispatch_sync(queue, ^&#123;</span><br><span class="line">            NSLog(@&quot;3&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">        NSLog(@&quot;4&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    NSLog(@&quot;5&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为 1 5 2 3 4<br>同步并发队列也不会开启新线程，一个一个执行。</p><h3 id="串行-异步同步嵌套"><a href="#串行-异步同步嵌套" class="headerlink" title="串行 异步同步嵌套"></a>串行 异步同步嵌套</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (void)textDemo4 &#123;</span><br><span class="line">    &#x2F;&#x2F; 串行队列</span><br><span class="line">    dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;queue&quot;, NULL);</span><br><span class="line">    NSLog(@&quot;1&quot;);</span><br><span class="line">    &#x2F;&#x2F; 异步函数</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        NSLog(@&quot;2&quot;);</span><br><span class="line">        &#x2F;&#x2F; 同步</span><br><span class="line">        dispatch_sync(queue, ^&#123;</span><br><span class="line">            NSLog(@&quot;3&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">        NSLog(@&quot;4&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    NSLog(@&quot;5&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面已经有过异步串行、异步并行的例子了，只要异步函数内部有任务要执行，就属于耗时操作，会优先执行完毕外部的简单操作。所以先执行 1 5</p><p>在异步函数内部，继续串行执行。这时候会执行2，然后碰到了同步串行队列。而同步串行队列是需要等待外部执行完成之后才会执行，但是4也在等待同步函数的执行，造成了互相等待，发生了死锁。</p><p><img src="loop-queue.jpg" alt=""></p><p>这里即使把4注释掉，也同样会发生死锁。</p><p>所以结果为： 1 5 2 – 死锁</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我们一定要清楚，不管是异步还是同步，都是对与block块和其下一行代码来说的。在block内部不管当前是异步还是同步，串行还是并行，都是从上往下执行的。</p><p>另外并发和串行的区别：</p><ul><li>并发不会等待一个任务执行完成才执行。</li><li>串行会等待一个任务执行完毕才执行。</li></ul><p>同步和异步：<br>同步和异步是对当前线程而言的。</p><ul><li>异步函数下，不管是串行队列还是并行队列，都不影响block块之外的内存执。因为block内部是在新开启的线程中执行的。</li><li>同步函数下，并行队列不受影响，因为并行不需要等待上一个任务执行完成。如果是串行队列，那在当前线程下会发生死锁。</li></ul><h1 id="主队列-amp-全局队列"><a href="#主队列-amp-全局队列" class="headerlink" title="主队列 &amp; 全局队列"></a>主队列 &amp; 全局队列</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t serial &#x3D; dispatch_queue_create(&quot;serial&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">dispatch_queue_t conque &#x3D; dispatch_queue_create(&quot;conque&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">dispatch_queue_t mainQueue &#x3D; dispatch_get_main_queue();</span><br><span class="line">dispatch_queue_t globQueue &#x3D; dispatch_get_global_queue(0, 0);</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;%@\n%@\n%@\n%@&quot;,serial,conque,mainQueue,globQueue);</span><br></pre></td></tr></table></figure><p>打印一些这4个队列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;OS_dispatch_queue_serial: serial&gt;</span><br><span class="line">&lt;OS_dispatch_queue_concurrent: conque&gt;</span><br><span class="line">&lt;OS_dispatch_queue_main: com.apple.main-thread&gt;</span><br><span class="line">&lt;OS_dispatch_queue_global: com.apple.root.default-qos&gt;</span><br></pre></td></tr></table></figure><p>这里打印了4个队列，但是其实一共只有两个队列，就是串行队列和并发队列。</p><p>通过汇编手法，我们发现GCD的源码存在与<code>libdispatch.dylib</code>库中，我们就从这个库里看GCD的底层实现。</p><h2 id="主队列"><a href="#主队列" class="headerlink" title="主队列"></a>主队列</h2><p><code>dispatch_get_main_queue()</code>主队列专门用来在主线程上调度任务的<b>串行队列</b>，并不会开启新线程。</p><p>如果当前主线程正在执行任务，那么无论主队列中被添加了什么任务，都不会被调度执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t mainQueue &#x3D; dispatch_get_main_queue();</span><br></pre></td></tr></table></figure><p>我们通过源码查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">dispatch_queue_main_t</span><br><span class="line">dispatch_get_main_queue(void)</span><br><span class="line">&#123;</span><br><span class="line">return DISPATCH_GLOBAL_OBJECT(dispatch_queue_main_t, _dispatch_main_q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>dispatch_get_main_queue</code>的解释中，我们发现：主队列依赖于主线程<code>dispatch_main()</code>和<code>runloop</code>，并且主线程是在<code>main()</code>函数之前自动创建的（dyld的流程）。</p><p>先看看啥是<code>dispatch_queue_main_t</code></p><blockquote><p>A dispatch queue that is bound to the app’s main thread and executes tasks serially on that thread.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typedef NSObject&lt;OS_dispatch_queue_main&gt; *dispatch_queue_main_t;</span><br></pre></td></tr></table></figure><p>可以看出来<code>OS_dispatch_queue_main</code>是一个类。</p><p>那我们找一找<code>DISPATCH_GLOBAL_OBJECT</code>这个的实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define DISPATCH_GLOBAL_OBJECT(type, object) ((OS_OBJECT_BRIDGE type)&amp;(object))</span><br></pre></td></tr></table></figure><p>这是一个宏定义，内部使用的是一个type类型强转之后与object进行二进制的”&amp;“运算。</p><p>然后看看这两个参数：</p><p><code>dispatch_queue_main_t</code>：</p><blockquote><p>The type of the default queue that is bound to the main thread<br>从字面意思就是把默认线程绑定到主线程。</p></blockquote><p><code>_dispatch_main_q</code>：</p><blockquote><p>Returns the default queue that is bound to the main thread.<br>返回一个绑定了主线程的默认线程。接下来我们通过源码看一下<code>_dispatch_main_q</code>。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">struct dispatch_queue_static_s _dispatch_main_q &#x3D; &#123;</span><br><span class="line">DISPATCH_GLOBAL_OBJECT_HEADER(queue_main),</span><br><span class="line">#if !DISPATCH_USE_RESOLVERS</span><br><span class="line">.do_targetq &#x3D; _dispatch_get_default_queue(true),</span><br><span class="line">#endif</span><br><span class="line">.dq_state &#x3D; DISPATCH_QUEUE_STATE_INIT_VALUE(1) |</span><br><span class="line">DISPATCH_QUEUE_ROLE_BASE_ANON,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.main-thread&quot;,</span><br><span class="line">.dq_atomic_flags &#x3D; DQF_THREAD_BOUND | DQF_WIDTH(1),</span><br><span class="line">.dq_serialnum &#x3D; 1,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>_dispatch_main_q</code>是一个结构体：</p><p><code>dq_label</code>：使用的标签，上方代码中打印出来的东西。<br><code>dq_atomic_flags</code>：是一个flag，DQF_WIDTH(1)表示宽度，1只能通过1个<br><code>dq_serialnum</code>：串行数是1</p><p>知道了两个参数，我们直接使用”&amp;“运算看是否能得到我们想要的主线程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t mainQueue &#x3D; (OS_OBJECT_BRIDGE dispatch_queue_main_t)&amp;(_dispatch_main_q);</span><br></pre></td></tr></table></figure><p>得到的这个mainQueue与上方的点结果是一直到。</p><p>接下来我们得验证一下，<code>dispatch_get_main_queue</code>是在main函数之前执行的。在dyld的流程中，我们知道他会执行一个<code>libdispatch_init(void)</code>的操作。在它的内部源码中有如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">libdispatch_init(void)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F; ...</span><br><span class="line">&#x2F;&#x2F; line 7921</span><br><span class="line">#if DISPATCH_USE_RESOLVERS &#x2F;&#x2F; rdar:&#x2F;&#x2F;problem&#x2F;8541707</span><br><span class="line">_dispatch_main_q.do_targetq &#x3D; _dispatch_get_default_queue(true);</span><br><span class="line">#endif</span><br><span class="line">  &#x2F;&#x2F; 设置当前线程</span><br><span class="line">_dispatch_queue_set_current(&amp;_dispatch_main_q);</span><br><span class="line">&#x2F;&#x2F; 绑定线程</span><br><span class="line">_dispatch_queue_set_bound_thread(&amp;_dispatch_main_q);</span><br><span class="line">&#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第7758行代码，可以看到创建了<code>_dispatch_main_q</code>静态结构体，之后设置当前线程为为主线程，然后进行绑定。</p><h2 id="全局队列"><a href="#全局队列" class="headerlink" title="全局队列"></a>全局队列</h2><p><code>dispatch_get_global_queue(0,0)</code>，为了方便使用，苹果创建了全局队列，全局队列是一个<b>并发队列</b>。</p><p>在使用多线程开发时，如果对队列没有特殊需求，在执行异步任务时，可以直接使用全局队列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_global_t</span><br><span class="line">dispatch_get_global_queue(intptr_t identifier, uintptr_t flags);</span><br></pre></td></tr></table></figure><p>这里有两个参数：<br>第一个identifier：表示优先级，与QOS的优先级一一对应。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DISPATCH_QUEUE_PRIORITY_HIGH        &#x2F;&#x2F; 高</span><br><span class="line">DISPATCH_QUEUE_PRIORITY_DEFAULT     &#x2F;&#x2F; 默认</span><br><span class="line">DISPATCH_QUEUE_PRIORITY_LOW         &#x2F;&#x2F; 低</span><br><span class="line">DISPATCH_QUEUE_PRIORITY_BACKGROUND  &#x2F;&#x2F; BACKGROUND</span><br></pre></td></tr></table></figure><p>第二个参数是flag：<br>保留供将来使用的标志。始终将此参数指定为0。</p><p>接下来，查看一下源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_global_t</span><br><span class="line">dispatch_get_global_queue(long priority, unsigned long flags)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_assert(countof(_dispatch_root_queues) &#x3D;&#x3D;</span><br><span class="line">DISPATCH_ROOT_QUEUE_COUNT);</span><br><span class="line"></span><br><span class="line">if (flags &amp; ~(unsigned long)DISPATCH_QUEUE_OVERCOMMIT) &#123;</span><br><span class="line">return DISPATCH_BAD_INPUT;</span><br><span class="line">&#125;</span><br><span class="line">dispatch_qos_t qos &#x3D; _dispatch_qos_from_queue_priority(priority);</span><br><span class="line">#if !HAVE_PTHREAD_WORKQUEUE_QOS</span><br><span class="line">if (qos &#x3D;&#x3D; QOS_CLASS_MAINTENANCE) &#123;</span><br><span class="line">qos &#x3D; DISPATCH_QOS_BACKGROUND;</span><br><span class="line">&#125; else if (qos &#x3D;&#x3D; QOS_CLASS_USER_INTERACTIVE) &#123;</span><br><span class="line">qos &#x3D; DISPATCH_QOS_USER_INITIATED;</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br><span class="line">if (qos &#x3D;&#x3D; DISPATCH_QOS_UNSPECIFIED) &#123;</span><br><span class="line">return DISPATCH_BAD_INPUT;</span><br><span class="line">&#125;</span><br><span class="line">return _dispatch_get_root_queue(qos, flags &amp; DISPATCH_QUEUE_OVERCOMMIT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一坨东西其实都不用看，只需要看到最后<code>return _dispatch_get_root_queue()</code>是这么个东西。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static inline dispatch_queue_global_t</span><br><span class="line">_dispatch_get_root_queue(dispatch_qos_t qos, bool overcommit)</span><br><span class="line">&#123;</span><br><span class="line">if (unlikely(qos &lt; DISPATCH_QOS_MIN || qos &gt; DISPATCH_QOS_MAX)) &#123;</span><br><span class="line">DISPATCH_CLIENT_CRASH(qos, &quot;Corrupted priority&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return &amp;_dispatch_root_queues[2 * (qos - 1) + overcommit];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_dispatch_root_queues[]</code>应该就是一个数组，通过传进来的参数获取对应的queue。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">struct dispatch_queue_global_s _dispatch_root_queues[] &#x3D; &#123;</span><br><span class="line">&#x2F;&#x2F; ...</span><br><span class="line">  .dq_atomic_flags &#x3D; DQF_WIDTH(DISPATCH_QUEUE_WIDTH_POOL), \</span><br><span class="line">_DISPATCH_ROOT_QUEUE_ENTRY(MAINTENANCE, 0,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.root.maintenance-qos&quot;,</span><br><span class="line">.dq_serialnum &#x3D; 4,</span><br><span class="line">),</span><br><span class="line">_DISPATCH_ROOT_QUEUE_ENTRY(MAINTENANCE, DISPATCH_PRIORITY_FLAG_OVERCOMMIT,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.root.maintenance-qos.overcommit&quot;,</span><br><span class="line">.dq_serialnum &#x3D; 5,</span><br><span class="line">),</span><br><span class="line">_DISPATCH_ROOT_QUEUE_ENTRY(BACKGROUND, 0,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.root.background-qos&quot;,</span><br><span class="line">.dq_serialnum &#x3D; 6,</span><br><span class="line">),</span><br><span class="line">_DISPATCH_ROOT_QUEUE_ENTRY(BACKGROUND, DISPATCH_PRIORITY_FLAG_OVERCOMMIT,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.root.background-qos.overcommit&quot;,</span><br><span class="line">.dq_serialnum &#x3D; 7,</span><br><span class="line">),</span><br><span class="line">_DISPATCH_ROOT_QUEUE_ENTRY(UTILITY, 0,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.root.utility-qos&quot;,</span><br><span class="line">.dq_serialnum &#x3D; 8,</span><br><span class="line">),</span><br><span class="line">_DISPATCH_ROOT_QUEUE_ENTRY(UTILITY, DISPATCH_PRIORITY_FLAG_OVERCOMMIT,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.root.utility-qos.overcommit&quot;,</span><br><span class="line">.dq_serialnum &#x3D; 9,</span><br><span class="line">),</span><br><span class="line">_DISPATCH_ROOT_QUEUE_ENTRY(DEFAULT, DISPATCH_PRIORITY_FLAG_FALLBACK,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.root.default-qos&quot;,</span><br><span class="line">.dq_serialnum &#x3D; 10,</span><br><span class="line">),</span><br><span class="line">_DISPATCH_ROOT_QUEUE_ENTRY(DEFAULT,</span><br><span class="line">DISPATCH_PRIORITY_FLAG_FALLBACK | DISPATCH_PRIORITY_FLAG_OVERCOMMIT,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.root.default-qos.overcommit&quot;,</span><br><span class="line">.dq_serialnum &#x3D; 11,</span><br><span class="line">),</span><br><span class="line">_DISPATCH_ROOT_QUEUE_ENTRY(USER_INITIATED, 0,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.root.user-initiated-qos&quot;,</span><br><span class="line">.dq_serialnum &#x3D; 12,</span><br><span class="line">),</span><br><span class="line">_DISPATCH_ROOT_QUEUE_ENTRY(USER_INITIATED, DISPATCH_PRIORITY_FLAG_OVERCOMMIT,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.root.user-initiated-qos.overcommit&quot;,</span><br><span class="line">.dq_serialnum &#x3D; 13,</span><br><span class="line">),</span><br><span class="line">_DISPATCH_ROOT_QUEUE_ENTRY(USER_INTERACTIVE, 0,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.root.user-interactive-qos&quot;,</span><br><span class="line">.dq_serialnum &#x3D; 14,</span><br><span class="line">),</span><br><span class="line">_DISPATCH_ROOT_QUEUE_ENTRY(USER_INTERACTIVE, DISPATCH_PRIORITY_FLAG_OVERCOMMIT,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.root.user-interactive-qos.overcommit&quot;,</span><br><span class="line">.dq_serialnum &#x3D; 15,</span><br><span class="line">),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们看到了lable的内容，有我们刚才打印的那个<code>com.apple.root.default-qos</code>。会根据我们设置的优先级返回不同的全局队列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dq_atomic_flags &#x3D; DQF_WIDTH(DISPATCH_QUEUE_WIDTH_POOL)</span><br><span class="line"></span><br><span class="line">#define DISPATCH_QUEUE_WIDTH_FULL0x1000ull</span><br><span class="line">#define DISPATCH_QUEUE_WIDTH_POOL (DISPATCH_QUEUE_WIDTH_FULL - 1)</span><br></pre></td></tr></table></figure><p>dq_atomic_flags的值也就是    (0x1000 - 1) = 4095</p><h1 id="dispatch-queue-create-原理"><a href="#dispatch-queue-create-原理" class="headerlink" title="dispatch_queue_create 原理"></a>dispatch_queue_create 原理</h1><p>直奔主题，在源码中查看<code>dispatch_queue_create</code>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t</span><br><span class="line">dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)</span><br><span class="line">&#123;</span><br><span class="line">return _dispatch_lane_create_with_target(label, attr,</span><br><span class="line">DISPATCH_TARGET_QUEUE_DEFAULT, true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里传了两个参数，第一个是标签，表示创建的队列，第二个标识串行还是并发。</p><h2 id="串行：DISPATCH-QUEUE-SERIAL"><a href="#串行：DISPATCH-QUEUE-SERIAL" class="headerlink" title="串行：DISPATCH_QUEUE_SERIAL"></a>串行：DISPATCH_QUEUE_SERIAL</h2><p>我们看一下源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define DISPATCH_QUEUE_SERIAL NULL</span><br></pre></td></tr></table></figure><p>所以，通常情况下，我们在创建串行队列时，也会使用<code>NULL</code>来替换。</p><h2 id="并发：DISPATCH-QUEUE-CONCURRENT"><a href="#并发：DISPATCH-QUEUE-CONCURRENT" class="headerlink" title="并发：DISPATCH_QUEUE_CONCURRENT"></a>并发：DISPATCH_QUEUE_CONCURRENT</h2><p>我们看一下源码实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#define DISPATCH_QUEUE_CONCURRENT \</span><br><span class="line">DISPATCH_GLOBAL_OBJECT(dispatch_queue_attr_t, \</span><br><span class="line">_dispatch_queue_attr_concurrent)</span><br></pre></td></tr></table></figure><p>这里有一个<code>DISPATCH_GLOBAL_OBJECT()</code>函数，在主队列中已经介绍过了（通过&amp;运算）。</p><p><code>_dispatch_lane_create_with_target</code>这个函数中，我们发现很长很难懂，那我们就通过多年的编程经验，看它返回的时候一个什么东西，然后看这个是怎么创建的。下面的代码是经过删减的，有需要的自行查看源码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">static dispatch_queue_t</span><br><span class="line">_dispatch_lane_create_with_target(const char *label, dispatch_queue_attr_t dqa,</span><br><span class="line">dispatch_queue_t tq, bool legacy)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F; 1. 创建 dqai</span><br><span class="line">dispatch_queue_attr_info_t dqai &#x3D; _dispatch_queue_attr_to_info(dqa);</span><br><span class="line">&#x2F;&#x2F; ...</span><br><span class="line">&#x2F;&#x2F; 2. 创建vtable</span><br><span class="line">const void *vtable;</span><br><span class="line">dispatch_queue_flags_t dqf &#x3D; legacy ? DQF_MUTABLE : 0;</span><br><span class="line">if (dqai.dqai_concurrent) &#123;</span><br><span class="line">&#x2F;&#x2F; OS_dispatch_queue_concurrent</span><br><span class="line">vtable &#x3D; DISPATCH_VTABLE(queue_concurrent);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">vtable &#x3D; DISPATCH_VTABLE(queue_serial);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; ...</span><br><span class="line">&#x2F;&#x2F; 3. label赋值</span><br><span class="line">if (label) &#123;</span><br><span class="line">const char *tmp &#x3D; _dispatch_strdup_if_mutable(label);</span><br><span class="line">if (tmp !&#x3D; label) &#123;</span><br><span class="line">dqf |&#x3D; DQF_LABEL_NEEDS_FREE;</span><br><span class="line">label &#x3D; tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 4. dq alloc分配内存空间</span><br><span class="line">dispatch_lane_t dq &#x3D; _dispatch_object_alloc(vtable,</span><br><span class="line">sizeof(struct dispatch_lane_s)); </span><br><span class="line">&#x2F;&#x2F; 5. dq init操作</span><br><span class="line">_dispatch_queue_init(dq, dqf, dqai.dqai_concurrent ?</span><br><span class="line">DISPATCH_QUEUE_WIDTH_MAX : 1, DISPATCH_QUEUE_ROLE_INNER |</span><br><span class="line">(dqai.dqai_inactive ? DISPATCH_QUEUE_INACTIVE : 0)); &#x2F;&#x2F; init</span><br><span class="line">  &#x2F;&#x2F; 6. 对dq进行赋值</span><br><span class="line">dq-&gt;dq_label &#x3D; label;</span><br><span class="line">dq-&gt;dq_priority &#x3D; _dispatch_priority_make((dispatch_qos_t)dqai.dqai_qos,</span><br><span class="line">dqai.dqai_relpri);</span><br><span class="line">if (overcommit &#x3D;&#x3D; _dispatch_queue_attr_overcommit_enabled) &#123;</span><br><span class="line">dq-&gt;dq_priority |&#x3D; DISPATCH_PRIORITY_FLAG_OVERCOMMIT;</span><br><span class="line">&#125;</span><br><span class="line">if (!dqai.dqai_inactive) &#123;</span><br><span class="line">_dispatch_queue_priority_inherit_from_target(dq, tq);</span><br><span class="line">_dispatch_lane_inherit_wlh_from_target(dq, tq);</span><br><span class="line">&#125;</span><br><span class="line">_dispatch_retain(tq);</span><br><span class="line">dq-&gt;do_targetq &#x3D; tq;</span><br><span class="line">_dispatch_object_debug(dq, &quot;%s&quot;, __func__);</span><br><span class="line">return _dispatch_trace_queue_create(dq)._dq;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建dqai"><a href="#创建dqai" class="headerlink" title="创建dqai"></a>创建dqai</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_attr_info_t</span><br><span class="line">_dispatch_queue_attr_to_info(dispatch_queue_attr_t dqa)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_queue_attr_info_t dqai &#x3D; &#123; &#125;;</span><br><span class="line"></span><br><span class="line">if (!dqa) return dqai;</span><br><span class="line"></span><br><span class="line">#if DISPATCH_VARIANT_STATIC</span><br><span class="line">if (dqa &#x3D;&#x3D; &amp;_dispatch_queue_attr_concurrent) &#123; &#x2F;&#x2F; null 默认</span><br><span class="line">dqai.dqai_concurrent &#x3D; true;</span><br><span class="line">return dqai;</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">    return dqai;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还记得我们在创建队列时传的参数吗？第一个是label，第二个是串行还是并发。</p><p>这个dqai会判断当前是串行还是并发，并对<code>dqai.dqai_concurrent = true;</code>进行赋值。</p><h2 id="创建-vtable"><a href="#创建-vtable" class="headerlink" title="创建 vtable"></a>创建 vtable</h2><p><code>vtable</code>会根据当前是串行还是并发进行创建，我们一步一步的追寻<code>vtable</code>是什么。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#if OS_OBJECT_HAVE_OBJC2</span><br><span class="line">#define DISPATCH_VTABLE(name) DISPATCH_OBJC_CLASS(name)</span><br><span class="line">#define DISPATCH_OBJC_CLASS(name) (&amp;DISPATCH_CLASS_SYMBOL(name))</span><br><span class="line">#define DISPATCH_CLASS_SYMBOL(name) OS_dispatch_##name##_class</span><br><span class="line">#elif</span><br><span class="line">...</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (dqai.dqai_concurrent) &#123;</span><br><span class="line">&#x2F;&#x2F; OS_dispatch_queue_concurrent</span><br><span class="line">vtable &#x3D; DISPATCH_VTABLE(queue_concurrent);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">vtable &#x3D; DISPATCH_VTABLE(queue_serial);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过源码发现，<code>vtable</code>就是一个类。最后生成的就是<code>OS_dispatch_##name##_class</code>。</p><p><code>##name##</code>就是创建<code>vtable</code>时的参数，就会生成对应的<code>OS_dispatch_queue_serial_class</code>和<code>OS_dispatch_queue_concurrent_class</code>。</p><h2 id="label赋值"><a href="#label赋值" class="headerlink" title="label赋值"></a>label赋值</h2><p>这个就是创建时传入的那个label标签的内容。</p><h2 id="dq-alloc分配内存空间"><a href="#dq-alloc分配内存空间" class="headerlink" title="dq alloc分配内存空间"></a>dq alloc分配内存空间</h2><p>这里执行了alloc操作，开始分配内存空间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dispatch_lane_t dq &#x3D; _dispatch_object_alloc(vtable,</span><br><span class="line">sizeof(struct dispatch_lane_s)); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void *</span><br><span class="line">_dispatch_object_alloc(const void *vtable, size_t size)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F; 这个是在mac下执行</span><br><span class="line">#if OS_OBJECT_HAVE_OBJC1</span><br><span class="line">...</span><br><span class="line">#else</span><br><span class="line">&#x2F;&#x2F; 这里分配内存，isa指向</span><br><span class="line">return _os_object_alloc_realized(vtable, size);</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真正的alloc操作是在这里执行的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">inline _os_object_t</span><br><span class="line">_os_object_alloc_realized(const void *cls, size_t size)</span><br><span class="line">&#123;</span><br><span class="line">_os_object_t obj;</span><br><span class="line">dispatch_assert(size &gt;&#x3D; sizeof(struct _os_object_s));</span><br><span class="line">&#x2F;&#x2F; 开辟空间</span><br><span class="line">while (unlikely(!(obj &#x3D; calloc(1u, size)))) &#123;</span><br><span class="line">&#x2F;&#x2F; 执行的都是likely的操作，所以不会走这里，这里也没有意义，内部是sleep操作</span><br><span class="line">_dispatch_temporary_resource_shortage();</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; isa指向</span><br><span class="line">obj-&gt;os_obj_isa &#x3D; cls;</span><br><span class="line">return obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dq-init操作"><a href="#dq-init操作" class="headerlink" title="dq init操作"></a>dq init操作</h2><p>alloc之后，执行init操作。</p><p>初始化的时候会判断当前要生成并发还是串行队列，并发的话，个数是<code>DISPATCH_QUEUE_WIDTH_MAX</code>，串行是1，就是开辟的最大任务数。</p><h2 id="对dq进行赋值"><a href="#对dq进行赋值" class="headerlink" title="对dq进行赋值"></a>对dq进行赋值</h2><p>比如lable标签、overcommit，priority等赋值。同时绑定target。</p><h2 id="最后return"><a href="#最后return" class="headerlink" title="最后return"></a>最后return</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return _dispatch_trace_queue_create(dq)._dq;</span><br></pre></td></tr></table></figure><p>这里看源码都是最后返回的都是dq对应的数据。</p><h1 id="dispatch-async-源码"><a href="#dispatch-async-源码" class="headerlink" title="dispatch_async 源码"></a>dispatch_async 源码</h1><p>我们接下来看一下异步并发队列函数的源码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dispatch_async(conque, ^&#123;</span><br><span class="line">    NSLog(@&quot;12334&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">dispatch_async(dispatch_queue_t queue, dispatch_block_t block);</span><br><span class="line"></span><br><span class="line">void</span><br><span class="line">dispatch_async(dispatch_queue_t dq, dispatch_block_t work)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_continuation_t dc &#x3D; _dispatch_continuation_alloc();</span><br><span class="line">uintptr_t dc_flags &#x3D; DC_FLAG_CONSUME;</span><br><span class="line">dispatch_qos_t qos;</span><br><span class="line">  &#x2F;&#x2F; 任务包装器，只有这里有对work的操作</span><br><span class="line">qos &#x3D; _dispatch_continuation_init(dc, dq, work, 0, dc_flags);</span><br><span class="line">_dispatch_continuation_async(dq, dc, qos, dc-&gt;dc_flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dispatch_async()</code>函数内部会执行<code>_dispatch_continuation_init</code>，这个是函数中的重点。看一下源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">static inline dispatch_qos_t</span><br><span class="line">_dispatch_continuation_init(dispatch_continuation_t dc,</span><br><span class="line">dispatch_queue_class_t dqu, dispatch_block_t work,</span><br><span class="line">dispatch_block_flags_t flags, uintptr_t dc_flags)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F; 1. work就是外部的block，这里ctxt是对block的一个copy操作</span><br><span class="line">void *ctxt &#x3D; _dispatch_Block_copy(work);</span><br><span class="line"></span><br><span class="line">dc_flags |&#x3D; DC_FLAG_BLOCK | DC_FLAG_ALLOCATED;</span><br><span class="line">if (unlikely(_dispatch_block_has_private_data(work))) &#123;</span><br><span class="line">    &#x2F;&#x2F; dc_flags赋值</span><br><span class="line">dc-&gt;dc_flags &#x3D; dc_flags;</span><br><span class="line">&#x2F;&#x2F; block赋值到dc_ctxt中</span><br><span class="line">dc-&gt;dc_ctxt &#x3D; ctxt;</span><br><span class="line">&#x2F;&#x2F; will initialize all fields but requires dc_flags &amp; dc_ctxt to be set</span><br><span class="line">return _dispatch_continuation_init_slow(dc, dqu, flags);</span><br><span class="line">&#125;</span><br><span class="line">  &#x2F;&#x2F; 所以会走这里，func可以理解为work的方法名。</span><br><span class="line">dispatch_function_t func &#x3D; _dispatch_Block_invoke(work);</span><br><span class="line">if (dc_flags &amp; DC_FLAG_CONSUME) &#123;</span><br><span class="line">   &#x2F;&#x2F; 设置方法</span><br><span class="line">func &#x3D; _dispatch_call_block_and_release;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 这里又是重点内容</span><br><span class="line">return _dispatch_continuation_init_f(dc, dqu, ctxt, func, flags, dc_flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们进一步查看<code>_dispatch_continuation_init_f</code>源码，其内部主要是为了保存block</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">static inline dispatch_qos_t</span><br><span class="line">_dispatch_continuation_init_f(dispatch_continuation_t dc,</span><br><span class="line">dispatch_queue_class_t dqu, void *ctxt, dispatch_function_t f,</span><br><span class="line">dispatch_block_flags_t flags, uintptr_t dc_flags)</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; 默认优先级0</span><br><span class="line">pthread_priority_t pp &#x3D; 0;</span><br><span class="line">&#x2F;&#x2F; 设置dc_flags</span><br><span class="line">dc-&gt;dc_flags &#x3D; dc_flags | DC_FLAG_ALLOCATED;</span><br><span class="line">&#x2F;&#x2F; 设置方法</span><br><span class="line">dc-&gt;dc_func &#x3D; f;</span><br><span class="line">&#x2F;&#x2F; 方法实现。</span><br><span class="line">dc-&gt;dc_ctxt &#x3D; ctxt;</span><br><span class="line">&#x2F;&#x2F; 设置优先级</span><br><span class="line">if (!(flags &amp; DISPATCH_BLOCK_HAS_PRIORITY)) &#123;</span><br><span class="line">pp &#x3D; _dispatch_priority_propagate();</span><br><span class="line">&#125;</span><br><span class="line">_dispatch_continuation_voucher_set(dc, flags);</span><br><span class="line">&#x2F;&#x2F; 对block调用的优先级处理</span><br><span class="line">return _dispatch_continuation_priority_set(dc, dqu, pp, flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上内容呢，是<code>qos = _dispatch_continuation_init(dc, dq, work, 0, dc_flags);</code>的内部实现，接下来我们再看下一句代码<br><code>_dispatch_continuation_async</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">static inline void</span><br><span class="line">_dispatch_continuation_async(dispatch_queue_class_t dqu,</span><br><span class="line">dispatch_continuation_t dc, dispatch_qos_t qos, uintptr_t dc_flags)</span><br><span class="line">&#123;</span><br><span class="line">#if DISPATCH_INTROSPECTION</span><br><span class="line">if (!(dc_flags &amp; DC_FLAG_NO_INTROSPECTION)) &#123;</span><br><span class="line">_dispatch_trace_item_push(dqu, dc);</span><br><span class="line">&#125;</span><br><span class="line">#else</span><br><span class="line">(void)dc_flags;</span><br><span class="line">#endif</span><br><span class="line">return dx_push(dqu._dq, dc, qos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要执行的就是<code>dx_push</code>。我们全局搜了一下，它是一个宏。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define dx_push(x, y, z) dx_vtable(x)-&gt;dq_push(x, y, z)</span><br></pre></td></tr></table></figure><p>接下来，就有点迷茫了，<code>dq_push</code>是个什么鬼东西？全局搜一下。</p><p><img src="dq_push.jpg" alt=""></p><p>我们发现，dq_push的内容是根据当前类型赋值的，比如是串行，那就是一个<code>_dispatch_lane_push</code>，我们这里使用的并发队列，所以，应该执行的是<code>_dispatch_lane_concurrent_push</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">_dispatch_lane_concurrent_push(dispatch_lane_t dq, dispatch_object_t dou,</span><br><span class="line">dispatch_qos_t qos)</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; 一堆条件判断</span><br><span class="line">if (dq-&gt;dq_items_tail &#x3D;&#x3D; NULL &amp;&amp;</span><br><span class="line">!_dispatch_object_is_waiter(dou) &amp;&amp;</span><br><span class="line">!_dispatch_object_is_barrier(dou) &amp;&amp;</span><br><span class="line">_dispatch_queue_try_acquire_async(dq)) &#123;</span><br><span class="line">&#x2F;&#x2F; 我们先看看这个东西</span><br><span class="line">return _dispatch_continuation_redirect_push(dq, dou, qos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 最后会执行到这里。</span><br><span class="line">_dispatch_lane_push(dq, dou, qos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过一系列判断，执行到<code>_dispatch_continuation_redirect_push</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">static void</span><br><span class="line">_dispatch_continuation_redirect_push(dispatch_lane_t dl,</span><br><span class="line">dispatch_object_t dou, dispatch_qos_t qos)</span><br><span class="line">&#123;</span><br><span class="line">if (likely(!_dispatch_object_is_redirection(dou))) &#123;</span><br><span class="line">   &#x2F;&#x2F; 这里会生成_dc，内部就不细说了，主要是为了绑定block，target</span><br><span class="line">dou._dc &#x3D; _dispatch_async_redirect_wrap(dl, dou);</span><br><span class="line">&#125; else if (!dou._dc-&gt;dc_ctxt) &#123;</span><br><span class="line">   &#x2F;&#x2F; 如果没有实现，赋值一个</span><br><span class="line">dou._dc-&gt;dc_ctxt &#x3D; (void *)</span><br><span class="line">(uintptr_t)_dispatch_queue_autorelease_frequency(dl);</span><br><span class="line">&#125;</span><br><span class="line">   &#x2F;&#x2F; 这里指向target</span><br><span class="line">dispatch_queue_t dq &#x3D; dl-&gt;do_targetq;</span><br><span class="line">if (!qos) qos &#x3D; _dispatch_priority_qos(dq-&gt;dq_priority);</span><br><span class="line">&#x2F;&#x2F; 又来了一个dx_push</span><br><span class="line">dx_push(dq, dou, qos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里就有疑惑了，上一步刚执行了`dx_push·，怎么这里有来了一个？</p><p>其实就好比Person继承自NSObject，比如实现init方法，会通过isa指向父类，调用父类的方法，这里也是一样的，通过do_targetq指向父类，执行父类的方法。父类就是<code>_dispatch_root_queue_push</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">_dispatch_root_queue_push(dispatch_queue_global_t rq, dispatch_object_t dou,</span><br><span class="line">dispatch_qos_t qos)</span><br><span class="line">&#123;</span><br><span class="line">#if DISPATCH_USE_KEVENT_WORKQUEUE</span><br><span class="line">dispatch_deferred_items_t ddi &#x3D; _dispatch_deferred_items_get();</span><br><span class="line">&#x2F;&#x2F; 这里不是重点内容，不需要看</span><br><span class="line">if (unlikely(ddi &amp;&amp; ddi-&gt;ddi_can_stash)) &#123;...&#125;</span><br><span class="line">#endif</span><br><span class="line">#if HAVE_PTHREAD_WORKQUEUE_QOS</span><br><span class="line">if (_dispatch_root_queue_push_needs_override(rq, qos)) &#123;</span><br><span class="line">return _dispatch_root_queue_push_override(rq, dou, qos);</span><br><span class="line">&#125;</span><br><span class="line">#else</span><br><span class="line">(void)qos;</span><br><span class="line">#endif</span><br><span class="line">_dispatch_root_queue_push_inline(rq, dou, dou, 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点也就是在<code>_dispatch_root_queue_push_inline</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">static inline void</span><br><span class="line">_dispatch_root_queue_push_inline(dispatch_queue_global_t dq,</span><br><span class="line">dispatch_object_t _head, dispatch_object_t _tail, int n)</span><br><span class="line">&#123;</span><br><span class="line">struct dispatch_object_s *hd &#x3D; _head._do, *tl &#x3D; _tail._do;</span><br><span class="line">if (unlikely(os_mpsc_push_list(os_mpsc(dq, dq_items), hd, tl, do_next))) &#123;</span><br><span class="line">return _dispatch_root_queue_poke(dq, n, 0);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个函数内部执行<code>_dispatch_root_queue_poke</code>，这个函数内部其实也就是一个<code>_dispatch_root_queue_poke_slow</code>方法。是整个dispatch中相当重要的一环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">static void</span><br><span class="line">_dispatch_root_queue_poke_slow(dispatch_queue_global_t dq, int n, int floor) &#123;</span><br><span class="line">...</span><br><span class="line">&#x2F;&#x2F; 这里执行跟类queue的初始化，内部是一个dispatch_once，只会初始化一次。单利，下一章介绍</span><br><span class="line">_dispatch_root_queues_init();</span><br><span class="line">...</span><br><span class="line">&#x2F;&#x2F; 如果是Global类型的函数，直接返回了。</span><br><span class="line">if (dx_type(dq) &#x3D;&#x3D; DISPATCH_QUEUE_GLOBAL_ROOT_TYPE)</span><br><span class="line">#endif</span><br><span class="line">&#123;</span><br><span class="line">_dispatch_root_queue_debug(&quot;requesting new worker thread for global &quot;</span><br><span class="line">&quot;queue: %p&quot;, dq);</span><br><span class="line">r &#x3D; _pthread_workqueue_addthreads(remaining,</span><br><span class="line">_dispatch_priority_to_pp_prefer_fallback(dq-&gt;dq_priority));</span><br><span class="line">(void)dispatch_assume_zero(r);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#x2F;&#x2F; 这中间省略的代码是判断remaining数，也就是需要创建的线程数。</span><br><span class="line">do &#123;</span><br><span class="line">_dispatch_retain(dq); &#x2F;&#x2F; released in _dispatch_worker_thread</span><br><span class="line">&#x2F;&#x2F; 循环创建线程</span><br><span class="line">while ((r &#x3D; pthread_create(pthr, attr, _dispatch_worker_thread, dq))) &#123;</span><br><span class="line">if (r !&#x3D; EAGAIN) &#123;</span><br><span class="line">(void)dispatch_assume_zero(r);</span><br><span class="line">&#125;</span><br><span class="line">_dispatch_temporary_resource_shortage();</span><br><span class="line">&#125;</span><br><span class="line">&#125; while (--remaining);</span><br><span class="line">...</span><br><span class="line">&#125; while (!os_atomic_cmpxchgv2o(dq, dgq_thread_pool_size, t_count,</span><br><span class="line">t_count - remaining, &amp;t_count, acquire));</span><br></pre></td></tr></table></figure><p>这个是GCD内部相当重点的一个点，首先进行root_queues的初始化，然后创建线程来执行任务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_dispatch_root_queues_init();</span><br><span class="line"></span><br><span class="line">_dispatch_root_queues_init(void)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_once_f(&amp;_dispatch_root_queues_pred, NULL,</span><br><span class="line">_dispatch_root_queues_init_once);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化函数内部调用的<code>dispatch_once_f</code>，只会执行一次，这一内容，下一章会有介绍。<code>_dispatch_root_queues_init_once</code>重点要看的是这个内部是个啥。</p><p><code>_dispatch_root_queues_init_once</code>的内部实现代码就不放出来了，太长了，主要的作用就是创建与线程直接的依赖，同时关联线程的回调方法<code>_dispatch_worker_thread2</code>。</p><p>root_queues初始化完成之后，再创建线程，但是内部是怎么调用block实现的，下一章有介绍。</p><p>接下来，我们返回到<code>_dispatch_lane_concurrent_push</code>这里，也就是连续的<code>dq_push</code>之后，最终会执行<code>_dispatch_lane_push</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">_dispatch_lane_push(dispatch_lane_t dq, dispatch_object_t dou,</span><br><span class="line">dispatch_qos_t qos)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_wakeup_flags_t flags &#x3D; 0;</span><br><span class="line">struct dispatch_object_s *prev;</span><br><span class="line"></span><br><span class="line">if (unlikely(_dispatch_object_is_waiter(dou))) &#123;</span><br><span class="line">return _dispatch_lane_push_waiter(dq, dou._dsc, qos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch_assert(!_dispatch_object_is_global(dq));</span><br><span class="line">qos &#x3D; _dispatch_queue_push_qos(dq, qos);</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">os_mpsc_push_update_prev(os_mpsc(dq, dq_items), prev, dou._do, do_next);</span><br><span class="line">if (flags) &#123;</span><br><span class="line">  &#x2F;&#x2F; 这里的重点是wakeup</span><br><span class="line">return dx_wakeup(dq, qos, flags);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而dx_wakeup与dx_push如出一辙，都是宏定义，根据当前队列进行赋值，这里就不细说了，直接选择root类型的方法。</p><p>由于代码巨大，这里直接放了截图。</p><p><img src="wakeup.jpg" alt=""></p><p>最后执行的是wakeup，要保持线程是清醒的，其实就是为了保活。直到block执行完毕。没有target没有上一层之后，执行release操作。</p><p>这个也就是dispatch_async的实现。下一章会继续block是如何调用的。</p><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><ol><li><p>GCD的介绍</p></li><li><p>同步、异步函数的介绍</p></li><li><p>串行队列、并发队列</p></li><li><p>函数与队列的4种组合，以及面试题</p><ol><li>并发不会等待一个任务执行完成才执行。</li><li>串行会等待一个任务执行完毕才执行。</li><li>异步函数下，不管是串行队列还是并行队列，都不影响block块之外的任务执。因为block内部是在新开启的线程中执行的。</li><li>同步函数下，并行队列不受影响，因为并行不需要等待上一个任务执行完成。如果是串行队列，那在当前线程下会发生死锁。</li></ol></li><li><p>主队列dispatch_get_main_queue，全局队列dispatch_get_global_queue内部实现</p></li><li><p>dispatch_queue_create创建一个队列的原理</p></li><li><p>dispatch_async内部实现，异步会创建线程，然后进行weakup保活操作，block执行完成之后进行释放。</p></li></ol><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="https://opensource.apple.com/tarballs/libdispatch/" target="_blank" rel="noopener">libdispatch源文件</a><br>这里是用的是libdispatch-1271.40.12.tar.gz文件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;GCD简介&quot;&gt;&lt;a href=&quot;#GCD简介&quot; class=&quot;headerlink&quot; title=&quot;GCD简介&quot;&gt;&lt;/a&gt;GCD简介&lt;/h1&gt;&lt;p&gt;全称是 Grand Central Dispatch。底层为C语言，将任务添加到队列，并且指定执行任务的函数。GCD
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Hash</title>
    <link href="http://liujiaboy.github.io/2021/05/10/%E9%80%86%E5%90%91/Hash/"/>
    <id>http://liujiaboy.github.io/2021/05/10/%E9%80%86%E5%90%91/Hash/</id>
    <published>2021-05-10T09:38:40.000Z</published>
    <updated>2021-05-14T03:09:11.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="base64-补充"><a href="#base64-补充" class="headerlink" title="base64 补充"></a>base64 补充</h1><blockquote><p>Base64就是一种基于64个字符来表示二进制数据的方法。没6个比特为一个单元，</p></blockquote><p>具体可以查看<a href="https://zh.wikipedia.org/wiki/Base64" target="_blank" rel="noopener">base64的解释</a></p><p>64个字符包括 <code>A-Z a-z 0-9 + /</code>，再加上<code>=</code>用来补位，加上【等号】就是65个。<br>64个字符分别对应 <code>0 - 63</code> 这64个数字，64个数字对应着4个6位二进制数。</p><p><img src="base64.jpg" alt=""></p><p>下方代码是在iOS中的一种编码、解码方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;编码</span><br><span class="line">- (NSString *)base64Encode:(NSString *)string&#123;</span><br><span class="line">    NSData *data &#x3D; [string dataUsingEncoding:NSUTF8StringEncoding];</span><br><span class="line">    return [data base64EncodedStringWithOptions: 0];</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;解码</span><br><span class="line">- (NSString *)base64Decode:(NSString *)string&#123;</span><br><span class="line">    NSData *data &#x3D; [[NSData alloc] initWithBase64EncodedString:string options:0];</span><br><span class="line">    return [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>base64只适用于表示二进制文件。</li><li>base64编码后，文件数量变多，不使用与大型数据。</li><li>base64和数据一一对应，不安全。</li></ol><h1 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h1><p>Hash，一般翻译做“散列”，也有直接音译为“哈希”的，就是把任意长度的输入通过散列算法变换成固定长度的输出，该输出就是散列值。</p><p>这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，所以不可能从散列值来确定唯一的输入值。简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。</p><p>hash不是加密算法。</p><h2 id="Hash特点"><a href="#Hash特点" class="headerlink" title="Hash特点"></a>Hash特点</h2><ul><li>算法公开</li><li>对相同数据运算，得到的结果是一样的</li><li>对不同数据运算，得到的结果是定长的，如MD5得到的结果默认是128位,32个字符（16进制标识）。</li><li>无法逆运算</li><li>信息摘要，信息“指纹”，是用来做数据识别的</li></ul><h2 id="常见的散列算法"><a href="#常见的散列算法" class="headerlink" title="常见的散列算法"></a>常见的散列算法</h2><p>常见的就是MD5，SHA等等。</p><h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p>MD5消息摘要算法（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。</p><p>MD5由美国密码学家罗纳德·李维斯特（Ronald Linn Rivest）设计，于1992年公开，用以取代MD4算法。</p><p>1996年后被证实存在弱点，可以被加以破解，对于需要高度安全性的资料，专家一般建议改用其他算法。</p><p>2004年，证实MD5算法无法防止碰撞攻击，因此不适用于安全性认证，如SSL公开密钥认证或是数字签名等用途。</p><p>md5现常用于文件校验。</p><h3 id="SHA"><a href="#SHA" class="headerlink" title="SHA"></a>SHA</h3><blockquote><p>安全散列算法（英语：Secure Hash Algorithm，缩写为SHA）是一个密码散列函数家族，是FIPS所认证的安全散列算法。能计算出一个数字消息所对应到的，长度固定的字符串（又称消息摘要）的算法。且若输入的消息不同，它们对应到不同字符串的几率很高。</p></blockquote><p>SHA家族的算法分别为：</p><ol><li>SHA-0：1993年发布，是SHA-1的前身。</li><li>SHA-1：1995年发布，SHA-1在许多安全协议中广为使用，包括TLS、GnuPG、SSH、S/MIME和IPsec，是MD5的后继者。但SHA-1的安全性在2010年以后已经不被大多数的加密场景所接受。</li><li>SHA-2：2001年发布，包括SHA-224、SHA-256、SHA-384、SHA-512、SHA-512/224、SHA-512/256。SHA-2目前没有出现明显的弱点。虽然至今尚未出现对SHA-2有效的攻击，但它的算法跟SHA-1基本上仍然相似。</li><li>SHA-3：2015年正式发布，由于对MD5出现成功的破解，以及对SHA-0和SHA-1出现理论上破解的方法，NIST感觉需要一个与之前算法不同的，可替换的加密散列算法，也就是现在的SHA-3。</li></ol><h2 id="MD5-SHA对比"><a href="#MD5-SHA对比" class="headerlink" title="MD5 - SHA对比"></a>MD5 - SHA对比</h2><p><img src="hash.jpg" alt=""></p><h2 id="Hash-用途"><a href="#Hash-用途" class="headerlink" title="Hash 用途"></a>Hash 用途</h2><ul><li>用户密码加密</li><li>搜索引擎</li><li>版权</li><li>数字签名</li></ul><h3 id="密码加密逻辑："><a href="#密码加密逻辑：" class="headerlink" title="密码加密逻辑："></a>密码加密逻辑：</h3><p>客户端在注册账号密码时，是必须加密的，但是怎么能保证密码的安全，那最好就是所有人都不知道，前后端都不知道密码，所以之前说的RSA加密就不行了，只要知道公钥或者私钥就可以破解了。</p><p>常用的加密方式有以下4种：</p><ol><li>直接使用MD5</li><li>MD5加盐</li><li>HMAC加密</li><li>在HAC加密方案上添加时间戳等方案</li></ol><h4 id="直接使用MD5"><a href="#直接使用MD5" class="headerlink" title="直接使用MD5"></a>直接使用MD5</h4><p>将密码等重要的文本内容直接使用md5进行加密，但是md5现在也不安全，大部分md5加密之后都可以被破解。<a href="https://www.cmd5.com/" target="_blank" rel="noopener">md5在线破解</a></p><p>md5现在常用于文件校验。</p><p>所以有了第二种方式：</p><h4 id="MD5加盐"><a href="#MD5加盐" class="headerlink" title="MD5加盐"></a>MD5加盐</h4><p>直接使用md5加密不算安全，那么就在文本上直接拼接一串字符串（盐、salt值），这样就可以防止被破解，但是如果添加的字符串泄露了，也通用会造成数据泄露的风险。</p><p>所以通常情况下，这个salt值都是由服务端生成的，每一个用户过来就对应的生成一个salt值，这种方式已经比第一种安全很多了。</p><p>那如果用户更换了设备，就需要先拿到salt值，然后再次输入密码，还是有可能被暴利破解。</p><p>所以有了第三种方式：</p><h4 id="HMAC加密"><a href="#HMAC加密" class="headerlink" title="HMAC加密"></a>HMAC加密</h4><p>HMAC被称为：<a href="https://zh.wikipedia.org/wiki/%E9%87%91%E9%91%B0%E9%9B%9C%E6%B9%8A%E8%A8%8A%E6%81%AF%E9%91%91%E5%88%A5%E7%A2%BC" target="_blank" rel="noopener">密钥散列消息认证码</a>。英语：Keyed-hash message authentication code），又称散列消息认证码（Hash-based message authentication code，缩写为HMAC）。</p><p>是一种通过特别计算方式之后产生的消息认证码（MAC），使用密码散列函数，同时结合一个加密密钥。它可以用来保证资料的完整性，同时可以用来作某个消息的身份验证。</p><p>通俗来讲，类似于我们现在的授权认证，比如当我们在新设备上登录微信，就需要老设备点击确认或者扫码操作，这种就是获取授权的一个操作。认证流程如下：</p><ol><li>先由客户端向服务器发出一个验证请求。</li><li>服务器接到此请求后生成一个随机数并通过网络传输给客户端（此为挑战）。</li><li>客户端将收到的随机数提供给ePass，由ePass使用该随机数与存储在ePass中的密钥进行HMAC-MD5运算并得到一个结果作为认证证据传给服务器（此为响应）。</li><li>与此同时，服务器也使用该随机数与存储在服务器数据库中的该客户密钥进行HMAC-MD5运算，如果服务器的运算结果与客户端传回的响应结果相同，则认为客户端是一个合法用户。</li></ol><p>这个过程是通过Hash运算得到一个值进行服务器端的验证。这种方式已经基于完美了，但还不够完美。</p><h4 id="HMAC-时间戳"><a href="#HMAC-时间戳" class="headerlink" title="HMAC+时间戳"></a>HMAC+时间戳</h4><p>如果非法分子使用这种授权，模拟用户登录，那就会有问题了。通常会加上时间戳验证，这个授权认证需要在某一个时间范围内进行，超过了时间就会失败。从而大大增加安全性。</p><h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><p>我们经常使用百度搜索、谷歌搜索也会，有时候搜索出来的东西都是一样的。比如：</p><p>搜索：<code>iOS NSString</code> 和 <code>NSString iOS</code>是一样的。首先对这两个进行md5加密，得到一个结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;iOS&quot; &#x3D; 1bdf605991920db11cbdf8508204c4eb</span><br><span class="line"></span><br><span class="line">&quot;NSString&quot; &#x3D; e4263c36f49e2d937749bb3c6c7bbadb</span><br></pre></td></tr></table></figure><p>这两个字符通过md5加密之后，相加得到的一个结果，所以不管顺序如何，得到的结果都是一样的。</p><h3 id="版权问题"><a href="#版权问题" class="headerlink" title="版权问题"></a>版权问题</h3><p>比如图片类型的网站，上传的第一份图片，就会生成一份原始的hash值。之后其他人下载之后使用，但是他们下载的不会是源文件，而是平台在内部做了处理重新生成的。</p><p>如果有人说我这个是正版的图片，你这个是盗版的，那就用原始文件进行对比处理。</p><h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><blockquote><p><a href="https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D" target="_blank" rel="noopener">数字签名</a>（又称公钥数字签名）是只有信息的发送者才能产生的别人无法伪造的一段数字串，这段数字串同时也是对信息的发送者发送信息真实性的一个有效证明。它是一种类似写在纸上的普通的物理签名，但是使用了公钥加密领域的技术来实现的，用于鉴别数字信息的方法。一套数字签名通常定义两种互补的运算，一个用于签名，另一个用于验证。</p><p>数字签名是非对称密钥加密技术与数字摘要技术的应用。</p></blockquote><h4 id="数字签名的实现"><a href="#数字签名的实现" class="headerlink" title="数字签名的实现"></a>数字签名的实现</h4><p>数字签名算法是依靠公钥加密技术来实现的。在公钥加密技术里，每一个使用者有一对密钥：一把公钥和一把私钥。公钥可以自由发布，但私钥则秘密保存；还有一个要求就是要让通过公钥推算出私钥的做法不可能实现。</p><p>普通的数字签名算法包括三种算法：</p><ol><li>一种密码生成算法</li><li>标记算法</li><li>验证算法</li></ol><p>通常情况下，使用Hash+RSA的方式实现数字签名。需要注意的是，私钥是保密的，公钥可以自由发布。</p><p><img src="signature.jpg" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>base64部分的补充</li><li>RSA终端命令</li><li>RSA特点<ul><li>RSA安全系数非常高（整个业务逻辑非常安全）</li><li>加密效率非常低（不能做大数据加密）</li><li>用来加密关键数据</li></ul></li><li>HASH特点<ul><li>不可逆运算</li><li>相同的数据，结果相同</li><li>不同的数据，长度相同</li><li>一般用于做数据的识别（密码、版权）</li></ul></li><li>md5及SHA</li><li>hash的应用：<ul><li>密码加密（HMAC + 时间戳）</li><li>数字签名<ul><li>算法：RSA+HASH</li><li>目的：验证数据的完整性，不被篡改</li><li>步奏：1.原始数据的hash值，2.使用rsa加密hash值，3.将原始数据+数字签名一起打包发送传递。</li></ul></li></ul></li></ul><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8" target="_blank" rel="noopener">散列函数</a><br><a href="https://zh.wikipedia.org/wiki/SHA%E5%AE%B6%E6%97%8F" target="_blank" rel="noopener">SHA家族</a><br><a href="https://www.cmd5.com/" target="_blank" rel="noopener">md5在线破解</a><br><a href="https://zh.wikipedia.org/wiki/%E9%87%91%E9%91%B0%E9%9B%9C%E6%B9%8A%E8%A8%8A%E6%81%AF%E9%91%91%E5%88%A5%E7%A2%BC" target="_blank" rel="noopener">密钥散列消息认证码</a><br><a href="https://zh.wikipedia.org/wiki/%E6%95%B8%E4%BD%8D%E7%B0%BD%E7%AB%A0" target="_blank" rel="noopener">数字签名-维基百科</a><br><a href="https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D" target="_blank" rel="noopener">数字签名-百度百科</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;base64-补充&quot;&gt;&lt;a href=&quot;#base64-补充&quot; class=&quot;headerlink&quot; title=&quot;base64 补充&quot;&gt;&lt;/a&gt;base64 补充&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Base64就是一种基于64个字符来表示二进制数据的方法。
      
    
    </summary>
    
    
      <category term="逆向" scheme="http://liujiaboy.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="ARM汇编" scheme="http://liujiaboy.github.io/tags/ARM%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>内存5大分区</title>
    <link href="http://liujiaboy.github.io/2021/05/09/OC%E5%8E%9F%E7%90%86/%E5%86%85%E5%AD%985%E5%A4%A7%E5%88%86%E5%8C%BA/"/>
    <id>http://liujiaboy.github.io/2021/05/09/OC%E5%8E%9F%E7%90%86/%E5%86%85%E5%AD%985%E5%A4%A7%E5%88%86%E5%8C%BA/</id>
    <published>2021-05-09T14:23:17.000Z</published>
    <updated>2021-05-10T08:35:30.639Z</updated>
    
    <content type="html"><![CDATA[<p>内存主要分为5大区：</p><ol><li>栈 stack</li><li>对 heap</li><li>全局区/静态区</li><li>常量区</li><li>代码区</li></ol><p><img src="memory.jpg" alt=""></p><p>这张图详细的介绍了5大分区的分配情况。</p><p>栈是从高地址向低地址开始分配，了解汇编的同学应该知道栈顶和栈底，这两个寄存器，栈顶处与低地址区，栈底处于高地址区。</p><p>堆是从低地址向高地址开始分配。在堆中获取数据相对比较麻烦，所以都是在栈中开辟空间指向堆。</p><p>当栈和堆有一方不断开辟空间，导致两个处于临界点时，就会发生堆栈溢出。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;内存主要分为5大区：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;栈 stack&lt;/li&gt;
&lt;li&gt;对 heap&lt;/li&gt;
&lt;li&gt;全局区/静态区&lt;/li&gt;
&lt;li&gt;常量区&lt;/li&gt;
&lt;li&gt;代码区&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;memory.jpg&quot; alt=&quot;&quot;&gt;&lt;/p
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>多线程</title>
    <link href="http://liujiaboy.github.io/2021/05/08/OC%E5%8E%9F%E7%90%86/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://liujiaboy.github.io/2021/05/08/OC%E5%8E%9F%E7%90%86/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-05-08T00:40:32.000Z</published>
    <updated>2021-05-10T08:35:30.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><h2 id="1-什么是线程"><a href="#1-什么是线程" class="headerlink" title="1. 什么是线程"></a>1. 什么是线程</h2><p><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/AboutThreads/AboutThreads.html#//apple_ref/doc/uid/10000057i-CH6-SW2" target="_blank" rel="noopener">官方文档：线程编程指南</a></p><blockquote><p>线程是在应用程序内部实现多个执行路径的相对轻量的方法。在系统级别，程序并排运行，系统根据每个程序的需求和其他程序的需求为每个程序分配执行时间。但是，每个程序中都存在一个或多个执行线程，这些线程可用于同时或以几乎同时的方式执行不同的任务。系统本身实际上管理着这些执行线程，调度它们在可用内核上运行，并根据需要抢先中断它们以允许其他线程运行。</p></blockquote><ul><li>多个线程可以提高应用程序的感知响应能力。</li><li>多线程可以提高应用程序在多核系统上的实时性能。</li></ul><h2 id="2-什么是进程"><a href="#2-什么是进程" class="headerlink" title="2. 什么是进程"></a>2. 什么是进程</h2><p>进程是指在系统中正在运行的一个应用程序。每个进程之间是独立的，每个进程均运行在其专用的且受保护的内存空间内。</p><h2 id="3-两者的关系"><a href="#3-两者的关系" class="headerlink" title="3. 两者的关系"></a>3. 两者的关系</h2><ul><li>线程是进程的基本执行单元，一个进程的所有任务都在线程中执行。</li><li>进程要想执行任务，必须得有线程，进程至少要有一条线程。</li><li>程序启动会默认开启一条线程，这条线程被称为主线程或 UI 线程。</li><li>同一进程的线程共享本进程的地址空间，而进程之间则时独立的。</li><li>同一进程内的线程共享进程的资源，如：内存、I/O、CPU等，而进程之间是独立的。</li><li>一个进程崩溃后，保护模式下，不会对其他进程产生影响。一个线程崩溃则整个进程死掉。进程比线程健壮。</li><li>进程切换时，消耗的资源大，效率低。设计频繁切换时，是哦那个线程好于进程。</li><li>线程不能独立执行，必须依存于进程（应用程序）。</li><li>线程时处理器调度的基本单位，进程不是。</li><li>线程没有地址空间，线程保护在进程地址空间中。</li></ul><h2 id="4-多线程的优点"><a href="#4-多线程的优点" class="headerlink" title="4. 多线程的优点"></a>4. 多线程的优点</h2><ul><li>能适当提高程序的执行效率</li><li>能适当提高资源的利用率(CPU，内存)</li><li>线程上的任务执行完成后，线程会自动销毁</li></ul><h2 id="5-多线程的缺点"><a href="#5-多线程的缺点" class="headerlink" title="5. 多线程的缺点"></a>5. 多线程的缺点</h2><ul><li>开启线程需要占用一定的内存空间(默认情况下，每一个线程都占512KB) </li><li>如果开启大量的线程，会占用大量的内存空间，降低程序的性能</li><li>线程越多，CPU 在调用线程上的开销就越大</li><li>程序设计更加复杂，比如线程间的通信、多线程的数据共享</li><li>多线程操作增加代码复杂度</li></ul><h2 id="6-时间片"><a href="#6-时间片" class="headerlink" title="6. 时间片"></a>6. 时间片</h2><p>CPU在多个任务之间进行快速的切换，这个时间间隔就是时间片。</p><ul><li>单核CPU同一时间，CPU只能处理1个线程（只能有一个线程执行）</li><li>多线程同时执行，是CPU快速在多个线程直接的切换，因为CPU调度线程的时间足够快，就造成了多线程的”同时“执行的效果。</li><li>如果线程数非常多，CPU会在N个线程之间切换，消耗大量的CPU资源，线程的执行效率会降低。</li></ul><h2 id="7-线程的声明周期"><a href="#7-线程的声明周期" class="headerlink" title="7. 线程的声明周期"></a>7. 线程的声明周期</h2><p><img src="thread-life.jpg" alt=""></p><h2 id="8-线程池的调度"><a href="#8-线程池的调度" class="headerlink" title="8. 线程池的调度"></a>8. 线程池的调度</h2><p><img src="thread-used.jpg" alt=""></p><p>4种饱和策略</p><ul><li>AbortPolicy 直接抛出RejectedExecutionExeception异常来阻止系统正常运行 </li><li>CallerRunsPolicy 将任务回退到调用者</li><li>DisOldestPolicy 丢掉等待最久的任务</li><li>DisCardPolicy 直接丢弃任务</li></ul><p>那么这里有一个问题，是不是创建的线程优先级越高，执行的就越快呢？</p><p>答案是不一定，需要根据线程要使用的资源，已经线程池的饱和程度来判断。</p><ol><li>如果这个线程需要很大的资源，比如处理几个G和处理几KB效率肯定是不一样的。</li><li>如果线程池处于饱和状态，并且都在执行状态，是没有办法把正在执行的线程取消掉的。</li></ol><p>这就需要锁来解决，</p><h1 id="多线程解决方案："><a href="#多线程解决方案：" class="headerlink" title="多线程解决方案："></a>多线程解决方案：</h1><p>常见的多线程有pthread、NSThread、GCD、NSOperation：</p><p><img src="" alt=""></p><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><p>两个人买票，同一时间相同的操作，A买的时候有100张，B买的时候也有100张，那AB都买完的时候应该只剩下998张才对，但是如果不处理的情况下，会出现资源抢占的问题。</p><p>这就需要锁来解决。</p><h2 id="1-atomic与nonatomic"><a href="#1-atomic与nonatomic" class="headerlink" title="1. atomic与nonatomic"></a>1. atomic与nonatomic</h2><p>atomic：原子属性(线程安全)，针对多线程设计的，使用属性时默认是atomic，保证同一时间只有一个线程能够写入(但是同一个时间多个线程都可以取值)。atomic本身就有一把锁(自旋锁) 单写多读:单个线程写入，多个线程可以读取。<br>nonatomic：非原子属性，非线程安全，适合内存小的移动设备。</p><blockquote><p>iOS开发建议：<br>所有属性都声明为 nonatomic<br>尽量避免多线程抢夺同一块资源，尽量将加锁、资源抢夺的业务逻辑交给服务器端处理，减小移动客户端的压力</p></blockquote><p>自旋锁 与 互斥锁的区别</p><p>两个都是进行同步操作而产生的。</p><p>自旋锁：发现其他线程在执行，当前线程会一直询问（忙等），直到当前线程开始执行。消耗性能比较高。适用于任务复杂度较低的。<br>互斥锁：发现其他线程在执行，当前线程即刻进入休眠（就绪状态），已知等待被唤醒执行。对于任务复杂度较高，资源较大使用互斥锁。</p><p>之后会有详细的描述，这里只是引出相关内容。</p><h1 id="NSPort通信"><a href="#NSPort通信" class="headerlink" title="NSPort通信"></a>NSPort通信</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;1. 创建主线程的port</span><br><span class="line">&#x2F;&#x2F; 子线程通过此端口发送消息给主线程</span><br><span class="line">self.myPort &#x3D; [NSMachPort port];</span><br><span class="line">&#x2F;&#x2F;2. 设置port的代理回调对象</span><br><span class="line">self.myPort.delegate &#x3D; self;</span><br><span class="line">&#x2F;&#x2F;3. 把port加入runloop，接收port消息</span><br><span class="line">[[NSRunLoop currentRunLoop] addPort:self.myPort forMode:NSDefaultRunLoopMode];</span><br></pre></td></tr></table></figure><p>创建了NSPort之后，一定要加入到NSRunLoop中包活，否则没有效果。</p><ol><li>runloop与线程是一一对应的，一个runloop对应一个核心的线程，为什么说是核心 的，是因为runloop是可以嵌套的，但是核心的只能有一个，他们的关系保存在一个全局 的字典里。 </li><li>runloop是来管理线程的，当线程的runloop被开启后，线程会在执行完任务后进入休 眠状态，有了任务就会被唤醒去执行任务。 </li><li>runloop在第一次获取时被创建，在线程结束时被销毁。 </li><li>对于主线程来说，runloop在程序一启动就默认创建好了。 </li><li>对于子线程来说，runloop是懒加载的，只有当我们使用的时候才会创建，所以在子线 程用定时器要注意:确保子线程的runloop被创建，不然定时器不会回调。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;h2 id=&quot;1-什么是线程&quot;&gt;&lt;a href=&quot;#1-什么是线程&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是线程&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>KVO原理</title>
    <link href="http://liujiaboy.github.io/2021/05/08/OC%E5%8E%9F%E7%90%86/KVO%E5%8E%9F%E7%90%86/"/>
    <id>http://liujiaboy.github.io/2021/05/08/OC%E5%8E%9F%E7%90%86/KVO%E5%8E%9F%E7%90%86/</id>
    <published>2021-05-08T00:39:59.000Z</published>
    <updated>2021-05-10T11:35:47.470Z</updated>
    
    <content type="html"><![CDATA[<h1 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h1><p>官方文档：<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/10000177i" target="_blank" rel="noopener">Key-Value Observing</a></p><blockquote><p><b>Important:</b> In order to understand key-value observing, you must first understand key-value coding.</p></blockquote><p>在官方的文档中，有这么一句话，要理解KVO，必须先知道KVC。</p><h1 id="KVO的基本使用"><a href="#KVO的基本使用" class="headerlink" title="KVO的基本使用"></a>KVO的基本使用</h1><p>下面创建一个<code>Person</code>类，并添加几个属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">static void *PersonNameContext &#x3D; &amp;PersonNameContext;</span><br><span class="line"></span><br><span class="line">@interface Person : NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic, copy) NSString *name;</span><br><span class="line">@property (nonatomic, copy) NSString *nickName;</span><br><span class="line">@property (nonatomic, copy) NSString *fullName;</span><br><span class="line">@property (nonatomic, strong) NSMutableArray *mArray;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h2 id="1-简单使用"><a href="#1-简单使用" class="headerlink" title="1. 简单使用"></a>1. 简单使用</h2><p>KVO对实例变量是不起作用的。可以试一下，即使添加了set方法、添加了<code>didChangeValueForKey:</code>方法也不行，即使使用了KVC也监听不到。正常使用来说，还是针对属性。</p><h3 id="1-1-添加监听"><a href="#1-1-添加监听" class="headerlink" title="1.1 添加监听"></a>1.1 添加监听</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(nullable void *)context;</span><br></pre></td></tr></table></figure><p>被监听者进行调用，添加一个监听对象，监听某一个属性的变化。context是上下文，在官方文档中，推荐使用<code>context</code>，不使用这个，也可以使用<code>NULL</code>代替。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 当前对象监听person对象的name属性的变化</span><br><span class="line">[self.person addObserver:self forKeyPath:@&quot;name&quot; options:(NSKeyValueObservingOptionNew) context:NULL];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;[self.person addObserver:self forKeyPath:@&quot;name&quot; options:(NSKeyValueObservingOptionNew) context:PersonNameContext]</span><br></pre></td></tr></table></figure><h3 id="1-2-监听变化"><a href="#1-2-监听变化" class="headerlink" title="1.2 监听变化"></a>1.2 监听变化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change context:(void *)context &#123;</span><br><span class="line">    &#x2F;&#x2F;if (context &#x3D;&#x3D; PersonNameContext) &#123;&#125;</span><br><span class="line">    NSLog(@&quot;%@&quot;,change);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以通过<code>keyPath</code>来判断某一个属性发生变化，如果监听了多个对象，并且有相同的属性，则在这里会添加一堆判断条件，会使代码变得臃肿，所以还是推荐使用context来判断。</p><h3 id="1-3-移除KVO"><a href="#1-3-移除KVO" class="headerlink" title="1.3 移除KVO"></a>1.3 移除KVO</h3><p>添加了监听之后，再<code>dealloc</code>时一定要移除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(nullable void *)context API_AVAILABLE(macos(10.7), ios(5.0), watchos(2.0), tvos(9.0));</span><br><span class="line">- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;</span><br></pre></td></tr></table></figure><h2 id="2-KVO中属性依赖"><a href="#2-KVO中属性依赖" class="headerlink" title="2. KVO中属性依赖"></a>2. KVO中属性依赖</h2><p>比如我们要监听<code>fullName</code>属性的变化，当<code>name</code>和<code>nickName</code>中的一个发生变化时，都需要改变<code>fullName</code>的值，需要怎么处理？如果同时监听两个属性也不是不行，但是肯定还有其他更简便的方法。这就需要添加依赖。</p><p>在<code>Person.m</code>中实现如下方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+ (NSSet&lt;NSString *&gt; *)keyPathsForValuesAffectingValueForKey:(NSString *)key &#123;</span><br><span class="line">    </span><br><span class="line">    NSSet *keyPaths &#x3D; [super keyPathsForValuesAffectingValueForKey:key];</span><br><span class="line">    if ([key isEqualToString:@&quot;fullName&quot;]) &#123;</span><br><span class="line">        NSArray *affectingKeys &#x3D; @[@&quot;name&quot;, @&quot;nickName&quot;];</span><br><span class="line">        keyPaths &#x3D; [keyPaths setByAddingObjectsFromArray:affectingKeys];</span><br><span class="line">    &#125;</span><br><span class="line">    return keyPaths;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以实现依赖监听了，也不用实现重复代码。</p><h2 id="3-KVO监听数组"><a href="#3-KVO监听数组" class="headerlink" title="3. KVO监听数组"></a>3. KVO监听数组</h2><p>我们实现对person.mArray的监听，但是当我们执行添加和删除操作时，方法并不会触发监听事件。</p><p>这也就时开始的时候所说的，KVO是基于KVC的，这个时候，我们利用KVC的方式获取数组就可以实现了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; [self.person.mArray addObject:@&quot;1&quot;];</span><br><span class="line">[[self.person mutableArrayValueForKey:@&quot;mArray&quot;] addObject:@&quot;1&quot;];</span><br></pre></td></tr></table></figure><h2 id="4-自动、手动实现监听"><a href="#4-自动、手动实现监听" class="headerlink" title="4. 自动、手动实现监听"></a>4. 自动、手动实现监听</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 自动开关</span><br><span class="line">+ (BOOL)automaticallyNotifiesObserversForKey:(NSString *)key</span><br></pre></td></tr></table></figure><p>这是一个系统方法，只需要重写即可，默认是YES，如果针对某些key返回了NO，则需要手动实现set方法。没有实现则不会监听到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (void)setName:(NSString *)name&#123;</span><br><span class="line">    [self willChangeValueForKey:@&quot;name&quot;];</span><br><span class="line">    _name &#x3D; name;</span><br><span class="line">    [self didChangeValueForKey:@&quot;name&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="KVO底层原理"><a href="#KVO底层原理" class="headerlink" title="KVO底层原理"></a>KVO底层原理</h1><p>我们通过监听一个中的<code>name</code>属性的变化来判断监听前后会出现什么不同，来查看KVO的底层实现原理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">self.person &#x3D; [Person new];</span><br><span class="line"></span><br><span class="line">[self.person addObserver:self forKeyPath:@&quot;name&quot; options:(NSKeyValueObservingOptionNew) context:NULL];</span><br></pre></td></tr></table></figure><p>我们在这一行代码添加一个断点，分别通过lldb打印当前person的变化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(lldb) po self.person</span><br><span class="line">&lt;Person: 0x60000294a010&gt;</span><br><span class="line">(lldb) po self.person-&gt;isa</span><br><span class="line">Person</span><br><span class="line">(lldb) po [self.person class]</span><br><span class="line">Person</span><br><span class="line">(lldb) po [self.person superclass]</span><br><span class="line">NSObject</span><br><span class="line"></span><br><span class="line">(lldb) po self.person</span><br><span class="line">&lt;Person: 0x60000294a010&gt;</span><br><span class="line">(lldb) po self.person-&gt;isa</span><br><span class="line">NSKVONotifying_Person</span><br><span class="line">(lldb) po [self.person class]</span><br><span class="line">Person</span><br><span class="line">(lldb) po [self.person superclass]</span><br><span class="line">NSObject</span><br></pre></td></tr></table></figure><p>我们发现虽然两次<code>po self.person</code>输出的都是Person类，指向的内存地址也是一样的，两次输出class和superClass确都相同。但是<code>isa</code>的指向却是完全不同，竟然变成了<code>NSKVONotifying_Person</code>。</p><p>那<code>NSKVONotifying_Person</code>是什么呢？怎么会创建一个这个东西，难道是<code>Person</code>的子类？<br>猜测应该是Person的子类。</p><p>为什么两次输出class和superClass都是一样的？<br>我们猜测可能是改写了class方法。</p><p>带着疑问，我们输出一下监听前后的方法列表，已经两个class的superClass。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">-(void)viewDidLoad &#123;</span><br><span class="line">    &#x2F;&#x2F; 通过使用字符串的方式获取Class</span><br><span class="line">    Class cls1 &#x3D; class_getSuperclass(objc_getClass(&quot;Person&quot;));</span><br><span class="line">    [self printClassAllMethod:objc_getClass(&quot;Person&quot;)];</span><br><span class="line">    NSLog(@&quot;cls1 &#x3D; %@&quot;, cls1);</span><br><span class="line">        </span><br><span class="line">    self.person &#x3D; [[Person alloc] init];</span><br><span class="line">    [self.person addObserver:self forKeyPath:@&quot;name&quot; options:(NSKeyValueObservingOptionNew) context:NULL];</span><br><span class="line">        </span><br><span class="line">    [self printClassAllMethod:objc_getClass(&quot;NSKVONotifying_Person&quot;)];</span><br><span class="line">    Class cls2 &#x3D; class_getSuperclass(objc_getClass(&quot;NSKVONotifying_Person&quot;));</span><br><span class="line">    NSLog(@&quot;cls2 &#x3D; %@&quot;, cls2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 遍历方法-ivar-property</span><br><span class="line">- (void)printClassAllMethod:(Class)cls &#123;</span><br><span class="line">    NSLog(@&quot;----%@----&quot;, cls);</span><br><span class="line">    unsigned int count &#x3D; 0;</span><br><span class="line">    Method *methodList &#x3D; class_copyMethodList(cls, &amp;count);</span><br><span class="line">    for (int i &#x3D; 0; i&lt;count; i++) &#123;</span><br><span class="line">        Method method &#x3D; methodList[i];</span><br><span class="line">        SEL sel &#x3D; method_getName(method);</span><br><span class="line">        IMP imp &#x3D; class_getMethodImplementation(cls, sel);</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;%@-%p&quot;,NSStringFromSelector(sel),imp);</span><br><span class="line">    &#125;</span><br><span class="line">    free(methodList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 监听前</span><br><span class="line">KVODemo[74347:5007124] ----Person----</span><br><span class="line">KVODemo[74347:5007124] name-0x105ec6550</span><br><span class="line">KVODemo[74347:5007124] .cxx_destruct-0x105ec6580</span><br><span class="line">KVODemo[74347:5007124] setName:-0x105ec64f0</span><br><span class="line">KVODemo[74347:5007124] cls1 &#x3D; NSObject</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 监听后</span><br><span class="line">KVODemo[74347:5007124] ----NSKVONotifying_Person----</span><br><span class="line">KVODemo[74347:5007124] setName:-0x7fff207bab57</span><br><span class="line">KVODemo[74347:5007124] class-0x7fff207b9662</span><br><span class="line">KVODemo[74347:5007124] dealloc-0x7fff207b940b</span><br><span class="line">KVODemo[74347:5007124] _isKVOA-0x7fff207b9403</span><br><span class="line">KVODemo[74347:5007124] cls2 &#x3D; Person</span><br></pre></td></tr></table></figure><p>我们发现:</p><ul><li>监听前Person类中有3个方法，super是<code>NSObject</code></li><li>监听后Person类中有4个方法，super是<code>Person</code></li></ul><p>进一步验证了我们之前的猜测，<code>NSKVONotifying_Person</code>是<code>Person</code>的子类，并且重些了<code>setName:, class, dealloc</code>方法，因为地址都已经发生了变化。</p><p>打印一下对应的IMP地址，看看所在的调用栈：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(lldb) po (IMP)0x105ec64f0</span><br><span class="line">(KVODemo&#96;-[Person setName:] at Person.m:12)</span><br><span class="line"></span><br><span class="line">(lldb) po (IMP)0x7fff207bab57</span><br><span class="line">(Foundation&#96;_NSSetObjectValueAndNotify)</span><br><span class="line">return class_getSuperclass(object_getClass(self));</span><br></pre></td></tr></table></figure><p>也说明了，根本不是同一个IMP。当然<code>_NSSetObjectValueAndNotify</code>也不仅仅只有一种，使用<code>~ nm Foundation | grep ValueAndNotify</code>命令可以在iTerm2上查看对应的方法。比如：NSSetBoolValueAndNotify、NSSetIntValueAndNotify等等，根据当前属性的类型来判断的。</p><p>也正是因为重写了，<code>setName:</code>才会在外部调用时，person.name也会同时改变。<br>重新<code>class</code>方法，是为了不暴露<code>NSKVONotifying_Person</code>类，在外界调用时防止混淆。</p><p><img src="person-isa.jpg" alt=""></p><h1 id="自定义KVO"><a href="#自定义KVO" class="headerlink" title="自定义KVO"></a>自定义KVO</h1><p>根据上面的分析，如果自定义KVO的话，我们需要从下面几个方面入手：</p><ol><li><p>先判断key有没有set方法，有set方法才行。</p></li><li><p>动态生成子类：</p><ol><li>判断是否已经存在子类，没有创建新的子类。</li><li>注册类</li><li>添加class方法，重新class方法</li><li>添加setter方法，重新set方法，这里需要处理消息，发送给父类，通知修改值。</li></ol></li><li><p>修改isa指向</p></li><li><p>保存信息，方便回调。</p></li><li><p>remove时，重新设置isa指向父类。</p></li></ol><p>代码就不贴了，哪都有~</p><h1 id="通过GNU解析"><a href="#通过GNU解析" class="headerlink" title="通过GNU解析"></a>通过GNU解析</h1><p><a href="http://www.gnustep.org/resources/downloads.php" target="_blank" rel="noopener">gnu源码</a></p><p>gnu源码可以清晰的看到整体的流程，只是读起来可能会稍微费力一点，查看代码中的重要逻辑其实就可以了。</p><h1 id="FBKVOController"><a href="#FBKVOController" class="headerlink" title="FBKVOController"></a>FBKVOController</h1><p>稍微说一下这个，内部实现还是很值得学习的。</p><p>我们直接看源码实现：</p><p>首先创建一个<code>FBKVOController</code>类型的实例变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (instancetype)initWithObserver:(nullable id)observer retainObserved:(BOOL)retainObserved</span><br><span class="line">&#123;</span><br><span class="line">  self &#x3D; [super init];</span><br><span class="line">  if (nil !&#x3D; self) &#123;</span><br><span class="line">    _observer &#x3D; observer;</span><br><span class="line">    NSPointerFunctionsOptions keyOptions &#x3D; retainObserved ? NSPointerFunctionsStrongMemory|NSPointerFunctionsObjectPointerPersonality : NSPointerFunctionsWeakMemory|NSPointerFunctionsObjectPointerPersonality;</span><br><span class="line">    _objectInfosMap &#x3D; [[NSMapTable alloc] initWithKeyOptions:keyOptions valueOptions:NSPointerFunctionsStrongMemory|NSPointerFunctionsObjectPersonality capacity:0];</span><br><span class="line">    pthread_mutex_init(&amp;_lock, NULL);</span><br><span class="line">  &#125;</span><br><span class="line">  return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里会生成一个<code>NSMapTable</code>类型的数据，里面存放的是&lt;id, NSMutableSet&lt;_FBKVOInfo *&gt; *&gt;这种格式的数据。</p><p>然后走到添加监听的方法，这里也没啥好说的，就是创建了一个<code>_FBKVOInfo</code>，存放系统KVO需要的所有东西，重点再下一句代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (void)observe:(nullable id)object keyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options block:(FBKVONotificationBlock)block</span><br><span class="line">&#123;</span><br><span class="line">  NSAssert(0 !&#x3D; keyPath.length &amp;&amp; NULL !&#x3D; block, @&quot;missing required parameters observe:%@ keyPath:%@ block:%p&quot;, object, keyPath, block);</span><br><span class="line">  if (nil &#x3D;&#x3D; object || 0 &#x3D;&#x3D; keyPath.length || NULL &#x3D;&#x3D; block) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; create info</span><br><span class="line">  _FBKVOInfo *info &#x3D; [[_FBKVOInfo alloc] initWithController:self keyPath:keyPath options:options block:block];</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; observe object with info</span><br><span class="line">  [self _observe:object info:info];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，重点来了。会从map表中查找对应的object是否有对应的数据。然后与新创建的info进行比较，没有则添加到map表中。</p><p><code>_FBKVOSharedController</code>是一个单利，所有的观察者都通过它来进行监听，内部使用的系统的KVO。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">- (void)_observe:(id)object info:(_FBKVOInfo *)info</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; lock</span><br><span class="line">  pthread_mutex_lock(&amp;_lock);</span><br><span class="line"></span><br><span class="line">  NSMutableSet *infos &#x3D; [_objectInfosMap objectForKey:object];</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; check for info existence</span><br><span class="line">  _FBKVOInfo *existingInfo &#x3D; [infos member:info];</span><br><span class="line">  if (nil !&#x3D; existingInfo) &#123;</span><br><span class="line">    &#x2F;&#x2F; observation info already exists; do not observe it again</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; unlock and return</span><br><span class="line">    pthread_mutex_unlock(&amp;_lock);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; lazilly create set of infos</span><br><span class="line">  if (nil &#x3D;&#x3D; infos) &#123;</span><br><span class="line">    infos &#x3D; [NSMutableSet set];</span><br><span class="line">    [_objectInfosMap setObject:infos forKey:object];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; add info and oberve</span><br><span class="line">  [infos addObject:info];</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; unlock prior to callout</span><br><span class="line">  pthread_mutex_unlock(&amp;_lock);</span><br><span class="line"></span><br><span class="line">  [[_FBKVOSharedController sharedController] observe:object info:info];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在系统方法接收到改变时，会通过block、方法或者系统方法来返回数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (void)observeValueForKeyPath:(nullable NSString *)keyPath</span><br><span class="line">                      ofObject:(nullable id)object</span><br><span class="line">                        change:(nullable NSDictionary&lt;NSString *, id&gt; *)change</span><br><span class="line">                       context:(nullable void *)context</span><br></pre></td></tr></table></figure><p>最后就是移除。需要注意的是，添加的时候是新创建了一个info，移除的时候，为啥也是新创建了一个info？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (void)unobserve:(nullable id)object keyPath:(NSString *)keyPath</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; create representative info</span><br><span class="line">  _FBKVOInfo *info &#x3D; [[_FBKVOInfo alloc] initWithController:self keyPath:keyPath];</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; unobserve object property</span><br><span class="line">  [self _unobserve:object info:info];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_unobserve:info:</code>的内部实现与添加的时候有点类似，都是通过map去找对应的<code>_FBKVOInfo</code>。那新创建一个info能起到移除的效果吗？答案是肯定的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">- (void)_unobserve:(id)object info:(_FBKVOInfo *)info</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; lock</span><br><span class="line">  pthread_mutex_lock(&amp;_lock);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; get observation infos</span><br><span class="line">  NSMutableSet *infos &#x3D; [_objectInfosMap objectForKey:object];</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; lookup registered info instance</span><br><span class="line">  _FBKVOInfo *registeredInfo &#x3D; [infos member:info];</span><br><span class="line"></span><br><span class="line">  if (nil !&#x3D; registeredInfo) &#123;</span><br><span class="line">    [infos removeObject:registeredInfo];</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; remove no longer used infos</span><br><span class="line">    if (0 &#x3D;&#x3D; infos.count) &#123;</span><br><span class="line">      [_objectInfosMap removeObjectForKey:object];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; unlock</span><br><span class="line">  pthread_mutex_unlock(&amp;_lock);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; unobserve</span><br><span class="line">  [[_FBKVOSharedController sharedController] unobserve:object info:registeredInfo];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为创建的临时变量info，是通过NSMutableSet获取<code>member</code>来获取的，是怎么获取到的。</p><blockquote><p>Each element of the set is checked for equality with object until a match is found or the end of the set is reached. Objects are considered equal if isEqual: returns YES.</p></blockquote><p><code>member:</code>方法是通过<code>isEqual:</code>来判断是否是对应的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;_FBKVOInfo</span><br><span class="line">- (NSUInteger)hash</span><br><span class="line">&#123;</span><br><span class="line">  return [_keyPath hash];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)isEqual:(id)object</span><br><span class="line">&#123;</span><br><span class="line">  if (nil &#x3D;&#x3D; object) &#123;</span><br><span class="line">    return NO;</span><br><span class="line">  &#125;</span><br><span class="line">  if (self &#x3D;&#x3D; object) &#123;</span><br><span class="line">    return YES;</span><br><span class="line">  &#125;</span><br><span class="line">  if (![object isKindOfClass:[self class]]) &#123;</span><br><span class="line">    return NO;</span><br><span class="line">  &#125;</span><br><span class="line">  return [_keyPath isEqualToString:((_FBKVOInfo *)object)-&gt;_keyPath];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写了<code>hash</code>方法和<code>isEqual:</code>方法，这样就可以直接通过member获取了。这源码的设计思路简直爽的一批<del>~</del>网上找到FBKVO流程图：</p><p><img src="FBKVOController.png" alt="网上找到FBKVO流程图"></p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ol><li>KVO的变量依赖</li><li>KVO的原理：<ol><li>动态生成子类<code>NSKVONotifying_A</code></li><li>注册类</li><li>动态添加class方法，返回父类</li><li>动态添加set方法，消息回传给父类，通知修改值</li><li>修改isa指向子类</li><li>移除KVO，修改isa执行父类</li></ol></li><li>GNU源码</li><li>FBKVOController源码设计思路。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;KVO&quot;&gt;&lt;a href=&quot;#KVO&quot; class=&quot;headerlink&quot; title=&quot;KVO&quot;&gt;&lt;/a&gt;KVO&lt;/h1&gt;&lt;p&gt;官方文档：&lt;a href=&quot;https://developer.apple.com/library/archive/document
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>KVC原理</title>
    <link href="http://liujiaboy.github.io/2021/05/08/OC%E5%8E%9F%E7%90%86/KVC%E5%8E%9F%E7%90%86/"/>
    <id>http://liujiaboy.github.io/2021/05/08/OC%E5%8E%9F%E7%90%86/KVC%E5%8E%9F%E7%90%86/</id>
    <published>2021-05-08T00:39:49.000Z</published>
    <updated>2021-05-10T08:35:30.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="KVC"><a href="#KVC" class="headerlink" title="KVC"></a>KVC</h1><p>官方文档：<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/index.html#//apple_ref/doc/uid/10000107-SW1" target="_blank" rel="noopener">About Key-Value Coding</a></p><blockquote><p>Key-value coding is a mechanism enabled by the NSKeyValueCoding informal protocol that objects adopt to provide indirect access to their properties. When an object is key-value coding compliant, its properties are addressable via string parameters through a concise, uniform messaging interface. This indirect access mechanism supplements the direct access afforded by instance variables and their associated accessor methods.</p></blockquote><p>键值编码是由<code>NSKeyValueCoding</code>非正式协议启用的一种机制，对象采用这种机制来提供对其属性的间接访问。当对象是键值编码兼容的对象时，可以通过简洁，统一的消息传递接口通过字符串参数来访问其属性。这种间接访问机制补充了实例变量及其关联的访问器方法提供的直接访问。</p><h1 id="KVC-API"><a href="#KVC-API" class="headerlink" title="KVC - API"></a>KVC - API</h1><h2 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1. 常用方法"></a>1. 常用方法</h2><ul><li><p>获取key对应的value：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (nullable id)valueForKey:(NSString *)key;</span><br></pre></td></tr></table></figure></li><li><p>通过key来设置value：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (void)setValue:(nullable id)value forKey:(NSString *)key;</span><br></pre></td></tr></table></figure></li><li><p>通过路径取值，一般情况下是model1中有一个model2，获取model2的属性值。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (nullable id)valueForKeyPath:(NSString *)keyPath;</span><br></pre></td></tr></table></figure></li><li><p>获取对应路径的值，一般情况下是model1中有一个model2，设置model2的属性值。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (void)setValue:(nullable id)value forKeyPath:(NSString *)keyPath;</span><br></pre></td></tr></table></figure></li><li><p>获取一个可变类型：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (NSMutableArray *)mutableArrayValueForKey:(NSString *)key;</span><br><span class="line"></span><br><span class="line">- (NSMutableSet *)mutableSetValueForKey:(NSString *)key;</span><br></pre></td></tr></table></figure></li><li><p>默认返回YES，如果当前没有设置key对应的属性（没有找到set<key>方法），会按照_key, _iskey, key, iskey的顺序搜索变量。如果返回NO，则不查询。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ (BOOL)accessInstanceVariablesDirectly;</span><br></pre></td></tr></table></figure></li><li><p>如果你在SetValue方法时面给Value传nil，则会调用这个方法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (void)setNilValueForKey:(NSString *)key;</span><br></pre></td></tr></table></figure></li><li><p>如果Key不存在，且KVC无法搜索到任何和Key有关的字段或者属性，则会调用这个方法，默认是抛出异常。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (nullable id)valueForUndefinedKey:(NSString *)key;</span><br><span class="line"></span><br><span class="line">- (void)setValue:(nullable id)value forUndefinedKey:(NSString *)key;</span><br></pre></td></tr></table></figure></li><li><p>KVC提供属性值正确性验证的API，它可以用来检查set的值是否正确、为不正确的值做一个替换值或者拒绝设置新值并返回错误原因。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)validateValue:(inout id __nullable * __nonnull)ioValue forKey:(NSString *)inKey error:(out NSError **)outError;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-set、get流程"><a href="#2-set、get流程" class="headerlink" title="2. set、get流程"></a>2. set、get流程</h2><p>声明一个Person类，声明4个变量。注意这里没有添加属性（添加属性默认会生成set、get方法），就是为了验证set、get流程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@interface Person : NSObject</span><br><span class="line">&#123;</span><br><span class="line">    NSString *_name;    &#x2F;&#x2F; 1.</span><br><span class="line">    NSString *_isName;  &#x2F;&#x2F; 2.</span><br><span class="line">    NSString *name;     &#x2F;&#x2F; 3.</span><br><span class="line">    NSString *isName;   &#x2F;&#x2F; 4.</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>调用<code>setValue:forKey</code>方法，然后打印</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Person *person &#x3D; [[Person alloc] init];</span><br><span class="line">&#x2F;&#x2F; KVC - 设置值的过程 setValue 分析调用过程</span><br><span class="line">[person setValue:@&quot;kvc&quot; forKey:@&quot;name&quot;];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 1.</span><br><span class="line">NSLog(@&quot;%@-%@-%@-%@&quot;,person-&gt;_name,person-&gt;_isName,person-&gt;name,person-&gt;isName);</span><br><span class="line">&#x2F;&#x2F; 2.</span><br><span class="line">&#x2F;&#x2F;NSLog(@&quot;%@-%@-%@&quot;,person-&gt;_isName,person-&gt;name,person-&gt;isName);</span><br><span class="line">&#x2F;&#x2F; 3.</span><br><span class="line">&#x2F;&#x2F;NSLog(@&quot;%@-%@&quot;,person-&gt;name,person-&gt;isName);</span><br><span class="line">&#x2F;&#x2F; 4.</span><br><span class="line">&#x2F;&#x2F;NSLog(@&quot;%@&quot;,person-&gt;isName);</span><br></pre></td></tr></table></figure><p>分别按照顺序1-2-3-4，每次注释一个变量，每次只执行一句<code>NSLog</code>，看看打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 1.</span><br><span class="line">kvc-(nill)-(nill)-(nill)</span><br><span class="line">&#x2F;&#x2F; 2.</span><br><span class="line">kvc-(nill)-(nill)</span><br><span class="line">&#x2F;&#x2F; 3.</span><br><span class="line">kvc-(nill)</span><br><span class="line">&#x2F;&#x2F; 4.</span><br><span class="line">kvc</span><br></pre></td></tr></table></figure><p>为了进一步验证，可以在<code>Person.m</code>中，实现对应的set和get方法，分别打断点，按照1-2-3-4的顺序分别注释，可以进一步验证，set、get的流程。</p><p><code>setValue:forKey:</code>：按照<code>set&lt;key&gt;, _set&lt;key&gt;, setIs&lt;key&gt;</code>进行设置。有一个执行，其他的不执行。</p><blockquote><p>注意：<code>_setIs&lt;key&gt;</code>这个方法不会执行。</p></blockquote><p><code>valueForKey</code>：按照<code>get&lt;key&gt;, &lt;key&gt;, is&lt;key&gt;, _&lt;key&gt;</code>顺序进行查找。有一个执行，不执行其他的。</p><p>这里有官方的设置key-value的流程：<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueCoding/SearchImplementation.html#//apple_ref/doc/uid/20000955-CJBBBFFA" target="_blank" rel="noopener">Accessor Search Patterns</a>，写的很详细。</p><h3 id="2-1-Get-流程"><a href="#2-1-Get-流程" class="headerlink" title="2.1 Get 流程"></a>2.1 Get 流程</h3><ol><li>按照访问方法<code>-get&lt;Key&gt;，-&lt;key&gt;，-is&lt;Key&gt;，-_&lt;key&gt;</code>的顺序进行查找，如果找到执行步奏【5】。否则执行步奏【2】。</li><li>在实例中搜索①<code>countOf&lt;Key&gt;</code>，②<code>objectIn&lt;Key&gt;AtIndex:</code>（与<code>NSArray</code>类定义的原始方法<code>&lt;key&gt;AtIndexes:</code>相对应）或③<code>objectsAtIndexes:</code>（与NSArray方法相对应）。如果找到①，再找到②或③中的一个，则创建一个响应所有NSArray方法的集合代理对象并将其返回。否则，请继续执行步骤【3】。</li><li>如果找到了①<code>countOf&lt;Key&gt;</code>，没有找到②或③，那么会去找<code>enumeratorOf&lt;Key&gt;</code>和<code>memberOf&lt;Key&gt;:</code>（对应NSSet类）。如果找到了所有三个方法，则创建一个响应所有NSSet方法的集合代理对象并将其返回。否则，请继续执行步骤【4】。</li><li>如果接收器的类方法<code>+(BOOL)accessInstanceVariablesDirectly</code>返回YES，则按照<code>_&lt;key&gt;，_is&lt;Key&gt;，&lt;key&gt;，is&lt;Key&gt;</code>的顺序搜索实例变量。如果找到，直接获取实例变量的值，然后继续执行步骤【5】。否则，继续执行步骤【6】。</li><li>如果获取到的变量是对象指针，则只需返回结果。<br> 如果该值是可以转换位<code>NSNumber</code>类型，则将其存储在NSNumber实例中并返回该实例。<br> 如果结果是<code>NSNumber</code>不支持的类型，请转换为<code>NSValue</code>对象并返回该对象。</li><li>如果其他所有方法均失败，则调用<code>valueForUndefinedKey:</code>。默认情况下会引发异常。</li></ol><h3 id="2-2-Set流程"><a href="#2-2-Set流程" class="headerlink" title="2.2 Set流程"></a>2.2 Set流程</h3><ol><li>按此顺序查找第一个名为<code>set&lt;Key&gt;:, _set&lt;Key&gt;:, setIsName:</code>的set方法。如果找到，调用它并完成。</li><li>如果没有找到，如果类方法<code>+(BOOL)accessInstanceVariablesDirectly</code>返回YES，则按照顺序<code>_&lt;key&gt;，_is&lt;Key&gt;，&lt;key&gt;，is&lt;Key&gt;</code>查找实例变量。如果找到，则直接对变量进行赋值。</li><li>如果步奏【1】和【2】都失败了，则调用<code>setValue:forUndefinedKey:</code>。默认情况下会引发异常。</li></ol><h1 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h1><h2 id="1-集合类型"><a href="#1-集合类型" class="headerlink" title="1. 集合类型"></a>1. 集合类型</h2><p>在<code>Person</code>类中，声明一个不可变数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, copy) NSArray *array;</span><br></pre></td></tr></table></figure><p>对不可变类型进行赋值时，可以使用<code>mutableArrayValueForKey</code>先获取一个可变数组，然后直接赋值就好。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">person.array &#x3D; @[@&quot;1&quot;,@&quot;2&quot;,@&quot;3&quot;];</span><br><span class="line">&#x2F;&#x2F; 修改数组</span><br><span class="line">&#x2F;&#x2F; person.array[0] &#x3D; @&quot;100&quot;;&#x2F;&#x2F; 这种方式不可用</span><br><span class="line">&#x2F;&#x2F; 1. 获取一个新的数组 - KVC 赋值</span><br><span class="line">NSArray *array &#x3D; [person valueForKey:@&quot;array&quot;];</span><br><span class="line">array &#x3D; @[@&quot;100&quot;,@&quot;2&quot;,@&quot;3&quot;];</span><br><span class="line">[person setValue:array forKey:@&quot;array&quot;];</span><br><span class="line">NSLog(@&quot;%@&quot;,[person valueForKey:@&quot;array&quot;]);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2. 使用mutableArrayValueForKey</span><br><span class="line">NSMutableArray *mArray &#x3D; [person mutableArrayValueForKey:@&quot;array&quot;];</span><br><span class="line">mArray[0] &#x3D; @&quot;200&quot;;</span><br><span class="line">NSLog(@&quot;%@&quot;,[person valueForKey:@&quot;array&quot;]);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2021-05-09 10:17:58.004460+0800 KVCDemo[70852:4744247] (</span><br><span class="line">    100,</span><br><span class="line">    2,</span><br><span class="line">    3</span><br><span class="line">)</span><br><span class="line">2021-05-09 10:17:58.005523+0800 KVCDemo[70852:4744247] (</span><br><span class="line">    200,</span><br><span class="line">    2,</span><br><span class="line">    3</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>如果声明的是一个可变数组，那通过<code>[person valueForKey:@&quot;mArray&quot;];</code>获取到的就是一个可变数组。</p><h2 id="2-集合类型set、get流程补充"><a href="#2-集合类型set、get流程补充" class="headerlink" title="2. 集合类型set、get流程补充"></a>2. 集合类型set、get流程补充</h2><p>直接上代码：这里使用的key是一个没有在类中声明的变量/属性<code>pens</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">person.arr &#x3D; @[@&quot;pen0&quot;, @&quot;pen1&quot;, @&quot;pen2&quot;, @&quot;pen3&quot;];</span><br><span class="line">&#x2F;&#x2F; 直接运行，在这里会发生crash</span><br><span class="line">NSArray *array &#x3D; [person valueForKey:@&quot;pens&quot;];</span><br><span class="line">NSLog(@&quot;%@&quot;,[array objectAtIndex:1]);</span><br><span class="line">NSLog(@&quot;%d&quot;,[array containsObject:@&quot;pen1&quot;]);</span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F; set 集合</span><br><span class="line">person.set &#x3D; [NSSet setWithArray:person.arr];</span><br><span class="line">NSSet *set &#x3D; [person valueForKey:@&quot;books&quot;];</span><br><span class="line">[set enumerateObjectsUsingBlock:^(id  _Nonnull obj, BOOL * _Nonnull stop) &#123;</span><br><span class="line">    NSLog(@&quot;set遍历 %@&quot;,obj);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>直接运行，会发生crash。</p><blockquote><p>*** Terminating app due to uncaught exception ‘NSUnknownKeyException’, reason: ‘[&lt;LGPerson 0x6000024610c0&gt; valueForUndefinedKey:]: this class is not key value coding-compliant for the key pens.’</p></blockquote><p>按照上面的流程分析，我们需要对NSArray和NSSet类型提供方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;MARK: - NSArray</span><br><span class="line">&#x2F;&#x2F; 个数</span><br><span class="line">- (NSUInteger)countOfPens&#123;</span><br><span class="line">    NSLog(@&quot;%s&quot;,__func__);</span><br><span class="line">    return [self.arr count];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 获取值</span><br><span class="line">- (id)objectInPensAtIndex:(NSUInteger)index &#123;</span><br><span class="line">    NSLog(@&quot;%s&quot;,__func__);</span><br><span class="line">    return [NSString stringWithFormat:@&quot;pens %lu&quot;, index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;MARK: - set</span><br><span class="line">&#x2F;&#x2F; 个数</span><br><span class="line">- (NSUInteger)countOfBooks&#123;</span><br><span class="line">    NSLog(@&quot;%s&quot;,__func__);</span><br><span class="line">    return [self.set count];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 是否包含这个成员对象</span><br><span class="line">- (id)memberOfBooks:(id)object &#123;</span><br><span class="line">    NSLog(@&quot;%s&quot;,__func__);</span><br><span class="line">    return [self.set containsObject:object] ? object : nil;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 迭代器</span><br><span class="line">- (id)enumeratorOfBooks &#123;</span><br><span class="line">    &#x2F;&#x2F; objectEnumerator</span><br><span class="line">    NSLog(@&quot;%s&quot;,__func__);</span><br><span class="line">    return [self.arr reverseObjectEnumerator];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充完整上述方法，即可正常运行，对数组进行操作。</p><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><p>声明一个结构体类型的属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">    float x, y, z;</span><br><span class="line">&#125; ThreeFloats;</span><br><span class="line"></span><br><span class="line">@property (nonatomic) ThreeFloats threeFloats;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ThreeFloats floats &#x3D; &#123;1.,2.,3.&#125;;</span><br><span class="line">NSValue *value     &#x3D; [NSValue valueWithBytes:&amp;floats objCType:@encode(ThreeFloats)];</span><br><span class="line">[person setValue:value forKey:@&quot;threeFloats&quot;];</span><br><span class="line">NSValue *value1    &#x3D; [person valueForKey:@&quot;threeFloats&quot;];</span><br><span class="line">NSLog(@&quot;%@&quot;,value1);</span><br><span class="line">    </span><br><span class="line">ThreeFloats th;</span><br><span class="line">[value1 getValue:&amp;th];</span><br><span class="line">NSLog(@&quot;%f-%f-%f&quot;,th.x,th.y,th.z);</span><br></pre></td></tr></table></figure><p>对于结构体类型的数据，需要先转化成<code>NSValue</code>类型。常量类型会先转化成<code>NSNumber</code>类型</p><h1 id="自定义KVC"><a href="#自定义KVC" class="headerlink" title="自定义KVC"></a>自定义KVC</h1><p>根据set、get流程分析，自定义主要分为以下几个流程，需要注意的是要做安全判断，防止发生异常。</p><h2 id="1-kvc自定义set"><a href="#1-kvc自定义set" class="headerlink" title="1. kvc自定义set"></a>1. kvc自定义set</h2><ol><li>判断key，value的情况</li><li>通过传进来的key生成对应的set方法。</li><li>判断生成的3种set方法是否可以被响应，可以被响应直接return。</li><li>判断accessInstanceVariablesDirectly是否返回YES。</li><li>判断4种实例变量是否存在，存在则赋值，否则crash异常处理。</li></ol><h2 id="2-KVC-自定义Get"><a href="#2-KVC-自定义Get" class="headerlink" title="2. KVC 自定义Get"></a>2. KVC 自定义Get</h2><ol><li>判断key的值。</li><li>生成对应的<code>-get&lt;Key&gt;，-&lt;key&gt;，-is&lt;Key&gt;，-_&lt;key&gt;</code>方法。判断是否可以响应。</li><li>不响应判断get流程种NSArray的处理。</li><li>不想要判断get流程种NSSet的处理。</li><li>判断accessInstanceVariablesDirectly是否返回YES。</li><li>判断变量是否存在，存在直接返回。</li><li>异常处理。</li></ol><p>自定义set、get完全是按照set和get的流程处理的。代码就不上了，太占地方。</p><h1 id="补充，KVC的高级使用"><a href="#补充，KVC的高级使用" class="headerlink" title="补充，KVC的高级使用"></a>补充，KVC的高级使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">NSArray *arrStr &#x3D; @[@&quot;1&quot;, @&quot;10&quot;, @&quot;100&quot;];</span><br><span class="line">NSArray *arrCapStr &#x3D; [arrStr valueForKey:@&quot;capitalizedString&quot;];</span><br><span class="line">    </span><br><span class="line">for (NSString *str in arrCapStr) &#123;</span><br><span class="line">    NSLog(@&quot;%@&quot;, str);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">NSArray *arrCapStrLength &#x3D; [arrCapStr valueForKeyPath:@&quot;capitalizedString.length&quot;];</span><br><span class="line">for (NSNumber *length in arrCapStrLength) &#123;</span><br><span class="line">    NSLog(@&quot;%ld&quot;, (long)length.integerValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印出来的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">10</span><br><span class="line">100</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>还有关于model中嵌套model的也差不多类似，大家探索一下吧。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>KVC可以间接访问私有变量。</li><li><code>valueForKey</code>返回key对应的类型数据。如果是不可变数组，通过<code>mutableArrayValueForKey</code>获取的也会是可变类型。</li><li><code>setValue:forKey:, valueForKey:</code>的流程。</li><li>自定义KVC。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;KVC&quot;&gt;&lt;a href=&quot;#KVC&quot; class=&quot;headerlink&quot; title=&quot;KVC&quot;&gt;&lt;/a&gt;KVC&lt;/h1&gt;&lt;p&gt;官方文档：&lt;a href=&quot;https://developer.apple.com/library/archive/document
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>ARM汇编-5 OC反汇编</title>
    <link href="http://liujiaboy.github.io/2021/04/28/%E9%80%86%E5%90%91/ARM%E6%B1%87%E7%BC%96-5/"/>
    <id>http://liujiaboy.github.io/2021/04/28/%E9%80%86%E5%90%91/ARM%E6%B1%87%E7%BC%96-5/</id>
    <published>2021-04-28T06:30:30.000Z</published>
    <updated>2021-05-10T08:35:30.642Z</updated>
    
    <content type="html"><![CDATA[<p>OC代码的精髓其实就是<code>objc_msgSend</code>。而OC的反汇编其实就是查看其中的方法调用。</p><p>objc_msgSend有两个参数，第一个是id类型，第二个是SEL类型。id、SEL其实都是一个结构体，内部有isa指针，所以这两个在内存中占有8个字节。</p><h1 id="1-OC汇编"><a href="#1-OC汇编" class="headerlink" title="1. OC汇编"></a>1. OC汇编</h1><p>声明一个Person类，并添加两个属性，一个类方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@interface Person : NSObject</span><br><span class="line">@property(nonatomic, copy) NSString * name;</span><br><span class="line">@property(nonatomic, assign) int age;</span><br><span class="line"></span><br><span class="line">+(instancetype)person;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Person</span><br><span class="line"></span><br><span class="line">+ (instancetype)person &#123;</span><br><span class="line">    return [[self alloc] init];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">int main(int argc, char * argv[]) &#123;</span><br><span class="line">    Person * p &#x3D; [Person person];</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>放在main函数里，直接调用类方法，生成一个临时变量。<br>打上断点，直接在汇编模式下进行debug。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Demo&#96;main:</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    0x10405a16c &lt;+24&gt;:  adrp   x8, 3</span><br><span class="line">    0x10405a170 &lt;+28&gt;:  add    x8, x8, #0x648            ; &#x3D;0x648 </span><br><span class="line">-&gt;  0x10405a174 &lt;+32&gt;:  ldr    x0, [x8]</span><br><span class="line"></span><br><span class="line">    0x10405a178 &lt;+36&gt;:  adrp   x8, 3</span><br><span class="line">    0x10405a17c &lt;+40&gt;:  add    x8, x8, #0x638            ; &#x3D;0x638 </span><br><span class="line">    0x10405a180 &lt;+44&gt;:  ldr    x1, [x8]</span><br><span class="line">    0x10405a184 &lt;+48&gt;:  bl     0x10405a4d4               ; symbol stub for: objc_msgSend</span><br><span class="line">    0x10405a188 &lt;+52&gt;:  mov    x29, x29</span><br><span class="line">    0x10405a18c &lt;+56&gt;:  bl     0x10405a4f8               ; symbol stub for: objc_retainAutoreleasedReturnValue</span><br><span class="line">    0x10405a190 &lt;+60&gt;:  add    x8, sp, #0x8              ; &#x3D;0x8 </span><br><span class="line">    0x10405a194 &lt;+64&gt;:  str    x0, [sp, #0x8]</span><br><span class="line">    0x10405a198 &lt;+68&gt;:  stur   wzr, [x29, #-0x4]</span><br><span class="line">    0x10405a19c &lt;+72&gt;:  mov    x0, x8</span><br><span class="line">    0x10405a1a0 &lt;+76&gt;:  mov    x8, #0x0</span><br><span class="line">    0x10405a1a4 &lt;+80&gt;:  mov    x1, x8</span><br><span class="line">    0x10405a1a8 &lt;+84&gt;:  bl     0x10405a510               ; symbol stub for: objc_storeStrong</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>这里隐藏了开辟栈空间和回收相关的代码。</p><p><code>objc_msgSend</code>需要两个参数id和SEL，从上面的代码可以初步判断两个参数的值分别在x0、x1寄存器中。</p><p>首先我们看一下x0寄存器中的数据。按照老方法，adrp计算x8的地址是<code>0x010405d648</code>。x0的值存放在<code>0x010405d648</code>所指向的内存中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(lldb) po 0x010405d648</span><br><span class="line">&lt;Person: 0x10405d648&gt;</span><br><span class="line">(lldb) x 0x010405d648</span><br><span class="line">0x10405d648: 30 d7 05 04 01 00 00 00 68 d6 05 04 01 00 00 00  0.......h.......</span><br><span class="line">0x10405d658: 08 00 00 00 08 00 00 00 10 00 00 00 08 00 00 00  ................</span><br><span class="line"></span><br><span class="line">(lldb) po 0x010405d730</span><br><span class="line">Person</span><br></pre></td></tr></table></figure><p>我们确定了第一个参数是Person类。在看第二个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(lldb) x 0x10405d638</span><br><span class="line">0x10405d638: 05 3d 42 8f 01 00 00 00 00 00 00 00 00 00 00 00  .&#x3D;B.............</span><br><span class="line">0x10405d648: 30 d7 05 04 01 00 00 00 68 d6 05 04 01 00 00 00  0.......h.......</span><br><span class="line">(lldb) po (SEL)0x018f423d05</span><br><span class="line">&quot;person&quot;</span><br></pre></td></tr></table></figure><p>没有毛病，就是一个方法<code>person</code>。</p><p>不同的系统版本，实现的汇编是不一样，iOS11下，汇编对objc_alloc进行了优化，但是没有对init处理。</p><p>iOS14 ：没有消息发送，直接objc_alloc_init<br>iOS11 ： 一次消息发送，objc_alloc, objc_msgSend(self, init)<br>iOS9  ： 两次消息发送，objc_msgSend(alloc),objc_msgSend(self, init)</p><h2 id="1-1-objc-storeStrong"><a href="#1-1-objc-storeStrong" class="headerlink" title="1.1 objc_storeStrong"></a>1.1 objc_storeStrong</h2><p>这里还看到一个这个东西，这个设计到oc源码的逻辑，我们稍微看一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">objc_storeStrong(id *location, id obj)</span><br><span class="line">&#123;</span><br><span class="line">    id prev &#x3D; *location;</span><br><span class="line">    if (obj &#x3D;&#x3D; prev) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    objc_retain(obj);</span><br><span class="line">    *location &#x3D; obj;</span><br><span class="line">    objc_release(prev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数需要两个参数，第一个是id *类型，这就是一个地址，第二个是id类型。我们反过来看汇编代码，看这两个变量，正常来说还是在x0、x1寄存器中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; x8中存地址</span><br><span class="line">0x10405a190 &lt;+60&gt;:  add    x8, sp, #0x8              ; &#x3D;0x8 </span><br><span class="line">&#x2F;&#x2F; 把x0寄存器的值放在x8中。</span><br><span class="line">0x10405a194 &lt;+64&gt;:  str    x0, [sp, #0x8]</span><br><span class="line">&#x2F;&#x2F; 把0存起来</span><br><span class="line">0x10405a198 &lt;+68&gt;:  stur   wzr, [x29, #-0x4]</span><br><span class="line">&#x2F;&#x2F; x0 &#x3D; x8，是一个地址。</span><br><span class="line">0x10405a19c &lt;+72&gt;:  mov    x0, x8</span><br><span class="line">&#x2F;&#x2F; x8置空</span><br><span class="line">0x10405a1a0 &lt;+76&gt;:  mov    x8, #0x0</span><br><span class="line">&#x2F;&#x2F; x1 &#x3D; 0</span><br><span class="line">0x10405a1a4 &lt;+80&gt;:  mov    x1, x8</span><br><span class="line">&#x2F;&#x2F; 这里x0是一个地址， x1是个nil，两个变量</span><br><span class="line">0x10405a1a8 &lt;+84&gt;:  bl     0x10405a510  ; symbol stub for: objc_storeStrong</span><br></pre></td></tr></table></figure><p>通过分析汇编，objc_storeStrong两个变量分别是一个地址，一个是nil。然后看一些源码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">objc_storeStrong(id *location, id obj)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; location有值， obj &#x3D; nil</span><br><span class="line">    id prev &#x3D; *location;</span><br><span class="line">    &#x2F;&#x2F; 不相等</span><br><span class="line">    if (obj &#x3D;&#x3D; prev) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 对nil进行retain</span><br><span class="line">    objc_retain(obj);</span><br><span class="line">    &#x2F;&#x2F; 寻址之后置空，也就是把id对象置空</span><br><span class="line">    *location &#x3D; obj;</span><br><span class="line">    &#x2F;&#x2F; 释放</span><br><span class="line">    objc_release(prev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以这个函数不仅仅只是用来强引用的，还可以进行释放操作，在这里就是一个很明显的例子。</p><h1 id="1-2-属性"><a href="#1-2-属性" class="headerlink" title="1.2 属性"></a>1.2 属性</h1><p>我们在mian函数中，对实例对象p的两个属性进行赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char * argv[]) &#123;</span><br><span class="line">    Person * p &#x3D; [Person person];</span><br><span class="line">    p.name &#x3D; @&quot;name&quot;;</span><br><span class="line">    p.age &#x3D; 18;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在真机上执行一下，然后我们使用之前的Hopper工具进行看一下。</p><p><img src="arm-5-property.jpg" alt=""></p><p>这里就很详细的标注了整个内容，看起来比读汇编代码省事很多。</p><h1 id="3-block的汇编"><a href="#3-block的汇编" class="headerlink" title="3. block的汇编"></a>3. block的汇编</h1><p>在main函数中直接声明一个栈区的block，全局区的也是一样的道理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int a &#x3D; 10;</span><br><span class="line">void(^block)(void) &#x3D; ^() &#123;</span><br><span class="line">    NSLog(@&quot;block--%d&quot;,a);</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line">block();</span><br></pre></td></tr></table></figure><p>然后真机上运行。这里省去了很大一部分的代码，只拿了关键部分的逻辑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Demo&#96;main:</span><br><span class="line">    0x10052a0cc &lt;+36&gt;:  adrp   x10, 2</span><br><span class="line">    0x10052a0d0 &lt;+40&gt;:  ldr    x10, [x10]</span><br><span class="line">-&gt;  0x10052a0d4 &lt;+44&gt;:  str    x10, [sp, #0x8]</span><br></pre></td></tr></table></figure><p>先获取x10寄存器的值，也就是<code>0x10052c000</code>,lldb调试一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(lldb) x 0x10052c000</span><br><span class="line">0x10052c000: 20 9a 44 29 02 00 00 00 0c c8 66 ef 01 00 00 00   .D)......f.....</span><br><span class="line">0x10052c010: 18 a5 52 00 01 00 00 00 24 a5 52 00 01 00 00 00  ..R.....$.R.....</span><br><span class="line">&#x2F;&#x2F; 这是一个栈block</span><br><span class="line">(lldb) po 0x10052c000</span><br><span class="line">&lt;__NSStackBlock__: 0x10052c000&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 这里拿到的是0x10052c010地址指向的内存区域，这个就是block的invoke。</span><br><span class="line">(lldb) dis -s 0x010052a518</span><br><span class="line">    0x10052a518: ldr    w16, 0x10052a520</span><br><span class="line">    0x10052a51c: b      0x10052a500</span><br><span class="line">    0x10052a520: udf    #0x0</span><br><span class="line">    0x10052a524: ldr    w16, 0x10052a52c</span><br><span class="line">    0x10052a528: b      0x10052a500</span><br><span class="line">    0x10052a52c: udf    #0xd</span><br><span class="line">    0x10052a530: ldr    w16, 0x10052a538</span><br><span class="line">    0x10052a534: b      0x10052a500</span><br></pre></td></tr></table></figure><p>这里看一下block的源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct Block_layout &#123;</span><br><span class="line">    void *isa;      &#x2F;&#x2F; 8个字节</span><br><span class="line">    volatile int32_t flags; &#x2F;&#x2F; contains ref count   &#x2F;&#x2F;4个字节</span><br><span class="line">    int32_t reserved;   &#x2F;&#x2F; 4个字节</span><br><span class="line">    BlockInvokeFunction invoke;</span><br><span class="line">    struct Block_descriptor_1 *descriptor;</span><br><span class="line">    &#x2F;&#x2F; imported variables</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>block也是一个结构体，invoke所在的位置，就是isa之后的16个字节。所以我在内存中取的invoke的实现就是偏移了0x10。</p><p>接下来，我们用hopper看一下:</p><p><img src="arm-5-block.jpg" alt=""></p><p><img src="arm-5-block-invoke.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;OC代码的精髓其实就是&lt;code&gt;objc_msgSend&lt;/code&gt;。而OC的反汇编其实就是查看其中的方法调用。&lt;/p&gt;
&lt;p&gt;objc_msgSend有两个参数，第一个是id类型，第二个是SEL类型。id、SEL其实都是一个结构体，内部有isa指针，所以这两个在内存中
      
    
    </summary>
    
    
      <category term="逆向" scheme="http://liujiaboy.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="ARM汇编" scheme="http://liujiaboy.github.io/tags/ARM%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>ARM汇编-4 指针</title>
    <link href="http://liujiaboy.github.io/2021/04/25/%E9%80%86%E5%90%91/ARM%E6%B1%87%E7%BC%96-4/"/>
    <id>http://liujiaboy.github.io/2021/04/25/%E9%80%86%E5%90%91/ARM%E6%B1%87%E7%BC%96-4/</id>
    <published>2021-04-25T15:34:37.000Z</published>
    <updated>2021-05-10T08:35:30.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-指针"><a href="#1-指针" class="headerlink" title="1. 指针"></a>1. 指针</h1><blockquote><p>指针也就是内存地址，指针变量是用来存放内存地址的变量。不同类型的指针变量所占用的存储单元长度是相同的，而存放数据的变量因数据的类型不同，所占用的存储空间长度也不同。<br>可使用 &amp; 运算符访问地址。</p></blockquote><p>之前的文章中有过说明，指针在内存中占8个字节。<br>可以是用sizeof来打印指针的size。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void func() &#123;</span><br><span class="line">    int *a;</span><br><span class="line">    a &#x3D; (int *)100;</span><br><span class="line">    a ++;</span><br><span class="line">    printf(&quot;%d&quot;, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里定义一个int类型的指针a，然后赋值位100，我们知道指针的size是8个字节，a++之后打印多少？</p><p>答案是104。是的，没有看错，这里是因为指针的自增和自减操作，与执行的数据类型的宽度有关。</p><p>如果<code>a = (char *)100</code>,则打印的就是101。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void func() &#123;</span><br><span class="line">    int *a;</span><br><span class="line">    a &#x3D; (int *)100;</span><br><span class="line">    a &#x3D; a + 1;</span><br><span class="line">    printf(&quot;%d&quot;, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个不是指针的自增、自减了，这个时候就跟指针的size有关了，打印108。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void func_add() &#123;</span><br><span class="line">    int *a;</span><br><span class="line">    a &#x3D; (int *)100;</span><br><span class="line">    </span><br><span class="line">    int *b;</span><br><span class="line">    b &#x3D; (int *)200;</span><br><span class="line">    </span><br><span class="line">    int x &#x3D; a - b;</span><br><span class="line">    printf(&quot;x &#x3D; %d&quot;, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先说答案，打印的结果是<code>x = -25</code>。</p><p>a - b = -100, 然后除以4就得到了这个结果。</p><blockquote><p>指针的运算单位是执行的数据类型的宽度。</p></blockquote><h2 id="1-1-二级指针"><a href="#1-1-二级指针" class="headerlink" title="1.1 二级指针"></a>1.1 二级指针</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void func() &#123;</span><br><span class="line">    int **a;</span><br><span class="line">    a &#x3D; (int **)100;</span><br><span class="line">    a &#x3D; a + 1;</span><br><span class="line">    printf(&quot;%d&quot;, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候a运算时，执行的类型就是 <code>char *</code>类型，这是一个指针，8个字节。所以结果就是108。</p><h1 id="2-指针的汇编"><a href="#2-指针的汇编" class="headerlink" title="2. 指针的汇编"></a>2. 指针的汇编</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void func() &#123;</span><br><span class="line">    int *a;</span><br><span class="line">    int b &#x3D; 10;</span><br><span class="line">    a &#x3D; &amp;b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照我们正常的理解，上述代码的意思就是把b的地址给到a，这个时候<code>*a=10</code>。</p><p>看一下上面的代码汇编之后是什么样子的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Demo&#96;func:</span><br><span class="line">    0x100206130 &lt;+0&gt;:  sub    sp, sp, #0x10             ; &#x3D;0x10 </span><br><span class="line">    &#x2F;&#x2F; 1. x8 &#x3D; sp + 0x4，x8指向这个位置</span><br><span class="line">    0x100206134 &lt;+4&gt;:  add    x8, sp, #0x4              ; &#x3D;0x4 </span><br><span class="line">    &#x2F;&#x2F; 2. 局部变量，w9&#x3D;10</span><br><span class="line">    0x100206138 &lt;+8&gt;:  mov    w9, #0xa</span><br><span class="line">    &#x2F;&#x2F; 3. 把w9的值放在x8所在的地址上。</span><br><span class="line">    0x10020613c &lt;+12&gt;: str    w9, [sp, #0x4]</span><br><span class="line">    &#x2F;&#x2F; 4. 把x8存储的地址放在sp + 0x8的位置上。</span><br><span class="line">-&gt;  0x100206140 &lt;+16&gt;: str    x8, [sp, #0x8]</span><br><span class="line">    0x100206144 &lt;+20&gt;: add    sp, sp, #0x10             ; &#x3D;0x10 </span><br><span class="line">    0x100206148 &lt;+24&gt;: ret</span><br></pre></td></tr></table></figure><p>通过lldb打印一下相关数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(lldb) register read sp</span><br><span class="line">      sp &#x3D; 0x000000016fbff880</span><br><span class="line"></span><br><span class="line">(lldb) register read x8</span><br><span class="line">      x8 &#x3D; 0x000000016fbff884</span><br><span class="line">   </span><br><span class="line">(lldb) register read x9</span><br><span class="line">      x9 &#x3D; 0x000000000000000a</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 打印一下x8寄存器里的内存地址情况，里头存的值是0xa</span><br><span class="line">(lldb) x 0x000000016fbff884</span><br><span class="line">0x16fbff884: 0a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">0x16fbff894: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................   </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; x8的地址放在了sp+0x8的位置，打印一下内存，就是x8存储的地址。</span><br><span class="line">(lldb) x 0x000000016fbff888</span><br><span class="line">0x16fbff888: 84 f8 bf 6f 01 00 00 00 00 00 00 00 00 00 00 00  ...o............</span><br><span class="line">0x16fbff898: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br></pre></td></tr></table></figure><h2 id="2-1-数组"><a href="#2-1-数组" class="headerlink" title="2.1 数组"></a>2.1 数组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void func() &#123;</span><br><span class="line">    int arr[5] &#x3D; &#123;1,2,3,4,5&#125;;</span><br><span class="line">    for (int i &#x3D; 0; i &lt; 5; i++) &#123;</span><br><span class="line">        printf(&quot;%d\n&quot;, *(arr + i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-野指针"><a href="#2-2-野指针" class="headerlink" title="2.2 野指针"></a>2.2 野指针</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void func() &#123;</span><br><span class="line">    char *p;</span><br><span class="line">    char a &#x3D; *p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过代码，我们知道，只是把*p的值给了a<br>为什么会发生野指针呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Demo&#96;func:</span><br><span class="line">    0x100812134 &lt;+0&gt;:  sub    sp, sp, #0x10             ; &#x3D;0x10 </span><br><span class="line">    &#x2F;&#x2F; 1. 因为p是指针。把sp + 0x8的地址中的值给x8</span><br><span class="line">-&gt;  0x100812138 &lt;+4&gt;:  ldr    x8, [sp, #0x8]</span><br><span class="line">    &#x2F;&#x2F; 2. 把x8寄存器中存的地址的值给w9</span><br><span class="line">    0x10081213c &lt;+8&gt;:  ldrb   w9, [x8]</span><br><span class="line">    0x100812140 &lt;+12&gt;: strb   w9, [sp, #0x7]</span><br><span class="line">    0x100812144 &lt;+16&gt;: add    sp, sp, #0x10             ; &#x3D;0x10 </span><br><span class="line">    0x100812148 &lt;+20&gt;: ret</span><br></pre></td></tr></table></figure><ol><li><p>第一步寻址操作，获取x8寄存器的值的地址</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(lldb) register read sp</span><br><span class="line">      sp &#x3D; 0x000000016f5f3880</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; sp + 0x8 &#x3D; 0x000000016f5f3888</span><br><span class="line">(lldb) x 0x000000016f5f3888</span><br><span class="line">0x16f5f3888: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">0x16f5f3898: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line"></span><br><span class="line">(lldb) register read x8</span><br><span class="line">  x8 &#x3D; 0x0000000000000000</span><br></pre></td></tr></table></figure><p> 这里发现 x8寄存器中存的地址是空，全是0。</p></li><li><p>把x8寄存器中地址所在的值给w9。寻址操作<br> 这里寻址是从0x00000000上找值，从空地址上找值，就会发生crash。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-指针&quot;&gt;&lt;a href=&quot;#1-指针&quot; class=&quot;headerlink&quot; title=&quot;1. 指针&quot;&gt;&lt;/a&gt;1. 指针&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;指针也就是内存地址，指针变量是用来存放内存地址的变量。不同类型的指针变量所占用的存储单元长度是
      
    
    </summary>
    
    
      <category term="逆向" scheme="http://liujiaboy.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="ARM汇编" scheme="http://liujiaboy.github.io/tags/ARM%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>4.类的本质</title>
    <link href="http://liujiaboy.github.io/2021/04/18/OC%E5%8E%9F%E7%90%86/%E7%B1%BB%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
    <id>http://liujiaboy.github.io/2021/04/18/OC%E5%8E%9F%E7%90%86/%E7%B1%BB%E7%9A%84%E6%9C%AC%E8%B4%A8/</id>
    <published>2021-04-18T11:40:55.000Z</published>
    <updated>2021-05-10T08:35:30.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-对象、类对象、元类"><a href="#1-对象、类对象、元类" class="headerlink" title="1. 对象、类对象、元类"></a>1. 对象、类对象、元类</h1><h2 id="1-1-isa指向、superClass指向"><a href="#1-1-isa指向、superClass指向" class="headerlink" title="1.1 isa指向、superClass指向"></a>1.1 isa指向、superClass指向</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@interface Person : NSObject</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface Teacher : Person</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 然后执行</span><br><span class="line">Person *p &#x3D; [[Person alloc] init];</span><br><span class="line">Teacher *t &#x3D; [[Teacher alloc] init];</span><br></pre></td></tr></table></figure><p>我们根据上诉代码进行分析，isa指针的指向。</p><blockquote><p>注意，这里是用的是真机，而非Mac/模拟器</p></blockquote><h2 id="1-2-实例对象的isa"><a href="#1-2-实例对象的isa" class="headerlink" title="1.2 实例对象的isa"></a>1.2 实例对象的isa</h2><p>首先我们先看Person的实例p的isa指向情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 首先打印一下p的内存情况</span><br><span class="line">(lldb) po p</span><br><span class="line">&lt;Person: 0x1d0016620&gt;</span><br><span class="line">&#x2F;&#x2F; 输出p指针的情况</span><br><span class="line">(lldb) x&#x2F;4gx p</span><br><span class="line">0x1d0016620: 0x000001a10018d0c5 0x0000000000000000</span><br><span class="line">0x1d0016630: 0x00000001d0091b70 0x0000000000000000</span><br><span class="line"></span><br><span class="line">(lldb) p 0x000001a10018d0c5</span><br><span class="line">(long) $6 &#x3D; 1791002988741</span><br></pre></td></tr></table></figure><p>这里拿到p指针指向的内存情况，我们知道第一块内存区域存放的是isa指针，直接打印的话，发现就是一串数字，啥也看不出来。还记得上一章中object_getClass反向验证isa指向最后的”&amp;”运算吗？<code>0x000001a10018d0c5</code>这个值就是isa-&gt;bits，我们用它与<code>ISA_MASK</code>进行&amp;运算。因为这里是用的真机，所以<code>ISA_MASK = 0x0000000ffffffff8ULL</code>，如果是用Mac或者模拟器，根据芯片类型判断是否是ARM64架构还是x86，然后使用对应的值进行换算。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; p&#x2F;x输出内存的16进制</span><br><span class="line">(lldb) p&#x2F;x 0x000001a10018d0c5 &amp; 0x0000000ffffffff8ULL</span><br><span class="line">(unsigned long long) $3 &#x3D; 0x000000010018d0c0</span><br><span class="line"></span><br><span class="line">(lldb) po 0x000000010018d0c0</span><br><span class="line">Person</span><br></pre></td></tr></table></figure><p>打印出来是Person。所以isa指向的就是Person类。那我们做一下验证，直接通过<code>object_getClass</code>方法来找一下Person这个类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lldb) p&#x2F;x object_getClass(p)</span><br><span class="line">(Class _Nullable) $0 &#x3D; 0x000000010018d0c0 Person</span><br></pre></td></tr></table></figure><p>是不是发现，Person类的内存地址是一样的。如果再实例化一个p1，看p1-&gt;isa指向的和p-&gt;isa指向的是否是同一个Person类的内存地址。</p><p>答案是肯定的，Person类在内存中只有一份，也就是说所有的类对象在内存中都只有一份。</p><h2 id="1-3-类对象的isa"><a href="#1-3-类对象的isa" class="headerlink" title="1.3 类对象的isa"></a>1.3 类对象的isa</h2><p>接下来，我们继续寻找Person类对象的isa指向情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(lldb) p 0x000001a10018d0c5</span><br><span class="line">(long) $6 &#x3D; 1791002988741</span><br><span class="line"></span><br><span class="line">(lldb) x&#x2F;4gx 0x000000010018d0c0</span><br><span class="line">0x10018d0c0: 0x000001a10018d099 0x00000001b5b12ea0</span><br><span class="line">0x10018d0d0: 0x00000001c00edd00 0x0000000400000007</span><br><span class="line"></span><br><span class="line">(lldb) p&#x2F;x 0x000001a10018d099 &amp; 0x0000000ffffffff8ULL</span><br><span class="line">(unsigned long long) $7 &#x3D; 0x000000010018d098</span><br><span class="line">(lldb) po 0x000000010018d098</span><br><span class="line">Person</span><br></pre></td></tr></table></figure><p>发现Person类对象的isa指向的还是Person，但是这个Person所在的内存地址与Person类对象不一样。</p><p>这里就出现了元类的概念（Meta Class）。</p><h2 id="1-4-元类的isa"><a href="#1-4-元类的isa" class="headerlink" title="1.4 元类的isa"></a>1.4 元类的isa</h2><p>我们继续寻找元类的isa</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(lldb) x&#x2F;4gx 0x000000010018d098</span><br><span class="line">0x10018d098: 0x000001a1b5b12ec9 0x00000001b5b12ec8</span><br><span class="line">0x10018d0a8: 0x00000001c00edc80 0x0000000100000007</span><br><span class="line"></span><br><span class="line">(lldb) p&#x2F;x 0x000001a1b5b12ec9 &amp; 0x0000000ffffffff8ULL</span><br><span class="line">(unsigned long long) $9 &#x3D; 0x00000001b5b12ec8</span><br><span class="line">(lldb) po 0x00000001b5b12ec8</span><br><span class="line">NSObject</span><br></pre></td></tr></table></figure><p>使用相同的方法找到元类的isa指向的是NSObject，这个NSObject是类对象吗？</p><p>我们通过object_getClass([[NSObject alloc] init])来看看NSObject类对象的内存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(lldb) p&#x2F;x object_getClass([[NSObject alloc] init])</span><br><span class="line">(Class _Nullable) $11 &#x3D; 0x00000001b5b12ea0 NSObject</span><br><span class="line"></span><br><span class="line">(lldb) x&#x2F;4gx 0x00000001b5b12ea0</span><br><span class="line">0x1b5b12ea0: 0x000001a1b5b12ec9 0x0000000000000000</span><br><span class="line">0x1b5b12eb0: 0x00000001d41fbb00 0x0000000a0000000f</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 从这里开始，就已经跟上面的内存地址重复了</span><br><span class="line">(lldb) p&#x2F;x 0x000001a1b5b12ec9 &amp; 0x0000000ffffffff8ULL</span><br><span class="line">(unsigned long long) $12 &#x3D; 0x00000001b5b12ec8</span><br><span class="line">(lldb) po 0x00000001b5b12ec8</span><br><span class="line">NSObject</span><br></pre></td></tr></table></figure><p>到这里，是不是看明白了点啥？</p><p>Person的元类的isa指向的是NSObjec的元类。</p><h3 id="1-5-使用相同的办法查看Teache实例的isa"><a href="#1-5-使用相同的办法查看Teache实例的isa" class="headerlink" title="1.5 使用相同的办法查看Teache实例的isa"></a>1.5 使用相同的办法查看Teache实例的isa</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(lldb) x&#x2F;4gx t</span><br><span class="line">0x1d022dee0: 0x000001a102680fd5 0x0000000000000000</span><br><span class="line">0x1d022def0: 0x0000000000000000 0x0000000000000000</span><br><span class="line">(lldb) po 0x000001a102680fd5 &amp; 0x0000000ffffffff8ULL</span><br><span class="line">Teacher</span><br><span class="line"></span><br><span class="line">(lldb) p&#x2F;x 0x000001a102680fd5 &amp; 0x0000000ffffffff8ULL</span><br><span class="line">(unsigned long long) $18 &#x3D; 0x0000000102680fd0</span><br><span class="line">(lldb) po 0x0000000102680fd0</span><br><span class="line">Teacher</span><br><span class="line"></span><br><span class="line">(lldb) x&#x2F;4gx 0x0000000102680fd0</span><br><span class="line">0x102680fd0: 0x000001a102680fa9 0x00000001026810c0</span><br><span class="line">0x102680fe0: 0x00000001c00e6700 0x0000000400000007</span><br><span class="line">(lldb) po 0x000001a102680fa9</span><br><span class="line">1791041736617</span><br><span class="line"></span><br><span class="line">(lldb) p&#x2F;x 0x000001a102680fa9 &amp; 0x0000000ffffffff8ULL</span><br><span class="line">(unsigned long long) $21 &#x3D; 0x0000000102680fa8</span><br><span class="line">(lldb) po 0x0000000102680fa8</span><br><span class="line">Teacher</span><br><span class="line"></span><br><span class="line">(lldb) x&#x2F;4gx 0x0000000102680fa8</span><br><span class="line">0x102680fa8: 0x000001a1b5b12ec9 0x0000000102681098</span><br><span class="line">0x102680fb8: 0x00000001c00e6a80 0x0000000300000007</span><br><span class="line">(lldb) p&#x2F;x 0x000001a1b5b12ec9 &amp; 0x0000000ffffffff8ULL</span><br><span class="line">(unsigned long long) $23 &#x3D; 0x00000001b5b12ec8</span><br><span class="line">(lldb) po 0x00000001b5b12ec8</span><br><span class="line">NSObject</span><br></pre></td></tr></table></figure><h2 id="1-6-总结"><a href="#1-6-总结" class="headerlink" title="1.6 总结"></a>1.6 总结</h2><p><img src="isa_metaclass.png" alt=""></p><ul><li>每个实例对象的isa指针指向与之对应的类对象(Class)。</li><li>每个类对象(Class)都有一个isa指针指向一个唯一的元类(Meta Class)。</li><li>每一个元类(Meta Class)的isa指针都指向最上层的元类(Meta Class)（图中的NSObject的Meta Class）。最上层的元类(Meta Class)的isa指针指向自己，形成一个回路。</li><li>每一个元类(Meta Class)的Super Class指向它原本Class的Super Class的Meta Class。最上层的Meta Class的Super Class指向NSObject Class本身。</li><li>最上层的NSObject Class的Super Class指向nil。</li><li>只有Class才有继承关系，实例对象与实例对象不存在继承关系。</li><li>每一个类对象(Class)在内存中都只有一份。</li></ul><h1 id="2-通过源码分析"><a href="#2-通过源码分析" class="headerlink" title="2. 通过源码分析"></a>2. 通过源码分析</h1><p>接下来我们从runtime的源码上分析这些都是什么东西。</p><h2 id="2-1-实例对象-id（Instance）"><a href="#2-1-实例对象-id（Instance）" class="headerlink" title="2.1 实例对象 id（Instance）"></a>2.1 实例对象 id（Instance）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; A pointer to an instance of a class.</span><br><span class="line">typedef struct objc_object *id;</span><br></pre></td></tr></table></figure><p>id 这个struct的定义本身就带了 个 ＊, 所以我们在使用其他NSObject类型的实例时需要在前加上 ＊, 使 id 时却不用 。</p><p>什么是objc_object?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; Represents an instance of a class. </span><br><span class="line">struct objc_object &#123;</span><br><span class="line">    Class isa  OBJC_ISA_AVAILABILITY;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个时候我们知道Objective-C中的object在最后会被转换成C的结构体, 在这个struct中有 个 isa 指针,指向它的类别 Class。 </p><h2 id="2-2-类对象-Class"><a href="#2-2-类对象-Class" class="headerlink" title="2.2 类对象 Class"></a>2.2 类对象 Class</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; An opaque type that represents an Objective-C class.</span><br><span class="line">typedef struct objc_class *Class;</span><br></pre></td></tr></table></figure><p>Class的本质就是一个<code>objc_class</code>的结构体。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 注意，这个源码是被简化之后的。</span><br><span class="line">struct objc_class : objc_object &#123;</span><br><span class="line">  </span><br><span class="line">    &#x2F;&#x2F; Class ISA;</span><br><span class="line">    Class superclass;</span><br><span class="line">    cache_t cache;             &#x2F;&#x2F; formerly cache pointer and vtable</span><br><span class="line">    class_data_bits_t bits;    &#x2F;&#x2F; class_rw_t * plus custom rr&#x2F;alloc flags</span><br><span class="line"></span><br><span class="line">    Class getSuperclass() const &#123;</span><br><span class="line">        return superclass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void setSuperclass(Class newSuperclass) &#123;</span><br><span class="line">        superclass &#x3D; newSuperclass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class_rw_t *data() const &#123;</span><br><span class="line">        return bits.data();</span><br><span class="line">    &#125;</span><br><span class="line">    void setData(class_rw_t *newData) &#123;</span><br><span class="line">        bits.setData(newData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool isRootClass() &#123;</span><br><span class="line">        return getSuperclass() &#x3D;&#x3D; nil;</span><br><span class="line">    &#125;</span><br><span class="line">    bool isRootMetaclass() &#123;</span><br><span class="line">        return ISA() &#x3D;&#x3D; (Class)this;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这个结构体，大家可能会觉得不对，这个源码是错的，不是我们经常看到的，里头没有那些我们常说的变量，methodLists、ivars等等。<br>大家看仔细了哦，下面这个实现基本都是大家常看到的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">struct objc_class &#123;  </span><br><span class="line">    ...</span><br><span class="line">    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;</span><br><span class="line">    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;</span><br><span class="line">    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;</span><br><span class="line">    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;</span><br><span class="line">&#125; OBJC2_UNAVAILABLE</span><br></pre></td></tr></table></figure><p>里头确实有ivars、methodLists等，但是这个是<code>OBJC2_UNAVAILABLE</code>。其内部确实有这些东西的，我们一步步去探究。</p><p>继续回到上面的结构体，发现ISA变量被注释掉了，其实也没有影响的，因为<code>objc_class</code> 继承自 <code>objc_object</code>（内部有isa变量）。那我们的属性、方法是存放在哪了呢？</p><p>通过查看源码，我们看到有这么一个属性<code>class_data_bits_t</code>，这个东西里可能存放着我们需要的东西。稍后我们做验证。</p><h2 id="2-3-元类-Meta-Class"><a href="#2-3-元类-Meta-Class" class="headerlink" title="2.3 元类 Meta Class"></a>2.3 元类 Meta Class</h2><p>OC中一切皆为对象<br>Class在设计中本身也是一个对象,也有superclass。而这个Class对应的类我们叫“元类”（Meta Class）。也就是说Class中有一个isa指向的是Meta Class。</p><h2 id="2-4-验证属性的存在位置"><a href="#2-4-验证属性的存在位置" class="headerlink" title="2.4 验证属性的存在位置"></a>2.4 验证属性的存在位置</h2><p>在2.2小结我们说了属性、方法、等可能存在于<code>class_data_bits_t</code>这个结构体内部，我们查看它的源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">struct class_data_bits_t &#123;</span><br><span class="line">    friend objc_class;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Values are the FAST_ flags above.</span><br><span class="line">    uintptr_t bits;</span><br><span class="line">    </span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    class_rw_t* data() const &#123;</span><br><span class="line">        return (class_rw_t *)(bits &amp; FAST_DATA_MASK);</span><br><span class="line">    &#125;</span><br><span class="line">    void setData(class_rw_t *newData)</span><br><span class="line">    &#123;</span><br><span class="line">        ASSERT(!data()  ||  (newData-&gt;flags &amp; (RW_REALIZING | RW_FUTURE)));</span><br><span class="line">        &#x2F;&#x2F; Set during realization or construction only. No locking needed.</span><br><span class="line">        &#x2F;&#x2F; Use a store-release fence because there may be concurrent</span><br><span class="line">        &#x2F;&#x2F; readers of data and data&#39;s contents.</span><br><span class="line">        uintptr_t newBits &#x3D; (bits &amp; ~FAST_DATA_MASK) | (uintptr_t)newData;</span><br><span class="line">        atomic_thread_fence(memory_order_release);</span><br><span class="line">        bits &#x3D; newBits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在public的方法中有<code>class_rw_t* data()</code>这个方法，我们进一步探索：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">struct class_rw_t &#123;</span><br><span class="line">    &#x2F;&#x2F; Be warned that Symbolication knows the layout of this structure.</span><br><span class="line">    uint32_t flags;</span><br><span class="line">    uint16_t witness;</span><br><span class="line">#if SUPPORT_INDEXED_ISA</span><br><span class="line">    uint16_t index;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    explicit_atomic&lt;uintptr_t&gt; ro_or_rw_ext;</span><br><span class="line"></span><br><span class="line">    Class firstSubclass;</span><br><span class="line">    Class nextSiblingClass;</span><br><span class="line"></span><br><span class="line">    const method_array_t methods() const &#123;</span><br><span class="line">        auto v &#x3D; get_ro_or_rwe();</span><br><span class="line">        if (v.is&lt;class_rw_ext_t *&gt;()) &#123;</span><br><span class="line">            return v.get&lt;class_rw_ext_t *&gt;(&amp;ro_or_rw_ext)-&gt;methods;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return method_array_t&#123;v.get&lt;const class_ro_t *&gt;(&amp;ro_or_rw_ext)-&gt;baseMethods()&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const property_array_t properties() const &#123;</span><br><span class="line">        auto v &#x3D; get_ro_or_rwe();</span><br><span class="line">        if (v.is&lt;class_rw_ext_t *&gt;()) &#123;</span><br><span class="line">            return v.get&lt;class_rw_ext_t *&gt;(&amp;ro_or_rw_ext)-&gt;properties;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return property_array_t&#123;v.get&lt;const class_ro_t *&gt;(&amp;ro_or_rw_ext)-&gt;baseProperties&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const protocol_array_t protocols() const &#123;</span><br><span class="line">        auto v &#x3D; get_ro_or_rwe();</span><br><span class="line">        if (v.is&lt;class_rw_ext_t *&gt;()) &#123;</span><br><span class="line">            return v.get&lt;class_rw_ext_t *&gt;(&amp;ro_or_rw_ext)-&gt;protocols;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return protocol_array_t&#123;v.get&lt;const class_ro_t *&gt;(&amp;ro_or_rw_ext)-&gt;baseProtocols&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>确实如我们所说的，这里确实存在着我们想要的东西：methods、properties、protocols等。</p><p>那我们该怎么获取到这些数据，来证明这些就是我们想要的东西呢？</p><p>我们知道在c语言中，一个数组，获取数组中的某个元素的值有多种方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int a[] &#x3D; &#123;1,2,3&#125;;</span><br><span class="line">printf(&quot;index 1 &#x3D; %d - %d&quot;, a[1], *(a+1));</span><br></pre></td></tr></table></figure><p>比如上面的代码，我们可以直接输出某个元素的下标，也可以通过内存地址来偏移进行读取，同样，我们也可以采取地址偏移来获取<code>objc_class-&gt;bits</code>的值。</p><p>需要偏移多少呢？</p><p>第一个变量是Class，这是一个结构体，内部有一个isa指针，所以这是8个字节。<br>第二个变量是cache_t，我们进源码看一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">struct cache_t &#123;</span><br><span class="line">private:</span><br><span class="line">    explicit_atomic&lt;uintptr_t&gt; _bucketsAndMaybeMask;    &#x2F;&#x2F; 8</span><br><span class="line">    union &#123;</span><br><span class="line">        struct &#123;</span><br><span class="line">            explicit_atomic&lt;mask_t&gt;    _maybeMask;      &#x2F;&#x2F; 4</span><br><span class="line">#if __LP64__</span><br><span class="line">            uint16_t                   _flags;          &#x2F;&#x2F; 2</span><br><span class="line">#endif</span><br><span class="line">            uint16_t                   _occupied;       &#x2F;&#x2F; 2</span><br><span class="line">        &#125;;</span><br><span class="line">        explicit_atomic&lt;preopt_cache_t *&gt; _originalPreoptCache; &#x2F;&#x2F; 8</span><br><span class="line">    &#125;;</span><br><span class="line">...   </span><br><span class="line">... </span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其实这些就能算出来我们需要多少字节，我已经标好了。静态变量和方法是没有算在结构体内部的哈。</p><p>所以8+24 = 32个字节。</p><p>也就是我们获取到的<code>objc_class</code>的isa指针，然后偏移32个字节，也就是<code>0x20</code>。</p><p>我们做一下验证。</p><h3 id="2-4-1-llvm-验证属性存放的位置"><a href="#2-4-1-llvm-验证属性存放的位置" class="headerlink" title="2.4.1 llvm 验证属性存放的位置"></a>2.4.1 llvm 验证属性存放的位置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">(lldb) po p</span><br><span class="line">&lt;Person: 0x10060e160&gt;</span><br><span class="line"></span><br><span class="line">(lldb) x&#x2F;4gx p</span><br><span class="line">0x10060e160: 0x021d8001000081cd 0x0000000000000000</span><br><span class="line">0x10060e170: 0x0000000000000000 0x86c8f7c495bce30f</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 地址0x10060e160+0x20(偏移32个字节)</span><br><span class="line">(lldb) p&#x2F;x (class_data_bits_t *)0x10060e180</span><br><span class="line">(class_data_bits_t *) $3 &#x3D; 0x000000010060e180</span><br><span class="line"></span><br><span class="line">(lldb) p $3-&gt;data()</span><br><span class="line">(class_rw_t *) $4 &#x3D; 0x0000000100605fd0</span><br><span class="line"></span><br><span class="line">(lldb) p *$4</span><br><span class="line">(class_rw_t) $5 &#x3D; &#123;</span><br><span class="line">  flags &#x3D; 3592064</span><br><span class="line">  witness &#x3D; 1</span><br><span class="line">  ro_or_rw_ext &#x3D; &#123;</span><br><span class="line">    std::__1::atomic&lt;unsigned long&gt; &#x3D; &#123;</span><br><span class="line">      Value &#x3D; 4301317328</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  firstSubclass &#x3D; 0x000000010060e4d8</span><br><span class="line">  nextSiblingClass &#x3D; 0x000000010060e4d8</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(lldb) p $4-&gt;properties()</span><br><span class="line">(const property_array_t) $8 &#x3D; &#123;</span><br><span class="line">  list_array_tt&lt;property_t, property_list_t, RawPtr&gt; &#x3D; &#123;</span><br><span class="line">     &#x3D; &#123;</span><br><span class="line">      list &#x3D; &#123;</span><br><span class="line">        ptr &#x3D; 0x0000000100606a50</span><br><span class="line">      &#125;</span><br><span class="line">      arrayAndFlag &#x3D; 4301285968</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进一步的验证还有待去探索，先到这里，之后补充。</p><h1 id="2-属性和成员变量"><a href="#2-属性和成员变量" class="headerlink" title="2. 属性和成员变量"></a>2. 属性和成员变量</h1><p>我们在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@interface Person : NSObject</span><br><span class="line">&#123;</span><br><span class="line">    NSString *hobby;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, copy) NSString *name;</span><br><span class="line"></span><br><span class="line">+ (void)sayHello;</span><br><span class="line">- (void)sayHi;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>通过clang，将main.m生成cpp文件查看类中两者的区别。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">typedef struct objc_object Person;</span><br><span class="line"></span><br><span class="line">struct Person_IMPL &#123;</span><br><span class="line">struct NSObject_IMPL NSObject_IVARS;</span><br><span class="line">NSString *hobby;</span><br><span class="line">  &#x2F;&#x2F; 声明的属性name</span><br><span class="line">NSString *_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; @property (nonatomic, copy) NSString *name;</span><br><span class="line">&#x2F;&#x2F; + (void)sayHello;</span><br><span class="line">&#x2F;&#x2F; - (void)sayHi;</span><br><span class="line"></span><br><span class="line">&#x2F;* @end *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; @implementation Person</span><br><span class="line">static void _C_Person_sayHello(Class self, SEL _cmd) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void _I_Person_sayHi(Person * self, SEL _cmd) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static NSString * _I_Person_name(Person * self, SEL _cmd) &#123; return (*(NSString **)((char *)self + OBJC_IVAR_$_Person$_name)); &#125;</span><br><span class="line">extern &quot;C&quot; __declspec(dllimport) void objc_setProperty (id, SEL, long, id, bool, bool);</span><br><span class="line"></span><br><span class="line">static void _I_Person_setName_(Person * self, SEL _cmd, NSString *name) &#123; objc_setProperty (self, _cmd, __OFFSETOFIVAR__(struct Person, _name), (id)name, 0, 1); &#125;</span><br><span class="line">&#x2F;&#x2F; @end</span><br></pre></td></tr></table></figure><p>我们发现，声明的属性name，被直接转化成了带有下划线的成员变量。同时在实现中，多了set、get方法。</p><ol><li>属性： 在cpp文件中属性有下划线，并且自动生成set和get方法</li><li>成员变量：没有下划线，没有set、get方法</li><li>实例变量：特殊的的成员变量（类的实例化）</li></ol><h1 id="3-方法"><a href="#3-方法" class="headerlink" title="3. 方法"></a>3. 方法</h1><p>我们在类中声明的方法都在<code>method_list_t</code>中，发现这里并没有我们的类方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">static struct &#x2F;*_method_list_t*&#x2F; &#123;</span><br><span class="line">unsigned int entsize;  &#x2F;&#x2F; sizeof(struct _objc_method)</span><br><span class="line">unsigned int method_count;</span><br><span class="line">struct _objc_method method_list[5];</span><br><span class="line">&#125; _OBJC_$_INSTANCE_METHODS_Person __attribute__ ((used, section (&quot;__DATA,__objc_const&quot;))) &#x3D; &#123;</span><br><span class="line">sizeof(_objc_method),</span><br><span class="line">5,</span><br><span class="line">&#123;&#123;(struct objc_selector *)&quot;sayHi&quot;, &quot;v16@0:8&quot;, (void *)_I_Person_sayHi&#125;,</span><br><span class="line">&#123;(struct objc_selector *)&quot;name&quot;, &quot;@16@0:8&quot;, (void *)_I_Person_name&#125;,</span><br><span class="line">&#123;(struct objc_selector *)&quot;setName:&quot;, &quot;v24@0:8@16&quot;, (void *)_I_Person_setName_&#125;,</span><br><span class="line">&#123;(struct objc_selector *)&quot;name&quot;, &quot;@16@0:8&quot;, (void *)_I_Person_name&#125;,</span><br><span class="line">&#123;(struct objc_selector *)&quot;setName:&quot;, &quot;v24@0:8@16&quot;, (void *)_I_Person_setName_&#125;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>因为类方法在元类里头。<br>类方法的声明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">static struct &#x2F;*_method_list_t*&#x2F; &#123;</span><br><span class="line">unsigned int entsize;  &#x2F;&#x2F; sizeof(struct _objc_method)</span><br><span class="line">unsigned int method_count;</span><br><span class="line">struct _objc_method method_list[1];</span><br><span class="line">&#125; _OBJC_$_CLASS_METHODS_Person __attribute__ ((used, section (&quot;__DATA,__objc_const&quot;))) &#x3D; &#123;</span><br><span class="line">sizeof(_objc_method),</span><br><span class="line">1,</span><br><span class="line">&#123;&#123;(struct objc_selector *)&quot;sayHello&quot;, &quot;v16@0:8&quot;, (void *)_C_Person_sayHello&#125;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里我们以name的get方法为例子，说明一下这都是什么意思：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (NSString *)getName;</span><br><span class="line">&#123;(struct objc_selector *)&quot;name&quot;, &quot;@16@0:8&quot;, (void *)_I_Person_name&#125;</span><br></pre></td></tr></table></figure><p><img src="function_table.png" alt=""></p><blockquote><p>@16@0:8</p></blockquote><ul><li>‘@’：第一个@表示返回值，对象</li><li>‘16’：16个字节</li><li>‘@’：第二个@表示对象类型(id)</li><li>‘0’：我们知道@表示对象，0表示从0开始，占8个字节</li><li>‘:’：SEL，方法明</li><li>‘8’：表示从8开始，占8个字节，满足一共16个字节</li></ul><p>sel 和 imp<br>sel：方法名<br>imp：方法实现。函数指针地址</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>实例对象、类对象、元类。一切皆为对象，主要因为objc_object这个结构体。</li><li>isa的走位图，superClass的指向</li><li>属性、变量，实例方法、类方法的存放<ul><li>属性、变量的区别，存放的位置</li><li>实例方法放在类对象的列表；类方法的存放在元类的方法列表</li></ul></li><li>sel、imp的区别</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-对象、类对象、元类&quot;&gt;&lt;a href=&quot;#1-对象、类对象、元类&quot; class=&quot;headerlink&quot; title=&quot;1. 对象、类对象、元类&quot;&gt;&lt;/a&gt;1. 对象、类对象、元类&lt;/h1&gt;&lt;h2 id=&quot;1-1-isa指向、superClass指向&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
      <category term="runtime" scheme="http://liujiaboy.github.io/tags/runtime/"/>
    
  </entry>
  
  <entry>
    <title>3.对象的本质</title>
    <link href="http://liujiaboy.github.io/2021/04/18/OC%E5%8E%9F%E7%90%86/%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
    <id>http://liujiaboy.github.io/2021/04/18/OC%E5%8E%9F%E7%90%86/%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9C%AC%E8%B4%A8/</id>
    <published>2021-04-18T05:39:47.000Z</published>
    <updated>2021-05-10T08:35:30.515Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇使用的objc源码版本位818.2</p></blockquote><h1 id="1-clang介绍"><a href="#1-clang介绍" class="headerlink" title="1. clang介绍"></a>1. clang介绍</h1><p>Clang是一个由Apple主导的使用C++编写、基于LLVM、发布于LLVM BSD许可证下的C/C++/Objective-C/Objective-C++编译器。它与GNU C语言规范几乎完全兼容(当然，也有部分不兼容的内容， 包括编译命令选项也会有点差异)，并在此基础上增加了额外的语法特性，比如C函数重载 (通过<strong>attribute</strong>((overloadable))来修饰函数)，其目标(之一)就是超越GCC。</p><p>2013年4月,Clang已经全面支持C++11标准，并开始实现C++1y特性(也就是C++14，这是 C++的下一个小更新版本)。Clang将支持其普通lambda表达式、返回类型的简化处理以及更好的处理constexpr关键字。 </p><h2 id="1-1-clang的简单使用"><a href="#1-1-clang的简单使用" class="headerlink" title="1.1 clang的简单使用"></a>1.1 clang的简单使用</h2><p>我们通常想看代码的内部实现逻辑，通常会把源文件转换成cpp文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -rewrite-objc main.m -o main.cpp</span><br></pre></td></tr></table></figure><ul><li>main.m 目标文件</li><li>main.cpp 转换后的文件</li></ul><h2 id="1-2-UIKit报错问题"><a href="#1-2-UIKit报错问题" class="headerlink" title="1.2 UIKit报错问题"></a>1.2 UIKit报错问题</h2><p>当我们想转化带有UIKit相关的的东西时，上面的命令就会报错了。使用如下命令即可</p><p>clang -rewrite-objc -fobjc-arc -fobjc-runtime=ios-14.0.0 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator14.3.sdk ViewController.m</p><p>如果还会报错，多数是因为<code>iPhoneSimulator14.3.sdk</code>没有找到，则通过xcode-contents找到对应的sdk即可。 </p><h2 id="1-3-xcrun"><a href="#1-3-xcrun" class="headerlink" title="1.3 xcrun"></a>1.3 xcrun</h2><p>xcode安装的时候顺带安装了<code>xcrun</code>命令，<code>xcrun</code>命令在<code>clang</code>的基础上进行了一些封装，要更好用一些。</p><ul><li><p>模拟器 - 使用如下命令<br>xcrun -sdk iphonesimulator clang -arch arm64 -rewrite-objc main.m -o main-arm64.cpp </p></li><li><p>真机<br>xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc main.m -o main-arm64.cpp</p></li></ul><h1 id="2-类"><a href="#2-类" class="headerlink" title="2. 类"></a>2. 类</h1><p>在main.m下创建一个Person类，然后通过上面的clang命令，找到我们需要的cpp文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@interface APerson : NSObject</span><br><span class="line">&#x2F;&#x2F; 添加一个属性，方便确认这就是我们要找的类</span><br><span class="line">@property (nonatomic, copy) NSString *name;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation APerson</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>转化之后，在cpp文件里，我们找到了如下的结构体。</p><h2 id="2-1-类的声明"><a href="#2-1-类的声明" class="headerlink" title="2.1 类的声明"></a>2.1 类的声明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; @interface APerson : NSObject。声明</span><br><span class="line">struct APerson_IMPL &#123;</span><br><span class="line">struct NSObject_IMPL NSObject_IVARS;</span><br><span class="line">NSString *_name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们发现，一个对象，它本身就是一个结构体，因为是继承自NSObject，他内部的第一个变量就是NSObject。而<code>NSObject_IVARS</code>就是我们经常说的isa指针。</p><h2 id="2-2-类的实现"><a href="#2-2-类的实现" class="headerlink" title="2.2 类的实现"></a>2.2 类的实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; @implementation APerson</span><br><span class="line"></span><br><span class="line">static NSString * _I_APerson_name(APerson * self, SEL _cmd) </span><br><span class="line">&#123; return (*(NSString **)((char *)self + OBJC_IVAR_$_APerson$_name)); &#125;</span><br><span class="line">extern &quot;C&quot; __declspec(dllimport) void objc_setProperty (id, SEL, long, id, bool, bool);</span><br><span class="line"></span><br><span class="line">static void _I_APerson_setName_(APerson * self, SEL _cmd, NSString *name) </span><br><span class="line">&#123; objc_setProperty (self, _cmd, __OFFSETOFIVAR__(struct APerson, _name), (id)name, 0, 1); &#125;</span><br><span class="line">&#x2F;&#x2F; @end</span><br></pre></td></tr></table></figure><p>我们在上面的代码里，看到了两个方法</p><ol><li><code>_I_APerson_name</code>：这是一个get方法，直接做了一个return操作。</li><li><code>_I_APerson_setName_</code>：这是一个set方法，调用了<code>objc_setProperty</code>。</li></ol><h3 id="2-2-1-set方法"><a href="#2-2-1-set方法" class="headerlink" title="2.2.1 set方法"></a>2.2.1 set方法</h3><p>通过objc的源码，我们查找<code>objc_setProperty</code>方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void objc_setProperty(id self, SEL _cmd, ptrdiff_t offset, id newValue, BOOL atomic, signed char shouldCopy) </span><br><span class="line">&#123;</span><br><span class="line">    bool copy &#x3D; (shouldCopy &amp;&amp; shouldCopy !&#x3D; MUTABLE_COPY);</span><br><span class="line">    bool mutableCopy &#x3D; (shouldCopy &#x3D;&#x3D; MUTABLE_COPY);</span><br><span class="line">    reallySetProperty(self, _cmd, newValue, offset, atomic, copy, mutableCopy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部判断是通过copy还是mutableCopy，然后调用<code>reallySetProperty</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">static inline void reallySetProperty(id self, SEL _cmd, id newValue, ptrdiff_t offset, bool atomic, bool copy, bool mutableCopy)</span><br><span class="line">&#123;</span><br><span class="line">    if (offset &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        object_setClass(self, newValue);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    id oldValue;</span><br><span class="line">    id *slot &#x3D; (id*) ((char*)self + offset);</span><br><span class="line"></span><br><span class="line">    if (copy) &#123;</span><br><span class="line">        newValue &#x3D; [newValue copyWithZone:nil];</span><br><span class="line">    &#125; else if (mutableCopy) &#123;</span><br><span class="line">        newValue &#x3D; [newValue mutableCopyWithZone:nil];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (*slot &#x3D;&#x3D; newValue) return;</span><br><span class="line">        newValue &#x3D; objc_retain(newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!atomic) &#123;</span><br><span class="line">        oldValue &#x3D; *slot;</span><br><span class="line">        *slot &#x3D; newValue;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        spinlock_t&amp; slotlock &#x3D; PropertyLocks[slot];</span><br><span class="line">        slotlock.lock();</span><br><span class="line">        oldValue &#x3D; *slot;</span><br><span class="line">        *slot &#x3D; newValue;        </span><br><span class="line">        slotlock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    objc_release(oldValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里最主要的操作，就是对oldvalue进行release操作，新值进行retain操作。</p><p>这也是经常在面试时，经常会问的，声明一个@property内部有哪些操作的的答案。以及内部实现。</p><h1 id="3-isa"><a href="#3-isa" class="headerlink" title="3. isa"></a>3. isa</h1><p>我们应该还记得在【alloc、init、new】这一节中有<code>callAlloc</code>这个方法，这个方法有一步操作是进行对象关联。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">obj-&gt;initInstanceIsa(cls, hasCxxDtor);</span><br><span class="line"></span><br><span class="line">inline void </span><br><span class="line">objc_object::initInstanceIsa(Class cls, bool hasCxxDtor)</span><br><span class="line">&#123;</span><br><span class="line">    ASSERT(!cls-&gt;instancesRequireRawIsa());</span><br><span class="line">    ASSERT(hasCxxDtor &#x3D;&#x3D; cls-&gt;hasCxxDtor());</span><br><span class="line"></span><br><span class="line">    initIsa(cls, true, hasCxxDtor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就看看这里是怎么搞的。对代码进行了简化，如果有需要请自行查看源码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">inline void </span><br><span class="line">objc_object::initIsa(Class cls, bool nonpointer, UNUSED_WITHOUT_INDEXED_ISA_AND_DTOR_BIT bool hasCxxDtor)</span><br><span class="line">&#123; </span><br><span class="line">    ASSERT(!isTaggedPointer()); </span><br><span class="line">    &#x2F;&#x2F; 这个是重点，创建一个isa_t，这个isa_t是啥呢？我们点进去看一下。</span><br><span class="line">    isa_t newisa(0);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 以下代码可以等先看我isa_t之后再回过头来看。</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 对bits内容赋默认值</span><br><span class="line">    newisa.bits &#x3D; ISA_MAGIC_VALUE;      </span><br><span class="line">    &#x2F;&#x2F; isa.magic is part of ISA_MAGIC_VALUE</span><br><span class="line">    &#x2F;&#x2F; isa.nonpointer is part of ISA_MAGIC_VALUE</span><br><span class="line">    newisa.has_cxx_dtor &#x3D; hasCxxDtor;</span><br><span class="line">    &#x2F;&#x2F; 这里是关联对象，就是本节的重点内容，我们进去看这个setClass是怎么实现的。</span><br><span class="line">    newisa.setClass(cls, this);</span><br><span class="line">    newisa.extra_rc &#x3D; 1;</span><br><span class="line">    isa &#x3D; newisa;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们先看下isa_t</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">union isa_t &#123;</span><br><span class="line">    isa_t() &#123; &#125;</span><br><span class="line">    isa_t(uintptr_t value) : bits(value) &#123; &#125;</span><br><span class="line">    uintptr_t bits;</span><br><span class="line">private: &#x2F;&#x2F;这是个私有的，不会主动赋值，而是通过赋值别的变量时给的。</span><br><span class="line">    Class cls;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">#if defined(ISA_BITFIELD)</span><br><span class="line">    struct &#123;</span><br><span class="line">        ISA_BITFIELD;  &#x2F;&#x2F; defined in isa.h</span><br><span class="line">    &#125;;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    void setClass(Class cls, objc_object *obj);</span><br><span class="line">    Class getClass(bool authenticated);</span><br><span class="line">    Class getDecodedClass(bool authenticated);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码做了精简处理，看起来会容易点，这个其实就是一个<b>【联合位域】</b>。<br>union是联合体。里面有一个struct。这种方式就是为了优化内存空间，在极少的内存情况下，来使用。举个例子来看一下：</p><p>如果我们需要声明一个car的类，定义4个属性，前后左右行驶。如果是int类型的数据，那就是需要4 * 4 = 16个字节的空间，也就是128位。但是如果使用联合位域的话，就可以极大的减少空间。只需要4位就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">union car &#123;</span><br><span class="line">    struct &#123;</span><br><span class="line">        char forward;   &#x2F;&#x2F;1</span><br><span class="line">        char back;      &#x2F;&#x2F;1</span><br><span class="line">        char left;      &#x2F;&#x2F;1</span><br><span class="line">        char right;     &#x2F;&#x2F;1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是<code>0000</code>，第一个0代表的是前，第二个0代表后，依次类推。</p><p>知道了联合位域的大概情况，我们就看一下这个<code>ISA_BITFIELD</code>是个什么东西。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">define ISA_MASK        0x0000000ffffffff8ULL</span><br><span class="line">#     define ISA_MAGIC_MASK  0x000003f000000001ULL</span><br><span class="line">#     define ISA_MAGIC_VALUE 0x000001a000000001ULL</span><br><span class="line">#     define ISA_HAS_CXX_DTOR_BIT 1</span><br><span class="line">#     define ISA_BITFIELD                                                      \</span><br><span class="line">        uintptr_t nonpointer        : 1;                                       \</span><br><span class="line">        uintptr_t has_assoc         : 1;                                       \</span><br><span class="line">        uintptr_t has_cxx_dtor      : 1;                                       \</span><br><span class="line">        uintptr_t shiftcls          : 33; &#x2F;*MACH_VM_MAX_ADDRESS 0x1000000000*&#x2F; \</span><br><span class="line">        uintptr_t magic             : 6;                                       \</span><br><span class="line">        uintptr_t weakly_referenced : 1;                                       \</span><br><span class="line">        uintptr_t unused            : 1;                                       \</span><br><span class="line">        uintptr_t has_sidetable_rc  : 1;                                       \</span><br><span class="line">        uintptr_t extra_rc          : 19</span><br><span class="line">#     define RC_ONE   (1ULL&lt;&lt;45)</span><br><span class="line">#     define RC_HALF  (1ULL&lt;&lt;18)</span><br></pre></td></tr></table></figure><p><img src="isa_t.png" alt=""></p><p>注意：这个是ARM64下的存储，而使用（非M1芯片）电脑本地运行的的都是基于x86_64的，所以这里面的值存储的位置是有些变化的。</p><p>特别提一下shiftcls，在ARM64下是33位，在x86下是44位，导致magic开始的位置分别是36和47，这个位置一会有用到。</p><ul><li>nonpointer:表示是否对 isa 指针开启指针优化 0:纯isa指针，1:不止是类对象地址,isa 中包含了类信息、对象的引用计数等</li><li>has_assoc:关联对象标志位，0没有，1存在</li><li>has_cxx_dtor:该对象是否有 C++ 或者 Objc 的析构器,如果有析构函数,则需要做析构逻辑, 如果没有,则可以更快的释放对象。oc中的<code>dealloc</code></li><li>shiftcls:存储类指针的值。开启指针优化的情况下，在 arm64 架构中有 33 位用来存储类指针。</li><li>magic:用于调试器判断当前对象是真的对象还是没有初始化的空</li><li>weakly_referenced:志对象是否被指向或者曾经指向一个 ARC 的弱变量，没有弱引用的对象可以更快释放。 </li><li>unsed:不同版本的是<code>deallocating</code>，标志对象是否正在释放内存</li><li>has_sidetable_rc:当对象引用技术大于 10 时，则需要借用该变量存储进位</li><li>extra_rc:当表示该对象的引用计数值，实际上是引用计数值减 1， 例如，如果对象的引用计数为 10，那么 extra_rc 为 9。如果引用计数大于 10， 则需要使用到下面的 has_sidetable_rc。</li></ul><p>我们了解了isa是啥东西了之后，在回过头看看是怎么进行管理对象的。了解上面的代码之后，我们继续看setCalss是怎么实现的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 对代码进行了简化，</span><br><span class="line">inline void</span><br><span class="line">isa_t::setClass(Class newCls, UNUSED_WITHOUT_PTRAUTH objc_object *obj)</span><br><span class="line">&#123;</span><br><span class="line">    shiftcls &#x3D; (uintptr_t)newCls &gt;&gt; 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是很不可思议，只是通过newCls向右偏移了3位。为啥偏移3位？<br>我们知道isa-&gt;shiftcls存储类指针的值。是从isa的内存里面第3位开始的。就这么简单。因为在内存里没有办法直接存储类名，所以通过存储数字替带。</p><h2 id="3-1-验证isa指针的关联过程"><a href="#3-1-验证isa指针的关联过程" class="headerlink" title="3.1 验证isa指针的关联过程"></a>3.1 验证isa指针的关联过程</h2><p><code>Person *p = [[Person alloc] init];</code> 运行objc源码工程。<br>断点进入<code>objc_object::initIsa</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">inline void </span><br><span class="line">objc_object::initIsa(Class cls, bool nonpointer, UNUSED_WITHOUT_INDEXED_ISA_AND_DTOR_BIT bool hasCxxDtor)</span><br><span class="line">&#123; </span><br><span class="line">    ASSERT(!isTaggedPointer()); </span><br><span class="line">    &#x2F;&#x2F; ① 创建newisa</span><br><span class="line">    isa_t newisa(0);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; ② 对bits内容赋默认值</span><br><span class="line">    newisa.bits &#x3D; ISA_MAGIC_VALUE;      </span><br><span class="line">    &#x2F;&#x2F; isa.magic is part of ISA_MAGIC_VALUE</span><br><span class="line">    &#x2F;&#x2F; isa.nonpointer is part of ISA_MAGIC_VALUE</span><br><span class="line">    &#x2F;&#x2F; ③ </span><br><span class="line">    newisa.has_cxx_dtor &#x3D; hasCxxDtor;</span><br><span class="line">    &#x2F;&#x2F; ④ 这里是关联对象，就是本节的重点内容，我们进去看这个setClass是怎么实现的。</span><br><span class="line">    newisa.setClass(cls, this);</span><br><span class="line">    newisa.extra_rc &#x3D; 1;</span><br><span class="line">    isa &#x3D; newisa;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当断点走到②的时候。我们输出一些newisa的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(lldb) p newisa</span><br><span class="line">(isa_t) $1 &#x3D; &#123;</span><br><span class="line">  bits &#x3D; 0</span><br><span class="line">  cls &#x3D; nil</span><br><span class="line">   &#x3D; &#123;</span><br><span class="line">    nonpointer &#x3D; 0</span><br><span class="line">    has_assoc &#x3D; 0</span><br><span class="line">    has_cxx_dtor &#x3D; 0</span><br><span class="line">    shiftcls &#x3D; 0</span><br><span class="line">    magic &#x3D; 0</span><br><span class="line">    weakly_referenced &#x3D; 0</span><br><span class="line">    unused &#x3D; 0</span><br><span class="line">    has_sidetable_rc &#x3D; 0</span><br><span class="line">    extra_rc &#x3D; 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续执行下一步，仍然输出newisa</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(lldb) p newisa</span><br><span class="line">(isa_t) $5 &#x3D; &#123;</span><br><span class="line">  bits &#x3D; 8303511812964353</span><br><span class="line">  cls &#x3D; 0x001d800000000001</span><br><span class="line">   &#x3D; &#123;</span><br><span class="line">    nonpointer &#x3D; 1</span><br><span class="line">    has_assoc &#x3D; 0</span><br><span class="line">    has_cxx_dtor &#x3D; 0</span><br><span class="line">    shiftcls &#x3D; 0</span><br><span class="line">    magic &#x3D; 59</span><br><span class="line">    weakly_referenced &#x3D; 0</span><br><span class="line">    unused &#x3D; 0</span><br><span class="line">    has_sidetable_rc &#x3D; 0</span><br><span class="line">    extra_rc &#x3D; 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现有了变化，bits有初值了，cls也被赋值了，而且magic也被赋值了。这些都是默认值，我们上面说了isa的内部是64位的数据。我们把cls的值，放在二进制的计算器里，看看是什么内容。第一位1对应的是nonpointer=1</p><p><img src="magic_47.png" alt=""></p><p>看这个图，第47位开始的6位数据是110111，这个二进制数是什么？正好是59。</p><p>之后，继续断点下一步。走到④。然后进到setClass方法内部，我们执行语句，看看cls偏移后的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(lldb) po (uintptr_t)newCls</span><br><span class="line">(uintptr_t) $15 &#x3D; 4295000320</span><br><span class="line">(lldb) po (uintptr_t)newCls &gt;&gt; 3</span><br><span class="line">536875040</span><br></pre></td></tr></table></figure><p>然后继续下一步，打印newisa</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">lldb) p newisa</span><br><span class="line">(isa_t) $11 &#x3D; &#123;</span><br><span class="line">  bits &#x3D; 8303516107964673</span><br><span class="line">  cls &#x3D; Person</span><br><span class="line">   &#x3D; &#123;</span><br><span class="line">    nonpointer &#x3D; 1</span><br><span class="line">    has_assoc &#x3D; 0</span><br><span class="line">    has_cxx_dtor &#x3D; 0</span><br><span class="line">    shiftcls &#x3D; 536875040</span><br><span class="line">    magic &#x3D; 59</span><br><span class="line">    weakly_referenced &#x3D; 0</span><br><span class="line">    unused &#x3D; 0</span><br><span class="line">    has_sidetable_rc &#x3D; 0</span><br><span class="line">    extra_rc &#x3D; 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯哼。。。。。是不是，就是这么牛。shiftcls是啥，存储类指针的值。也验证了我们上面说的，是从isa的内存里面第3位开始的。就这么简单。因为在内存里没有办法直接存储类名，所以通过存储数字替带。</p><p>我们继续执行，返回到<code>_class_createInstanceFromZone</code>这个函数里，<br>然后先停一停哈，不要走断点了哈~我们来通过<code>object_getClass</code>在来验证一下。</p><h2 id="3-2-反向验证"><a href="#3-2-反向验证" class="headerlink" title="3.2 反向验证"></a>3.2 反向验证</h2><p>我们通过object_getClass来反向验证isa指向。这里全部对代码进行了简化。如有需要请自行查看源码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Class object_getClass(id obj)</span><br><span class="line">&#123;</span><br><span class="line">    if (obj) return obj-&gt;getIsa();</span><br><span class="line">    else return Nil;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline Class</span><br><span class="line">objc_object::getIsa() </span><br><span class="line">&#123;</span><br><span class="line">    if (fastpath(!isTaggedPointer())) return ISA();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inline Class</span><br><span class="line">objc_object::ISA(bool authenticated)</span><br><span class="line">&#123;</span><br><span class="line">    ASSERT(!isTaggedPointer());</span><br><span class="line">    return isa.getDecodedClass(authenticated);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline Class</span><br><span class="line">isa_t::getClass(MAYBE_UNUSED_AUTHENTICATED_PARAM bool authenticated) &#123;</span><br><span class="line">    uintptr_t clsbits &#x3D; bits;</span><br><span class="line">    clsbits &amp;&#x3D; ISA_MASK;</span><br><span class="line">    return (Class)clsbits;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终于看到了结果了，最后就是通过<code>bits &amp; ISA_MASK</code>来返回当前class的。还记得bits是啥吗？往上翻一下，bits是isa指针内部的第一个元素。所以我们按照这个&amp;运算来验证一些，返回的数据是不是person</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(lldb) x&#x2F;4gx obj</span><br><span class="line">0x10060d9b0: 0x011d800100008101 0x0000000000000000</span><br><span class="line">0x10060d9c0: 0x0000000000000000 0x86c8f7c495bce30f</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 拿第一位的地址进行&amp;运算，注意这里是在mac上，所以使用x86下的ISA_MASK值</span><br><span class="line">(lldb) po 0x011d800100008101 &amp; 0x00007ffffffffff8ULL</span><br><span class="line">Person</span><br></pre></td></tr></table></figure><p>以上就是isa的全部内容了。但是isa里面的这些东西是真的有用吗？肯定是有用的啊，我们从dealloc的函数实现去找到蛛丝马迹。</p><h1 id="4-dealloc"><a href="#4-dealloc" class="headerlink" title="4. dealloc"></a>4. dealloc</h1><p>在objc源码中找到dealloc的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (void)dealloc &#123;</span><br><span class="line">    _objc_rootDealloc(self);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void</span><br><span class="line">_objc_rootDealloc(id obj)</span><br><span class="line">&#123;</span><br><span class="line">    ASSERT(obj);</span><br><span class="line"></span><br><span class="line">    obj-&gt;rootDealloc();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，见证奇迹的时候到了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">inline void</span><br><span class="line">objc_object::rootDealloc()</span><br><span class="line">&#123;</span><br><span class="line">    if (isTaggedPointer()) return;  &#x2F;&#x2F; fixme necessary?</span><br><span class="line"></span><br><span class="line">    if (fastpath(isa.nonpointer                     &amp;&amp;</span><br><span class="line">         !isa.weakly_referenced             &amp;&amp;</span><br><span class="line">         !isa.has_assoc                     &amp;&amp;</span><br><span class="line">#if ISA_HAS_CXX_DTOR_BIT</span><br><span class="line">         !isa.has_cxx_dtor                  &amp;&amp;</span><br><span class="line">#else</span><br><span class="line">         !isa.getClass(false)-&gt;hasCxxDtor() &amp;&amp;</span><br><span class="line">#endif</span><br><span class="line">         !isa.has_sidetable_rc))</span><br><span class="line">    &#123;</span><br><span class="line">        assert(!sidetable_present());</span><br><span class="line">        free(this);</span><br><span class="line">    &#125; </span><br><span class="line">    else &#123;</span><br><span class="line">        object_dispose((id)this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面<code>objc_object::rootDealloc</code>中对isa的各个属性的值来判断是执行<code>free</code>操作或者<code>object_dispose</code>。free函数就不用多说了，来看看dispose操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">id </span><br><span class="line">object_dispose(id obj)</span><br><span class="line">&#123;</span><br><span class="line">    if (!obj) return nil;</span><br><span class="line"></span><br><span class="line">    objc_destructInstance(obj);    </span><br><span class="line">    free(obj);</span><br><span class="line"></span><br><span class="line">    return nil;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void *objc_destructInstance(id obj) </span><br><span class="line">&#123;</span><br><span class="line">    if (obj) &#123;</span><br><span class="line">        &#x2F;&#x2F; Read all of the flags at once for performance.</span><br><span class="line">        bool cxx &#x3D; obj-&gt;hasCxxDtor();</span><br><span class="line">        bool assoc &#x3D; obj-&gt;hasAssociatedObjects();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; This order is important.</span><br><span class="line">        if (cxx) object_cxxDestruct(obj);</span><br><span class="line">        if (assoc) _object_remove_assocations(obj, &#x2F;*deallocating*&#x2F;true);</span><br><span class="line">        obj-&gt;clearDeallocating();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是整个的dealloc的流程。通过源码只是来加深对这些流程的印象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本篇使用的objc源码版本位818.2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-clang介绍&quot;&gt;&lt;a href=&quot;#1-clang介绍&quot; class=&quot;headerlink&quot; title=&quot;1. clang介绍&quot;&gt;&lt;/a&gt;1. c
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
      <category term="runtime" scheme="http://liujiaboy.github.io/tags/runtime/"/>
    
      <category term="clang" scheme="http://liujiaboy.github.io/tags/clang/"/>
    
  </entry>
  
  <entry>
    <title>2.内存对齐</title>
    <link href="http://liujiaboy.github.io/2021/04/17/OC%E5%8E%9F%E7%90%86/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"/>
    <id>http://liujiaboy.github.io/2021/04/17/OC%E5%8E%9F%E7%90%86/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</id>
    <published>2021-04-17T10:34:07.000Z</published>
    <updated>2021-05-10T08:35:30.515Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-对象的内存对齐"><a href="#1-对象的内存对齐" class="headerlink" title="1. 对象的内存对齐"></a>1. 对象的内存对齐</h1><p>先看代码哈~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@interface Person : NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic, copy) NSString *name;</span><br><span class="line">@property (nonatomic, assign) int age;</span><br><span class="line">@property (nonatomic, assign) int score;</span><br><span class="line">@property (nonatomic, assign) long height;</span><br><span class="line">@property (nonatomic) char c1;</span><br><span class="line">@property (nonatomic) char c2;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line"></span><br><span class="line">Person *person &#x3D; [Person alloc];</span><br><span class="line">person.name &#x3D; @&quot;name&quot;;</span><br><span class="line">person.age &#x3D; 18;</span><br><span class="line">person.score &#x3D; 20;</span><br><span class="line">person.height &#x3D; 180;</span><br><span class="line">person.c1 &#x3D; &#39;a&#39;;</span><br><span class="line">person.c2 &#x3D; &#39;b&#39;;</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;%@ - %lu - %lu - %lu&quot;,person,sizeof(person),class_getInstanceSize([Person class]),malloc_size((__bridge const void *)(person)));</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在NSLog上打个断点。有时间的话，可以把属性先注释掉，从0开始，一个属性一个属性的加起来看输出的是什么结果。</p><ol><li><p>po 这里直接输出person指向的对象的内存地址。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lldb) po person</span><br><span class="line">&lt;Person: 0x600002adbcf0&gt;</span><br></pre></td></tr></table></figure></li><li><p>这里有一个需要介绍的点，上一章中有用到x person命令，输出的内容与<code>View Memory</code>中显示的是一致的。而<code>x/8gx</code>就是进行排序。8代表的是输出8组内存。如果是4那就是输出4组内容。每一块都是8个字节。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(lldb) x&#x2F;8gx person</span><br><span class="line">0x600002adbcf0: 0x0000000103930808 0x0000001200006261</span><br><span class="line">0x600002adbd00: 0x0000000000000014 0x000000010392b038</span><br><span class="line">0x600002adbd10: 0x00000000000000b4 0x0000000000000000</span><br><span class="line">0x600002adbd20: 0x0000c1c5c19bbd20 0x00000000000007fb</span><br></pre></td></tr></table></figure><p> 0x600002adbcf0：是person指向的首地址。后面存放的都是属性的值。内存都是连续的。</p></li><li><p>我们分别输出内存里的内容。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(lldb) po 0x0000000103930808</span><br><span class="line">Person  &#x2F;&#x2F; isa指针</span><br><span class="line"></span><br><span class="line">(lldb) po 0x00000012</span><br><span class="line">18</span><br><span class="line"></span><br><span class="line">(lldb) po 61</span><br><span class="line">61</span><br><span class="line"></span><br><span class="line">(lldb) po 0x0000000000000014</span><br><span class="line">20</span><br><span class="line"></span><br><span class="line">(lldb) po 0x000000010392b038</span><br><span class="line">name</span><br><span class="line"></span><br><span class="line">(lldb) po 0x00000000000000b4</span><br><span class="line">180</span><br></pre></td></tr></table></figure><p> 0x0000001200006261：这一块地址上内容是被拆开的。我们知道int是4个字节，char是1个字节，所以前面的几位是int的值，后面的再进行拆分，分别是两个char类型的数据。</p><p> 苹果在内存上也是做了足够多的优化，虽然在内存上是16个字节对齐的，但是在内部实现上，还是进行了大量的优化，但是一定要注意的是，属性是按8个字节对齐的。</p><p> 但是为啥两个int类型的数据没有放在一起呢？可能是系统内部做的优化，可以试一下，把所有的char类型注释掉，两个int类型的数据就会存放在一起。可能是会将char类型的数据优先进行填充吧。另外可以多试一下，3个char类型的会怎么样？</p></li><li><p>最后输出的结果是</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Person: 0x600002adbcf0&gt; - 8 - 40 - 48</span><br></pre></td></tr></table></figure><p> 我们分析一下输出的内容：</p><ul><li>person：当前的类对象，存放的指针，指向的内存地址。</li><li>sizeof(person)：person存放的就是一个指针，8个字节。</li><li>class_getInstanceSize([Person class])：这个类真正需要的空间。属性是8个字节对齐的。</li><li>malloc_size((__bridge const void *)(person))：内存中需要开辟的空间。内存空间是16个字节对齐的。</li></ul></li></ol><h1 id="1-1-float、double"><a href="#1-1-float、double" class="headerlink" title="1.1 float、double"></a>1.1 float、double</h1><p>加如改变其中的一个属性位double类型的，又会是什么情况呢？我这里把上面的height改为了double类型。看一下输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(lldb) x&#x2F;8gx person</span><br><span class="line">0x600000045530: 0x000000010626d808 0x0000001200006261</span><br><span class="line">0x600000045540: 0x0000000000000014 0x0000000106268038</span><br><span class="line">0x600000045550: 0x4066800000000000 0x0000000000000000</span><br><span class="line">0x600000045560: 0x0000000000000000 0x0000000000000000</span><br><span class="line">(lldb) po 0x4066800000000000</span><br><span class="line">4640537203540230144</span><br></pre></td></tr></table></figure><p>诶<del>~</del> 怎么没有输出180呢？是因为对于float、double类型的数据，系统会做一次特殊的转换处理。我们没有办法直接从内存中读出double类型的值。（也有可能是我没有找到方法，有知道的小伙伴请告知，谢谢！）</p><p>但是我们可以通过转化double类型的数据来看是否位上面对应的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lldb) p&#x2F;x (double)180.0</span><br><span class="line">(double) $4 &#x3D; 0x4066800000000000</span><br></pre></td></tr></table></figure><p>转换后，发现正好是对应的数据。</p><h1 id="2-结构体的内存对齐"><a href="#2-结构体的内存对齐" class="headerlink" title="2. 结构体的内存对齐"></a>2. 结构体的内存对齐</h1><blockquote><ol><li>数据成员对⻬规则：结构体(struct)的数据成员，第一个数据成员放在offset为0的地方，以后每个数据成员存储的起始位置要从该成员大小或者成员的子成员大小(只要该成员有子成员，比如说是数组，结构体等)的整数倍开始(比如int为4字节,则要从4的整数倍地址开始存储。</li><li>结构体作为成员：如果一个结构里有某些结构体成员，则结构体成员要从其内部最大元素大小的整数倍地址开始存储。(struct a里存有struct b，b里有char，int, double等元素，那b应该从8的整数倍开始存储)</li><li>收尾工作：结构体的总大小，也就是sizeof的结果，必须是其内部最大成员的整数倍。不足的要补⻬。</li></ol></blockquote><p>上代码，看看结构体的内存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">struct Struct1 &#123;</span><br><span class="line">    double a;   </span><br><span class="line">    char b;     </span><br><span class="line">    int c;      </span><br><span class="line">    short d;    </span><br><span class="line">&#125;str1;</span><br><span class="line"></span><br><span class="line">struct Struct2 &#123;</span><br><span class="line">    double a; </span><br><span class="line">    int b;    </span><br><span class="line">    char c;   </span><br><span class="line">    short d;  </span><br><span class="line">&#125;str2;</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;str1 &#x3D; %lu, str2-%lu&quot;,sizeof(str1),sizeof(str2));</span><br></pre></td></tr></table></figure><p>输出的结果很明白的哈。<code>str1 = 24, str2-16</code></p><p>我们分析一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">struct Struct1 &#123;</span><br><span class="line">    double a;   &#x2F;&#x2F; 8 (0-7)</span><br><span class="line">    char b;     &#x2F;&#x2F; 1 [8 1] (8)</span><br><span class="line">    int c;      &#x2F;&#x2F; 4 [9 10 11 12] 9不是4的整数倍(12 13 14 15)</span><br><span class="line">    short d;    &#x2F;&#x2F; 2 [16 17]</span><br><span class="line">&#125;str1;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 内部需要的大小为: 17</span><br><span class="line">&#x2F;&#x2F; 最大属性 : 8</span><br><span class="line">&#x2F;&#x2F; 结构体整数倍: 24</span><br><span class="line"></span><br><span class="line">struct Struct2 &#123;</span><br><span class="line">    double a;   &#x2F;&#x2F;8 (0-7)</span><br><span class="line">    int b;      &#x2F;&#x2F;4 (8 9 10 11)</span><br><span class="line">    char c;     &#x2F;&#x2F;1 (12)</span><br><span class="line">    short d;    &#x2F;&#x2F;2 (13 14) 13不是2的整数倍，从14开始(14 15)</span><br><span class="line">&#125;str2;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 内部需要的大小为: 15</span><br><span class="line">&#x2F;&#x2F; 最大属性 : 8</span><br><span class="line">&#x2F;&#x2F; 结构体整数倍: 16</span><br><span class="line">NSLog(@&quot;str1 &#x3D; %lu, str2-%lu&quot;,sizeof(str1),sizeof(str2));</span><br></pre></td></tr></table></figure><p>这就是内存补齐的内容</p><h1 id="3-总结："><a href="#3-总结：" class="headerlink" title="3. 总结："></a>3. 总结：</h1><ul><li>类对象的属性是8个字节对齐的，但是在内存空间是16个字节对齐。</li><li>x/4gx的使用</li><li>结构体的对齐规则。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-对象的内存对齐&quot;&gt;&lt;a href=&quot;#1-对象的内存对齐&quot; class=&quot;headerlink&quot; title=&quot;1. 对象的内存对齐&quot;&gt;&lt;/a&gt;1. 对象的内存对齐&lt;/h1&gt;&lt;p&gt;先看代码哈~&lt;/p&gt;
&lt;figure class=&quot;highlight plai
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
      <category term="runtime" scheme="http://liujiaboy.github.io/tags/runtime/"/>
    
  </entry>
  
  <entry>
    <title>1.alloc、init、new</title>
    <link href="http://liujiaboy.github.io/2021/04/17/OC%E5%8E%9F%E7%90%86/alloc-init-new/"/>
    <id>http://liujiaboy.github.io/2021/04/17/OC%E5%8E%9F%E7%90%86/alloc-init-new/</id>
    <published>2021-04-17T01:20:25.000Z</published>
    <updated>2021-05-10T08:35:30.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-先看一个问题"><a href="#1-先看一个问题" class="headerlink" title="1. 先看一个问题"></a>1. 先看一个问题</h1><p>我们先看一段代码，打印一下输出结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Person *p1 &#x3D; [Person alloc];</span><br><span class="line">Person *p2 &#x3D; [p1 init];</span><br><span class="line">Person *p3 &#x3D; [p1 init];</span><br><span class="line">NSLog(@&quot;%@ - %p - %p&quot;,p1,p1,&amp;p1);</span><br><span class="line">NSLog(@&quot;%@ - %p - %p&quot;,p2,p2,&amp;p2);</span><br><span class="line">NSLog(@&quot;%@ - %p - %p&quot;,p3,p3,&amp;p3);</span><br></pre></td></tr></table></figure><p>看输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Person: 0x600000c40470&gt; - 0x600000c40470 - 0x7ffee9114068</span><br><span class="line">&lt;Person: 0x600000c40470&gt; - 0x600000c40470 - 0x7ffee9114060</span><br><span class="line">&lt;Person: 0x600000c40470&gt; - 0x600000c40470 - 0x7ffee9114058</span><br></pre></td></tr></table></figure><p>前两个打印的都是当前对象的指针地址，而最后一个为啥会不一样？<br>首先需要明白p和&amp;p的区别：p是当前变量指向的地址。&amp;p是存放当前变量所在的地址。<br>这里第一个%p打印就是[Person alloc]生成的地址。第二个%p是存放的是指向【生成的对象】的地址。</p><p>也就是当前alloc生成一个对象开辟了一块内存空间。p1、p2、p3分别开辟一块地址指向alloc开辟的空间。</p><p><img src="oc-address.png" alt=""></p><h1 id="2-alloc的执行过程"><a href="#2-alloc的执行过程" class="headerlink" title="2. alloc的执行过程"></a>2. alloc的执行过程</h1><p>那我们接下来要看alloc是怎么执行的。需要看objc的源码。<a href="https://opensource.apple.com/tarballs/objc4/" target="_blank" rel="noopener">objc4源码</a>是可以直接下载的。我们这里用的是最新的818.2版本的。</p><p>通过一系列风骚的操作，我们让源码可以运行起来。通过断点和源码我们分析一下alloc的执行过程。</p><h2 id="2-1-objc-rootAlloc"><a href="#2-1-objc-rootAlloc" class="headerlink" title="2.1 _objc_rootAlloc"></a>2.1 _objc_rootAlloc</h2><p>在main.m中，创建一个对象，打上断点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person *p &#x3D; [Person alloc];</span><br><span class="line">Person *p1 &#x3D; [p init];</span><br></pre></td></tr></table></figure><p>这里只是alloc的最基本的方法。没有什么代码量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+ (id)alloc &#123;</span><br><span class="line">    return _objc_rootAlloc(self);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">id _objc_rootAlloc(Class cls)</span><br><span class="line">&#123;</span><br><span class="line">    return callAlloc(cls, false&#x2F;*checkNil*&#x2F;, true&#x2F;*allocWithZone*&#x2F;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-callAlloc"><a href="#2-2-callAlloc" class="headerlink" title="2.2 callAlloc"></a>2.2 callAlloc</h2><p>这里是核心代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">static ALWAYS_INLINE id</span><br><span class="line">callAlloc(Class cls, bool checkNil, bool allocWithZone&#x3D;false)</span><br><span class="line">&#123;</span><br><span class="line">#if __OBJC2__</span><br><span class="line">    if (slowpath(checkNil &amp;&amp; !cls)) return nil;</span><br><span class="line">    if (fastpath(!cls-&gt;ISA()-&gt;hasCustomAWZ())) &#123;</span><br><span class="line">        return _objc_rootAllocWithZone(cls, nil);   &#x2F;&#x2F; 1.</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; No shortcuts available.</span><br><span class="line">    if (allocWithZone) &#123;                            &#x2F;&#x2F; 2. </span><br><span class="line">        return ((id(*)(id, SEL, struct _NSZone *))objc_msgSend)(cls, @selector(allocWithZone:), nil);</span><br><span class="line">    &#125;</span><br><span class="line">    return ((id(*)(id, SEL))objc_msgSend)(cls, @selector(alloc)); &#x2F;&#x2F; 3.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>该处内容是现阶段alloc执行的代码</li><li>该处已经不执行了，allocWithZone已经在iOS8以后使用的范围教小。</li><li>通过消息发送，执行alloc</li></ol><h2 id="2-3-objc-rootAllocWithZone"><a href="#2-3-objc-rootAllocWithZone" class="headerlink" title="2.3 _objc_rootAllocWithZone"></a>2.3 _objc_rootAllocWithZone</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">id</span><br><span class="line">_objc_rootAllocWithZone(Class cls, malloc_zone_t *zone __unused)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; allocWithZone under __OBJC2__ ignores the zone parameter</span><br><span class="line">    return _class_createInstanceFromZone(cls, 0, nil,</span><br><span class="line">                                         OBJECT_CONSTRUCT_CALL_BADALLOC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-class-createInstanceFromZone"><a href="#2-4-class-createInstanceFromZone" class="headerlink" title="2.4 _class_createInstanceFromZone"></a>2.4 _class_createInstanceFromZone</h2><p>这里是重中之重。alloc的流程都在这里完美的展示出来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">static ALWAYS_INLINE id</span><br><span class="line">_class_createInstanceFromZone(Class cls, size_t extraBytes, void *zone,</span><br><span class="line">                              int construct_flags &#x3D; OBJECT_CONSTRUCT_NONE,</span><br><span class="line">                              bool cxxConstruct &#x3D; true,</span><br><span class="line">                              size_t *outAllocatedSize &#x3D; nil)</span><br><span class="line">&#123;</span><br><span class="line">    ASSERT(cls-&gt;isRealized());</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Read class&#39;s info bits all at once for performance</span><br><span class="line">    bool hasCxxCtor &#x3D; cxxConstruct &amp;&amp; cls-&gt;hasCxxCtor();</span><br><span class="line">    bool hasCxxDtor &#x3D; cls-&gt;hasCxxDtor();</span><br><span class="line">    bool fast &#x3D; cls-&gt;canAllocNonpointer();</span><br><span class="line">    size_t size;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 1. 既然要生成一个对象，首先要做的就是开辟空间，但是要开辟多少？就是这里说了算。</span><br><span class="line">    size &#x3D; cls-&gt;instanceSize(extraBytes);</span><br><span class="line">    if (outAllocatedSize) *outAllocatedSize &#x3D; size;</span><br><span class="line"></span><br><span class="line">    id obj;</span><br><span class="line">    if (zone) &#123;</span><br><span class="line">        obj &#x3D; (id)malloc_zone_calloc((malloc_zone_t *)zone, 1, size);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; 2. 算出来需要多少空间，这里进行开辟</span><br><span class="line">        obj &#x3D; (id)calloc(1, size);</span><br><span class="line">    &#125;</span><br><span class="line">    if (slowpath(!obj)) &#123;</span><br><span class="line">        if (construct_flags &amp; OBJECT_CONSTRUCT_CALL_BADALLOC) &#123;</span><br><span class="line">            return _objc_callBadAllocHandler(cls);</span><br><span class="line">        &#125;</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!zone &amp;&amp; fast) &#123;</span><br><span class="line">        &#x2F;&#x2F; 3. 空间有了，这里进行对象关联</span><br><span class="line">        obj-&gt;initInstanceIsa(cls, hasCxxDtor);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; Use raw pointer isa on the assumption that they might be</span><br><span class="line">        &#x2F;&#x2F; doing something weird with the zone or RR.</span><br><span class="line">        obj-&gt;initIsa(cls);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (fastpath(!hasCxxCtor)) &#123;</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    construct_flags |&#x3D; OBJECT_CONSTRUCT_FREE_ONFAILURE;</span><br><span class="line">    return object_cxxConstructFromClass(obj, cls, construct_flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-1-cls-gt-instanceSize"><a href="#2-4-1-cls-gt-instanceSize" class="headerlink" title="2.4.1 cls-&gt;instanceSize"></a>2.4.1 cls-&gt;instanceSize</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">inline size_t instanceSize(size_t extraBytes) const &#123;</span><br><span class="line">    if (fastpath(cache.hasFastInstanceSize(extraBytes))) &#123;</span><br><span class="line">        return cache.fastInstanceSize(extraBytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    size_t size &#x3D; alignedInstanceSize() + extraBytes;</span><br><span class="line">    &#x2F;&#x2F; CF requires all objects be at least 16 bytes.</span><br><span class="line">    if (size &lt; 16) size &#x3D; 16;</span><br><span class="line">    return size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意的是在ARM64下，内存开辟都是16个字节进行对齐的。所以计算的大小的都是16的倍数。</p><h3 id="2-4-2-calloc"><a href="#2-4-2-calloc" class="headerlink" title="2.4.2 calloc"></a>2.4.2 calloc</h3><p>calloc申请开辟内存，返回地址指针。</p><h3 id="2-4-3-obj-gt-initInstanceIsa"><a href="#2-4-3-obj-gt-initInstanceIsa" class="headerlink" title="2.4.3 obj-&gt;initInstanceIsa"></a>2.4.3 obj-&gt;initInstanceIsa</h3><p>生成的对象与class进行关联。通过isa指针。（isa之后会有说明，每一个类都有一个isa指针）。</p><h3 id="2-4-4-总结"><a href="#2-4-4-总结" class="headerlink" title="2.4.4 总结"></a>2.4.4 总结</h3><p><img src="oc-alloc.png" alt=""></p><p>这个图很好的说明了alloc的流程。</p><h1 id="3-init"><a href="#3-init" class="headerlink" title="3. init"></a>3. init</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (id)init &#123;</span><br><span class="line">    return _objc_rootInit(self);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">id</span><br><span class="line">_objc_rootInit(id obj)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; In practice, it will be hard to rely on this function.</span><br><span class="line">    &#x2F;&#x2F; Many classes do not properly chain -init calls.</span><br><span class="line">    return obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>init其实是工厂方法，从上面的代码可以看到，只是<code>return self</code>。这里有一个重要的点，就是大部分的实现都会交给子类去重新，自定义init方法。</p><h1 id="4-new"><a href="#4-new" class="headerlink" title="4. new"></a>4. new</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ (id)new &#123;</span><br><span class="line">    return [callAlloc(self, false&#x2F;*checkNil*&#x2F;) init];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到new的实现就是执行了，callAlloc()，然后执行了init操作。与实际上的<code>[[Person alloc] init]</code>并没有什么区别。</p><p>但是看到有一些博客上说，还是有区别，因为init被重写之后，调用new可能会造成少些东西。这里不能苟同哈，所有的方法调用，在OC中都是objc_msgSend，会去寻找方法列表的。所以不会存在什么不同。</p><h1 id="5-扩展知识"><a href="#5-扩展知识" class="headerlink" title="5. 扩展知识"></a>5. 扩展知识</h1><p>我们已经知道了，本身写一个Person类，需要开辟16个字节的空间，那需要申请多大内存空间是由什么因素决定的？<br>我们可以试一下分别添加一个属性，两个属性，试一下。自己动手试一下哈，看看2.4.1小结处返回的size是多少。这里不细说了哦~</p><p>我这里添加了两个NSString属性，分别赋值A和B。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(lldb) po p</span><br><span class="line">&lt;Person: 0x600002f86cc0&gt;</span><br><span class="line">(lldb) x p</span><br><span class="line">0x600002f86cc0: 60 76 e3 06 01 00 00 00 40 20 e3 06 01 00 00 00  &#96;v......@ ......</span><br><span class="line">0x600002f86cd0: 60 20 e3 06 01 00 00 00 00 00 00 00 00 00 00 00  &#96; ..............</span><br><span class="line"></span><br><span class="line">(lldb) x&#x2F;4gx p</span><br><span class="line">0x600002f86cc0: 0x0000000106e37660 0x0000000106e32040</span><br><span class="line">0x600002f86cd0: 0x0000000106e32060 0x0000000000000000</span><br><span class="line">(lldb) po 0x0000000106e37660    &#x2F;&#x2F; isa指针，指向class</span><br><span class="line">Person</span><br><span class="line">(lldb) po 0x0000000106e32040</span><br><span class="line">A</span><br><span class="line">(lldb) po 0x0000000106e32060</span><br><span class="line">B</span><br></pre></td></tr></table></figure><p>通过<code>x p</code>命令我们可以打印出<code>p</code>的内存地址。从<code>0x600002f86cc0 --- 0x600002f86cd0</code>公占用0x20个自己的空间，也就是32个字节。</p><h1 id="6-真正的alloc流程"><a href="#6-真正的alloc流程" class="headerlink" title="6. 真正的alloc流程"></a>6. 真正的alloc流程</h1><p>当我们执行<code>[Person alloc]</code>的时候，系统内部会通过llvm的函数方法把alloc 指向到<code>objc_alloc</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Calls [cls alloc].</span><br><span class="line">id</span><br><span class="line">objc_alloc(Class cls)</span><br><span class="line">&#123;</span><br><span class="line">    return callAlloc(cls, true&#x2F;*checkNil*&#x2F;, false&#x2F;*allocWithZone*&#x2F;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里先执行一次<code>callAlloc(cls, true, false)</code>，注意这里的参数。然后执行到calAlloc中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">static ALWAYS_INLINE id</span><br><span class="line">callAlloc(Class cls, bool checkNil, bool allocWithZone&#x3D;false)</span><br><span class="line">&#123;</span><br><span class="line">#if __OBJC2__</span><br><span class="line">    if (slowpath(checkNil &amp;&amp; !cls)) return nil;</span><br><span class="line">    if (fastpath(!cls-&gt;ISA()-&gt;hasCustomAWZ())) &#123;</span><br><span class="line">        return _objc_rootAllocWithZone(cls, nil); &#x2F;&#x2F;1.</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; No shortcuts available.</span><br><span class="line">    if (allocWithZone) &#123;</span><br><span class="line">        return ((id(*)(id, SEL, struct _NSZone *))objc_msgSend)(cls, @selector(allocWithZone:), nil); &#x2F;&#x2F; 2.</span><br><span class="line">    &#125;</span><br><span class="line">    return ((id(*)(id, SEL))objc_msgSend)(cls, @selector(alloc)); &#x2F;&#x2F; 3.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过运行，我们发现会先执行第3个return。所执行的还是<code>alloc</code>，这时候执行的才是真正的alloc。然后就可以顺着第2节的内容继续了。</p><p>如图，是完整的alloc会执行两次的流程图：</p><p><img src="oc-alloc-2.png" alt=""></p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ul><li>alloc的流程</li><li>alloc的两次执行过程</li><li>init</li><li>new</li></ul><p>有什么不对的欢迎指正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-先看一个问题&quot;&gt;&lt;a href=&quot;#1-先看一个问题&quot; class=&quot;headerlink&quot; title=&quot;1. 先看一个问题&quot;&gt;&lt;/a&gt;1. 先看一个问题&lt;/h1&gt;&lt;p&gt;我们先看一段代码，打印一下输出结果。&lt;/p&gt;
&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
      <category term="runtime" scheme="http://liujiaboy.github.io/tags/runtime/"/>
    
  </entry>
  
</feed>
