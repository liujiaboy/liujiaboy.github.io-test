<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不会飞的小白</title>
  
  <subtitle>Stay Hungry, Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://liujiaboy.github.io/"/>
  <updated>2021-06-02T11:13:00.399Z</updated>
  <id>http://liujiaboy.github.io/</id>
  
  <author>
    <name>不会飞的小白</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MachO</title>
    <link href="http://liujiaboy.github.io/2021/06/02/%E9%80%86%E5%90%91/nx-5-MachO/"/>
    <id>http://liujiaboy.github.io/2021/06/02/%E9%80%86%E5%90%91/nx-5-MachO/</id>
    <published>2021-06-02T03:11:58.000Z</published>
    <updated>2021-06-02T11:13:00.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mach-O简介"><a href="#Mach-O简介" class="headerlink" title="Mach-O简介"></a>Mach-O简介</h1><p>Mach-O其实是Mach Object文件格式的缩写，是mac以及iOS上可执行文件的格式， 类似于windows上的PE格式 (Portable Executable )， linux上的elf格式 (Executable and Linking Format)。</p><p>Mach-O是一种用于可执行文件、目标代码、动态库的文件格式。作为a.out格式的替代，Mach-O提供了更强的扩展性。</p><h1 id="MachO格式的常见文件"><a href="#MachO格式的常见文件" class="headerlink" title="MachO格式的常见文件"></a>MachO格式的常见文件</h1><ul><li>目标文件.o </li><li>库文件<ul><li>.a</li><li>.dylib</li><li>.Framework</li></ul></li><li>可执行文件<ul><li>dyld</li><li>.dsym</li></ul></li></ul><p>关于静态库、动态库，这里有一篇文章，写的很好。<br><a href="https://blog.csdn.net/liyunxiangrxm/article/details/78918147" target="_blank" rel="noopener">iOS静态库 【.a 和framework】【超详细】</a></p><h2 id="clang编译"><a href="#clang编译" class="headerlink" title="clang编译"></a>clang编译</h2><p>可以通过clang命令把对应的文件编译成mach-o文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clang -c test.c</span><br></pre></td></tr></table></figure><p>就会出现一个test.o的文件，这个就是mach-o类型的文件。</p><p>可以通过file命令查看文件类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ file [文件路径]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 比如：</span><br><span class="line">$ file test.o</span><br><span class="line">test.o: Mach-O 64-bit object x86_64</span><br></pre></td></tr></table></figure><p>说明test.o文件是Mach-O，64位的object，适用于x86架构，64位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 编译为可执行文件</span><br><span class="line">$ clang text.o</span><br></pre></td></tr></table></figure><p>这个命令会吧test.o文件转换为可执行文件，类型为.out</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file test.out</span><br><span class="line">test.out: Mach-O 64-bit executable x86_64</span><br></pre></td></tr></table></figure><p>text.out是一个可执行文件。</p><h2 id="clang编译多个文件"><a href="#clang编译多个文件" class="headerlink" title="clang编译多个文件"></a>clang编译多个文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clang -o demo test.c test1.c</span><br></pre></td></tr></table></figure><p>就是把<code>test.c</code>和<code>test1.c</code>两个文件合并为一个可执行文件demo</p><p>如果更改链接到顺序，则生成的可执行文件是不同的，md5值不同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clang -o demo1 test1.c test.c</span><br></pre></td></tr></table></figure><p>可以查看一下两个文件的md5值，是不同的，命令为<code>md5 [filename]</code>。</p><p>也可以通过<code>objdump</code>命令查看内容是否一样，这个命令类似于<code>MachOView</code>工具。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ objdump --macho -d [可执行文件file name]</span><br><span class="line">&#x2F;&#x2F; 查看demo可执行文件</span><br><span class="line">$ objdump --macho -d demo</span><br></pre></td></tr></table></figure><h2 id="dyld"><a href="#dyld" class="headerlink" title="dyld"></a>dyld</h2><p>dyld（the dynamic link editor）是苹果的动态链接器，是苹果操作系统一个重要组成部分，在系统内核做好程序准备工作之后，交由dyld负责余下的工作。而且它是开源的，任何人可以通过苹果官网下载它的源码来阅读理解它的运作方式，了解系统加载动态库的细节。</p><h2 id="dsym文件"><a href="#dsym文件" class="headerlink" title="dsym文件"></a>dsym文件</h2><p>当我们软件 release 模式打包或上线后，不会像我们在 Xcode 中那样直观的看到用崩溃的错误，这个时候我们就需要分析 crash report 文件了，iOS设备中会有日志文件保存我们每个应用出错的函数内存地址，通过 Xcode 的 Organizer 可以将 iOS 设备中的 DeviceLog 导出成 crash 文件，这个时候我们就可以通过出错的函数地址去查询 dSYM 文件中程序对应的函数名和文件名。大前提是我们需要有软件版本对应的 dSYM 文件，这也是为什么我们很有必要保存每个发布版本的 Archives 文件了。</p><p>在release下，编译之后查看dsym文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ file file HookDemo.app.dSYM&#x2F;Contents&#x2F;Resources&#x2F;DWARF&#x2F;HookDemo</span><br><span class="line">HookDemo.app.dSYM&#x2F;Contents&#x2F;Resources&#x2F;DWARF&#x2F;HookDemo: Mach-O universal binary with 2 architectures: [arm_v7:Mach-O dSYM companion file arm_v7] [arm64:Mach-O 64-bit dSYM companion file arm64]</span><br><span class="line">HookDemo.app.dSYM&#x2F;Contents&#x2F;Resources&#x2F;DWARF&#x2F;HookDemo (for architecture armv7):Mach-O dSYM companion file arm_v7</span><br><span class="line">HookDemo.app.dSYM&#x2F;Contents&#x2F;Resources&#x2F;DWARF&#x2F;HookDemo (for architecture arm64):Mach-O 64-bit dSYM companion file arm64</span><br></pre></td></tr></table></figure><p>这里出现了<code>universal binary</code>。这是个啥？就是通用二进制文件</p><h2 id="通用二进制文件"><a href="#通用二进制文件" class="headerlink" title="通用二进制文件"></a>通用二进制文件</h2><p>mac系统所支持的cpu及硬件平台发生了很大的变化，为了解决软件在多个硬件平台上的兼容性问题，苹果开发了一个通用的二进制文件格式（Universal Binary）,又称胖二进制（Fat Binary）。</p><ul><li>苹果公司提出的一种程序代码。能同时适用多种架构的二进制文件</li><li>同一个程序包中同时为多种架构提供最理想的性能。</li><li>因为需要储存多种代码，通用二进制应用程序通常比单一平台二进制的程序要大。但是由于两种架构有共通的非执行资源(代码以外的，图片等)，所以并不会达到单一版本的两倍之多。</li><li>而且由于执行中只调用一部分代码，运行起来也不需要额外的内存。</li></ul><p>在xcode中可以更改Mach-O Type：</p><p><img src="macho_xcode.jpg" alt=""></p><p>对于现在的Xcode来说，iOS11以上通过真机生成的可执行文件都是arm64架构，是单一架构。如果把最低版本修改为iOS10，重新真机编译，发现生成的可执行文件就是两种架构<code>armv7 + arm64</code>。</p><p>接下来，随便找个工程，release下编译，然后查看<code>HookDemo.app -&gt; HookDemo</code>可执行文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ file HookDemo</span><br><span class="line">HookDemo: Mach-O universal binary with 2 architectures: [arm_v7:Mach-O executable arm_v7] [arm64:Mach-O 64-bit executable arm64]</span><br><span class="line">HookDemo (for architecture armv7):Mach-O executable arm_v7</span><br><span class="line">HookDemo (for architecture arm64):Mach-O 64-bit executable arm64</span><br></pre></td></tr></table></figure><p>也可以通过<code>Targets -&gt; Build Setting - Architectures</code>修改架构，只不过目前来说都是arm64。可以添加armv7、armv7s。</p><p>armv7s是一种临时的支持iPhone5c上可用的架构。</p><p><a href="https://www.cnblogs.com/lulushen/p/8135269.html" target="_blank" rel="noopener">iOS 指令集架构 armv6、armv7、armv7s、arm64、arm64e、x86_64、i386</a></p><p>原则上来说，架构都是向下兼容的。</p><h3 id="lipo命令拆分、合并通用二进制文件"><a href="#lipo命令拆分、合并通用二进制文件" class="headerlink" title="lipo命令拆分、合并通用二进制文件"></a>lipo命令拆分、合并通用二进制文件</h3><ul><li><p>查看Mach-O文件包含的架构信息</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lipo -info [MachO文件]</span><br></pre></td></tr></table></figure></li><li><p>拆分某种架构</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ lipo [MachO文件] –thin [架构] –output [输出文件路径]</span><br><span class="line">$ lipo HookDemo -thin armv7 -output HookDemo_armv7</span><br></pre></td></tr></table></figure></li><li><p>合并多种架构</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lipo -create [MachO文件1] [MachO文件2] -output [生成的MachO文件]</span><br><span class="line">lipo -create HookDemo_armv7 HookDemo_arm64 -output HookDemo_v7_64</span><br></pre></td></tr></table></figure></li></ul><p>可以在通过file命令查看拆分、合并的文件。</p><h1 id="Macho文件结构"><a href="#Macho文件结构" class="headerlink" title="Macho文件结构"></a>Macho文件结构</h1><ul><li>Header ：包含该二进制文件的一般信息<ul><li>字节顺序、架构类型、加载指令的数量等。</li><li>使得可以快速确认一些信息，比如当前文件用于32位还是64位，对应的处理器是什么、文件类型是什么</li></ul></li><li>Load commands：包含加载所需要的指令（动态库、静态库等）<ul><li>内容包括区域的位置、符号表、动态符号表等</li></ul></li><li>Data ：内容包括区域的位置、符号表、动态符号表等<ul><li>包含Segement的具体数据</li></ul></li></ul><p><img src="macho_1.jpg" alt=""></p><p>接下来使用MachOView工具来分析可执行文件，有两种类型：</p><ol><li>通用二进制文件，则显示的是Fat Binary</li><li>单一架构的文件，直接显示对应的Executable</li></ol><p><img src="MachOView_Fat.jpg" alt=""></p><h2 id="Fat-Binary"><a href="#Fat-Binary" class="headerlink" title="Fat Binary"></a>Fat Binary</h2><p>在上图中可以看到，首先是一个Fat Header的结构。在header中，可以猜到两个架构之间必定存在某些关联。</p><p>armv7：offset=16384，size=79872<br>arm64：offset=98304，size=80672</p><p>arm64是从98304开始的，比armv7多了 98304-(16384+79872)=2048，这个值只是一个差值，而从偏移的差值来看98304-16384=81920 = 5 * 16 * 1024</p><p>正好是5页数据，iOS中1页是16k，所以armv7是5页数据，最后的2038只是第5页数据没有排满而已。</p><h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>接下来看看arm64架构下的内容：</p><p><img src="MachOView.png" alt=""></p><p>在Xcode中，我们可以在<code>loader.h</code>文件中找到Header的相关信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">struct mach_header_64 &#123;</span><br><span class="line">    uint32_t    magic;      &#x2F;* 魔数，快速定位属于64还是32位 *&#x2F;</span><br><span class="line">    cpu_type_t  cputype;    &#x2F;* CPU类型 *&#x2F;</span><br><span class="line">    cpu_subtype_t   cpusubtype; &#x2F;* CPU的具体类型 *&#x2F;</span><br><span class="line">    uint32_t    filetype;   &#x2F;* 文件类型，比如可执行文件 *&#x2F;</span><br><span class="line">    uint32_t    ncmds;      &#x2F;* Load Commands的条数 *&#x2F;</span><br><span class="line">    uint32_t    sizeofcmds; &#x2F;* Load Commands的大小 *&#x2F;</span><br><span class="line">    uint32_t    flags;      &#x2F;* 标志位标识二进制文件支持的功能，主要是和系统加载、链接有关 *&#x2F;</span><br><span class="line">    uint32_t    reserved;   &#x2F;* reserved *&#x2F;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里只放了arm64下的内容，当然也有32位的，内容基本一致。<br>这里需要注意的是filettype类型，是一组宏定义，也能找到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#defineMH_OBJECT0x1&#x2F;* relocatable object file *&#x2F; object文件</span><br><span class="line">#defineMH_EXECUTE0x2&#x2F;* demand paged executable file *&#x2F; 可执行文件</span><br><span class="line">#defineMH_FVMLIB0x3&#x2F;* fixed VM shared library file *&#x2F;</span><br><span class="line">#defineMH_CORE0x4&#x2F;* core file *&#x2F;</span><br><span class="line">#defineMH_PRELOAD0x5&#x2F;* preloaded executable file *&#x2F;</span><br><span class="line">#defineMH_DYLIB0x6&#x2F;* dynamically bound shared library *&#x2F; dylib文件</span><br><span class="line">#defineMH_DYLINKER0x7&#x2F;* dynamic link editor *&#x2F;</span><br><span class="line">#defineMH_BUNDLE0x8&#x2F;* dynamically bound bundle file *&#x2F;</span><br><span class="line">#defineMH_DYLIB_STUB0x9&#x2F;* shared library stub for static</span><br><span class="line">   linking only, no section contents *&#x2F;</span><br><span class="line">#defineMH_DSYM0xa&#x2F;* companion file with only debug</span><br><span class="line">   sections *&#x2F; dsym文件</span><br><span class="line">#defineMH_KEXT_BUNDLE0xb&#x2F;* x86_64 kexts *&#x2F;</span><br><span class="line">#define MH_FILESET0xc&#x2F;* a file composed of other Mach-Os to</span><br><span class="line">   be run in the same userspace sharing</span><br><span class="line">   a single linkedit. *&#x2F;</span><br></pre></td></tr></table></figure><p>所以当看到0x2时，标识的就是可执行文件。在MachOView中，在Header中，可以看到对应的数据信息。</p><h2 id="Load-Commands"><a href="#Load-Commands" class="headerlink" title="Load Commands"></a>Load Commands</h2><table><thead><tr><th align="left">LoadCommands</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">LC_SEGMENT_64</td><td align="left">将文件中（32位或64位）的段映射到进程地址空间中，<br>主要分为<strong>TEXT、</strong>DATA、LINKEDIT几大块</td></tr><tr><td align="left">LC_DYLD_INFO_ONLY</td><td align="left">动态链接相关信息</td></tr><tr><td align="left">LC_SYMTAB</td><td align="left">符号地址</td></tr><tr><td align="left">LC_DYSYMTAB</td><td align="left">动态符号表地址</td></tr><tr><td align="left">LC_LOAD_DYLINKER</td><td align="left">使用谁加载，我们使用dyld</td></tr><tr><td align="left">LC_UUID</td><td align="left">Mach-O文件的唯一识别标识 UUID</td></tr><tr><td align="left">LC_VERSION_MIN_MACOSX</td><td align="left">支持最低的操作系统版本</td></tr><tr><td align="left">LC_SOURCE_VERSION</td><td align="left">源代码版本</td></tr><tr><td align="left">LC_MAIN</td><td align="left">设置程序主线程的入口地址和栈大小<br>当别人的app做了防护时，运行就是闪退，这个时候就需要从这里找切入点</td></tr><tr><td align="left">LC_ENCRYPTION_INFO_64</td><td align="left">加密信息</td></tr><tr><td align="left">LC_LOAD_DYLIB</td><td align="left">依赖库的路径，包含三方库</td></tr><tr><td align="left">LC_FUNCTION_STARTS</td><td align="left">函数起始地址表</td></tr><tr><td align="left">LC_CODE_SIGNATURE</td><td align="left">代码签名</td></tr></tbody></table><h3 id="LC-SEGMENT-64"><a href="#LC-SEGMENT-64" class="headerlink" title="LC_SEGMENT_64"></a>LC_SEGMENT_64</h3><p>这里面包含了一些基本信息：</p><ul><li><code>VM Address</code>：虚拟内存地址</li><li><code>VM Size</code>：(虚拟内存)大小为4G</li><li><code>File Offset</code>：数据在文件中的偏移地址</li><li><code>File Size</code>：数据在文件中的大小</li></ul><h3 id="LC-DYLD-INFO-ONLY"><a href="#LC-DYLD-INFO-ONLY" class="headerlink" title="LC_DYLD_INFO_ONLY"></a>LC_DYLD_INFO_ONLY</h3><p>这里主要说一下<code>Rebase Info Offset</code>，这个是重定向的偏移地址。</p><p>系统为了安全，在运行时，把Mach-O放在虚拟内存中，会随机生成一个<code>ASLR</code>，在运行时会进行重定向，比如查找字符串、方法等，都需要重定向，而重定向的方式是<code>ASLR</code>+<code>Rebase Info Offset</code>的值。</p><h2 id="Section64"><a href="#Section64" class="headerlink" title="Section64"></a>Section64</h2><p>主要氛围两大部分：</p><p>###__TEXT</p><p>主要存放：代码、字符常量、类、方法等。</p><table><thead><tr><th align="left">Section</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">__TEXT, __text</td><td align="left">主程序代码段</td></tr><tr><td align="left">__TEXT, __stubs</td><td align="left">Stub可以理解为一段占位空间，placeholder，用于符号的lazy binding。</td></tr><tr><td align="left">__TEXT, __stubs_helper</td><td align="left">辅助绑定</td></tr><tr><td align="left">__TEXT, __cstring</td><td align="left">C语言字符串</td></tr><tr><td align="left">__TEXT, __entitlements</td><td align="left">__entitlements</td></tr><tr><td align="left">__TEXT, __unwind_info</td><td align="left">C语言字符串</td></tr><tr><td align="left">__TEXT, __const</td><td align="left">常量段（const修饰）</td></tr><tr><td align="left">__TEXT, __objc_classname</td><td align="left">OC的类名</td></tr><tr><td align="left">__TEXT, __objc_methname</td><td align="left">OC方法名称</td></tr><tr><td align="left">__TEXT, __objc_methtype</td><td align="left">OC方法类型，即方法签名</td></tr></tbody></table><h3 id="DATA"><a href="#DATA" class="headerlink" title="__DATA:"></a>__DATA:</h3><table><thead><tr><th align="left">Section</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">__DATA_CONST, __got</td><td align="left">__got</td></tr><tr><td align="left">__DATA, __got</td><td align="left">__got</td></tr><tr><td align="left"><strong>DATA</strong>data</td><td align="left">已初始化的全局变量。static int a = 1;</td></tr><tr><td align="left">__DATA, __bss</td><td align="left">未初始化的静态变量。static int a;</td></tr><tr><td align="left">__DATA, __const</td><td align="left">常量。 char * const p = “foo”;</td></tr><tr><td align="left">__DATA, __cfstring</td><td align="left">字符串（CFStringRefs）</td></tr><tr><td align="left">__DATA, __common</td><td align="left">未初始化的外部全局变量。 int a;</td></tr><tr><td align="left">__DATA, __la_symbol_ptr</td><td align="left">懒绑定的符号指针表。</td></tr><tr><td align="left">__DATA, __nl_symbol_ptr</td><td align="left">非懒绑定的符号指针表。</td></tr><tr><td align="left">__DATA, __objc_classlist</td><td align="left">OC的类列表，存储一个个指向objc_class结构体的指针</td></tr><tr><td align="left">__DATA, __objc_nlclslist</td><td align="left">OC的类列表，+load相关？</td></tr><tr><td align="left">__DATA, __objc_catlist</td><td align="left">OC的category列表，存储一个个指向__objc_category结构体的指针</td></tr><tr><td align="left">__DATA, __objc_protolist</td><td align="left">OC的协议列表，存储一个个指向protocol_t结构体的指针</td></tr><tr><td align="left">__DATA, __objc_imginfo</td><td align="left">OC的image信息</td></tr><tr><td align="left">__DATA, __objc_selrefs</td><td align="left">哪些SEL对应的字符串被引用了</td></tr><tr><td align="left">__DATA, __objc_classrefs</td><td align="left">类的引用，即msg_objSend相关</td></tr><tr><td align="left">__DATA, __objc_superrefs</td><td align="left">super引用，记录了super方法调用的类。<br>如ViewController中的viewDidLoad中调用了<code>[super viewDidLoad]</code>，<br>则ViewController class即被记录。<br>也可以理解为objc_msgSendSuper相关。</td></tr><tr><td align="left">__DATA, __objc_protorefs</td><td align="left">协议引用</td></tr><tr><td align="left">__DATA, __objc_ivar</td><td align="left">成员变量</td></tr><tr><td align="left">__DATA, __objc_const</td><td align="left">这里的const与<code>__TEXT-&gt;const</code>完全不同。<br><code>__objc_const</code>指的是OC内存布局中的不可变部分，即class_ro_t类型。</td></tr><tr><td align="left">__DATA, __objc_data</td><td align="left">保存类所需的数据？</td></tr></tbody></table><p>篇幅原因，动态加载以及符号表下一篇再介绍。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>Mach-O简介</li><li>clang命令<ul><li>编译成点O文件：$ clang -c test.c</li><li>把点O文件编译为可执行文件：$ clang text.o</li><li>查看文件类型：$ file text.out</li></ul></li><li>lipo命令<ul><li>查看二进制文件 $ lipo -info [MachO文件]</li><li>拆分为某一种架构：$ lipo [MachO文件] –thin [架构] –output [输出文件路径]</li><li>合并多种架构：$ lipo -create [MachO文件1] [MachO文件2] -output [生成的MachO文件]</li></ul></li><li>MachOView的使用<ul><li>Header</li><li>Load Commands</li><li>Section64</li></ul></li></ul><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="https://blog.csdn.net/liyunxiangrxm/article/details/78918147" target="_blank" rel="noopener">iOS静态库 【.a 和framework】【超详细】</a><br><a href="https://www.cnblogs.com/lulushen/p/8135269.html" target="_blank" rel="noopener">iOS 指令集架构 armv6、armv7、armv7s、arm64、arm64e、x86_64、i386</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mach-O简介&quot;&gt;&lt;a href=&quot;#Mach-O简介&quot; class=&quot;headerlink&quot; title=&quot;Mach-O简介&quot;&gt;&lt;/a&gt;Mach-O简介&lt;/h1&gt;&lt;p&gt;Mach-O其实是Mach Object文件格式的缩写，是mac以及iOS上可执行文件的格式
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>runloop</title>
    <link href="http://liujiaboy.github.io/2021/05/30/OC%E5%8E%9F%E7%90%86/runloop/"/>
    <id>http://liujiaboy.github.io/2021/05/30/OC%E5%8E%9F%E7%90%86/runloop/</id>
    <published>2021-05-30T05:34:10.000Z</published>
    <updated>2021-05-31T02:29:58.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Runloop"><a href="#Runloop" class="headerlink" title="Runloop"></a>Runloop</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>RunLoop是事件接收和分发机制的一个实现，是线程相关的基础框架的一部分，一个RunLoop就是一个事件处理的循环，用来不停的调度工作以及处理输入事件。</p><p>RunLoop本质是一个 do-while循环，没事做就休息，来活了就干活。与普通的while循环是有区别的，普通的while循环会导致CPU进入忙等待状态，即一直消耗cpu，而RunLoop则不会，RunLoop是一种闲等待，即RunLoop具备休眠功能。</p><h2 id="RunLoop的作用"><a href="#RunLoop的作用" class="headerlink" title="RunLoop的作用"></a>RunLoop的作用</h2><ul><li>保持程序的持续运行</li><li>处理App中的各种事件（触摸、定时器、performSelector）</li><li>节省cpu资源，提供程序的性能，该做事就做事，该休息就休息</li></ul><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p><a href="https://opensource.apple.com/tarballs/CF/" target="_blank" rel="noopener">源码下载</a></p><h2 id="runloop与线程"><a href="#runloop与线程" class="headerlink" title="runloop与线程"></a>runloop与线程</h2><p>通常情况下获取runloop的两种方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 主运行循环</span><br><span class="line">CFRunLoopRef mainRunloop &#x3D; CFRunLoopGetMain();</span><br><span class="line">&#x2F;&#x2F; 当前运行循环</span><br><span class="line">CFRunLoopRef currentRunloop &#x3D; CFRunLoopGetCurrent();</span><br></pre></td></tr></table></figure><p>接下来看一下源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CFRunLoopRef CFRunLoopGetMain(void) &#123;</span><br><span class="line">    CHECK_FOR_FORK();</span><br><span class="line">    &#x2F;&#x2F; 这是一个静态变量</span><br><span class="line">    static CFRunLoopRef __main &#x3D; NULL; &#x2F;&#x2F; no retain needed</span><br><span class="line">    &#x2F;&#x2F; 没有获取到，则通过_CFRunLoopGet0函数去获取，参数是主线程</span><br><span class="line">    if (!__main) __main &#x3D; _CFRunLoopGet0(pthread_main_thread_np()); &#x2F;&#x2F; no CAS needed</span><br><span class="line">    return __main;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看一下<code>_CFRunLoopGet0</code>函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">CF_EXPORT CFRunLoopRef _CFRunLoopGet0(pthread_t t) &#123;</span><br><span class="line">    &#x2F;&#x2F; 如参数t不存在，则默认为主线程</span><br><span class="line">    if (pthread_equal(t, kNilPthreadT)) &#123;</span><br><span class="line">        t &#x3D; pthread_main_thread_np();</span><br><span class="line">    &#125;</span><br><span class="line">    __CFSpinLock(&amp;loopsLock);</span><br><span class="line">    if (!__CFRunLoops) &#123;</span><br><span class="line">        __CFSpinUnlock(&amp;loopsLock);</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 创建一个字典</span><br><span class="line">        CFMutableDictionaryRef dict &#x3D; CFDictionaryCreateMutable(kCFAllocatorSystemDefault, 0, NULL, &amp;kCFTypeDictionaryValueCallBacks);</span><br><span class="line">        &#x2F;&#x2F; 创建mainLoop</span><br><span class="line">        CFRunLoopRef mainLoop &#x3D; __CFRunLoopCreate(pthread_main_thread_np());</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; dict : key value</span><br><span class="line">        &#x2F;&#x2F; 把main_thread和mainloop通过key-value的形式绑定</span><br><span class="line">        CFDictionarySetValue(dict, pthreadPointer(pthread_main_thread_np()), mainLoop);</span><br><span class="line">        </span><br><span class="line">        if (!OSAtomicCompareAndSwapPtrBarrier(NULL, dict, (void * volatile *)&amp;__CFRunLoops)) &#123;</span><br><span class="line">            CFRelease(dict);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        CFRelease(mainLoop);</span><br><span class="line">        __CFSpinLock(&amp;loopsLock);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 从字典中通过线程获取run loop</span><br><span class="line">    CFRunLoopRef loop &#x3D; (CFRunLoopRef)CFDictionaryGetValue(__CFRunLoops, pthreadPointer(t));</span><br><span class="line">    __CFSpinUnlock(&amp;loopsLock);</span><br><span class="line">    if (!loop) &#123;</span><br><span class="line">        &#x2F;&#x2F; 没有则创建</span><br><span class="line">        CFRunLoopRef newLoop &#x3D; __CFRunLoopCreate(t);</span><br><span class="line">        __CFSpinLock(&amp;loopsLock);</span><br><span class="line">        loop &#x3D; (CFRunLoopRef)CFDictionaryGetValue(__CFRunLoops, pthreadPointer(t));</span><br><span class="line">        if (!loop) &#123;</span><br><span class="line">            &#x2F;&#x2F; 没有loop也要存，存的是新创建的。</span><br><span class="line">            CFDictionarySetValue(__CFRunLoops, pthreadPointer(t), newLoop);</span><br><span class="line">            loop &#x3D; newLoop;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; don&#39;t release run loops inside the loopsLock, because CFRunLoopDeallocate may end up taking it</span><br><span class="line">        __CFSpinUnlock(&amp;loopsLock);</span><br><span class="line">        CFRelease(newLoop);</span><br><span class="line">    &#125;</span><br><span class="line">    if (pthread_equal(t, pthread_self())) &#123;</span><br><span class="line">        _CFSetTSD(__CFTSDKeyRunLoop, (void *)loop, NULL);</span><br><span class="line">        if (0 &#x3D;&#x3D; _CFGetTSD(__CFTSDKeyRunLoopCntr)) &#123;</span><br><span class="line">            _CFSetTSD(__CFTSDKeyRunLoopCntr, (void *)(PTHREAD_DESTRUCTOR_ITERATIONS-1), (void (*)(void *))__CFFinalizeRunLoop);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return loop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码可以看出，runloo只有两种类型，一种主线程的mainloop，还有就是其它runloop。</p><h2 id="runloop的创建"><a href="#runloop的创建" class="headerlink" title="runloop的创建"></a>runloop的创建</h2><p>接下来看runloop是怎么创建的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">static CFRunLoopRef __CFRunLoopCreate(pthread_t t) &#123;</span><br><span class="line">    CFRunLoopRef loop &#x3D; NULL;</span><br><span class="line">    CFRunLoopModeRef rlm;</span><br><span class="line">    uint32_t size &#x3D; sizeof(struct __CFRunLoop) - sizeof(CFRuntimeBase);</span><br><span class="line">    loop &#x3D; (CFRunLoopRef)_CFRuntimeCreateInstance(kCFAllocatorSystemDefault, __kCFRunLoopTypeID, size, NULL);</span><br><span class="line">    &#x2F;&#x2F; 如果loop为空，则直接返回NULL</span><br><span class="line">    if (NULL &#x3D;&#x3D; loop) &#123;</span><br><span class="line">        return NULL;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; runloop属性赋值</span><br><span class="line">    (void)__CFRunLoopPushPerRunData(loop);</span><br><span class="line">    __CFRunLoopLockInit(&amp;loop-&gt;_lock);</span><br><span class="line">    loop-&gt;_wakeUpPort &#x3D; __CFPortAllocate();</span><br><span class="line">    if (CFPORT_NULL &#x3D;&#x3D; loop-&gt;_wakeUpPort) HALT;</span><br><span class="line">    __CFRunLoopSetIgnoreWakeUps(loop);</span><br><span class="line">    loop-&gt;_commonModes &#x3D; CFSetCreateMutable(kCFAllocatorSystemDefault, 0, &amp;kCFTypeSetCallBacks);</span><br><span class="line">    CFSetAddValue(loop-&gt;_commonModes, kCFRunLoopDefaultMode);</span><br><span class="line">    loop-&gt;_commonModeItems &#x3D; NULL;</span><br><span class="line">    loop-&gt;_currentMode &#x3D; NULL;</span><br><span class="line">    loop-&gt;_modes &#x3D; CFSetCreateMutable(kCFAllocatorSystemDefault, 0, &amp;kCFTypeSetCallBacks);</span><br><span class="line">    loop-&gt;_blocks_head &#x3D; NULL;</span><br><span class="line">    loop-&gt;_blocks_tail &#x3D; NULL;</span><br><span class="line">    loop-&gt;_counterpart &#x3D; NULL;</span><br><span class="line">    loop-&gt;_pthread &#x3D; t;</span><br><span class="line">#if DEPLOYMENT_TARGET_WINDOWS</span><br><span class="line">    loop-&gt;_winthread &#x3D; GetCurrentThreadId();</span><br><span class="line">#else</span><br><span class="line">    loop-&gt;_winthread &#x3D; 0;</span><br><span class="line">#endif</span><br><span class="line">    rlm &#x3D; __CFRunLoopFindMode(loop, kCFRunLoopDefaultMode, true);</span><br><span class="line">    if (NULL !&#x3D; rlm) __CFRunLoopModeUnlock(rlm);</span><br><span class="line">    return loop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面又有了一个CFRunLoopRef,盲猜应该是结构体。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">typedef struct __CFRunLoop * CFRunLoopRef;</span><br><span class="line"></span><br><span class="line">struct __CFRunLoop &#123;</span><br><span class="line">    CFRuntimeBase _base;</span><br><span class="line">    pthread_mutex_t _lock;            &#x2F;* locked for accessing mode list *&#x2F;</span><br><span class="line">    __CFPort _wakeUpPort;            &#x2F;&#x2F; used for CFRunLoopWakeUp</span><br><span class="line">    Boolean _unused;</span><br><span class="line">    volatile _per_run_data *_perRunData;              &#x2F;&#x2F; reset for runs of the run loop</span><br><span class="line">    pthread_t _pthread;</span><br><span class="line">    uint32_t _winthread;</span><br><span class="line">    CFMutableSetRef _commonModes;</span><br><span class="line">    CFMutableSetRef _commonModeItems;</span><br><span class="line">    CFRunLoopModeRef _currentMode;</span><br><span class="line">    CFMutableSetRef _modes;</span><br><span class="line">    struct _block_item *_blocks_head;</span><br><span class="line">    struct _block_item *_blocks_tail;</span><br><span class="line">    CFTypeRef _counterpart;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>从定义中可以得出，一个RunLoop有多个Mode，意味着一个RunLoop需要处理多个事务，即一个Mode对应多个Item，而一个item中，包含了timer、source、observer，如图：</p><p><img src="runloop_1.jpg" alt=""></p><h3 id="mode类型"><a href="#mode类型" class="headerlink" title="mode类型"></a>mode类型</h3><p>其中mode在苹果文档中提及的有五个，而在iOS中公开暴露出来的只有 <code>NSDefaultRunLoopMode</code>和<code>NSRunLoopCommonModes</code>。</p><p><code>NSRunLoopCommonModes</code> 实际上是一个 Mode 的集合，默认包括 <code>NSDefaultRunLoopMode</code> 和 <code>NSEventTrackingRunLoopMode</code>。</p><ul><li>NSDefaultRunLoopMode：默认的mode，正常情况下都是在这个mode</li><li>NSConnectionReplyMode</li><li>NSModalPanelRunLoopMode</li><li>NSEventTrackingRunLoopMode：使用这个Mode去跟踪来自用户交互的事件（比如UITableView上下滑动）</li><li>NSRunLoopCommonModes：伪模式，灵活性更好</li></ul><h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><ul><li>Source0 表示 非系统事件，即用户自定义的事件</li><li>Source1 表示系统事件，主要负责底层的通讯，具备唤醒能力</li></ul><h3 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">typedef CF_OPTIONS(CFOptionFlags, CFRunLoopActivity) &#123;</span><br><span class="line">    &#x2F;&#x2F;进入RunLoop</span><br><span class="line">    kCFRunLoopEntry &#x3D; (1UL &lt;&lt; 0),</span><br><span class="line">    &#x2F;&#x2F;即将处理Timers</span><br><span class="line">    kCFRunLoopBeforeTimers &#x3D; (1UL &lt;&lt; 1),</span><br><span class="line">    &#x2F;&#x2F;即将处理Source</span><br><span class="line">    kCFRunLoopBeforeSources &#x3D; (1UL &lt;&lt; 2),</span><br><span class="line">    &#x2F;&#x2F;即将进入休眠</span><br><span class="line">    kCFRunLoopBeforeWaiting &#x3D; (1UL &lt;&lt; 5),</span><br><span class="line">    &#x2F;&#x2F;被唤醒</span><br><span class="line">    kCFRunLoopAfterWaiting &#x3D; (1UL &lt;&lt; 6),</span><br><span class="line">    &#x2F;&#x2F;退出RunLoop</span><br><span class="line">    kCFRunLoopExit &#x3D; (1UL &lt;&lt; 7),</span><br><span class="line">    kCFRunLoopAllActivities &#x3D; 0x0FFFFFFFU</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="mode对应的items"><a href="#mode对应的items" class="headerlink" title="mode对应的items"></a>mode对应的items</h3><ul><li>block：<strong>CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK</strong></li><li>timer：<strong>CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION</strong></li><li>source0： <strong>CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION</strong></li><li>source1： <strong>CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION</strong></li><li>主队列：<strong>CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE</strong></li><li>observer： <strong>CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION</strong></li></ul><h3 id="以Timer为例"><a href="#以Timer为例" class="headerlink" title="以Timer为例"></a>以Timer为例</h3><p>在子线程创建的timer是没有办法一直执行的，而想让它继续执行，则需要添加到runloop中，并且run才行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">self.isStopping &#x3D; NO;</span><br><span class="line">NSThread *thread &#x3D; [[NSThread alloc] initWithBlock:^&#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; thread.name &#x3D; nil 因为这个变量只是捕捉</span><br><span class="line">    &#x2F;&#x2F; LGThread *thread &#x3D; nil</span><br><span class="line">    &#x2F;&#x2F; thread &#x3D; 初始化 捕捉一个nil进来</span><br><span class="line">    NSLog(@&quot;%@---%@&quot;,[NSThread currentThread],[[NSThread currentThread] name]);</span><br><span class="line">    NSTimer *timer &#x3D; [NSTimer scheduledTimerWithTimeInterval:1 repeats:YES block:^(NSTimer * _Nonnull timer) &#123;</span><br><span class="line">        NSLog(@&quot;~~hello word&quot;);            &#x2F;&#x2F; 退出线程--结果runloop也停止了</span><br><span class="line">        if (self.isStopping) &#123;</span><br><span class="line">            [NSThread exit];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];</span><br><span class="line">    [[NSRunLoop currentRunLoop] run];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">thread.name &#x3D; @&quot;lgcode.com&quot;;</span><br><span class="line">[thread start];</span><br></pre></td></tr></table></figure><p>我们看一下addTimer是怎么操作的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">oid CFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef rlt, CFStringRef modeName) &#123;</span><br><span class="line">    CHECK_FOR_FORK();</span><br><span class="line">    if (__CFRunLoopIsDeallocating(rl)) return;</span><br><span class="line">    if (!__CFIsValid(rlt) || (NULL !&#x3D; rlt-&gt;_runLoop &amp;&amp; rlt-&gt;_runLoop !&#x3D; rl)) return;</span><br><span class="line">    __CFRunLoopLock(rl);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 重点 : kCFRunLoopCommonModes</span><br><span class="line">    if (modeName &#x3D;&#x3D; kCFRunLoopCommonModes) &#123;</span><br><span class="line">        &#x2F;&#x2F;如果是kCFRunLoopCommonModes 类型</span><br><span class="line">        CFSetRef set &#x3D; rl-&gt;_commonModes ? CFSetCreateCopy(kCFAllocatorSystemDefault, rl-&gt;_commonModes) : NULL;</span><br><span class="line">        </span><br><span class="line">        if (NULL &#x3D;&#x3D; rl-&gt;_commonModeItems) &#123;</span><br><span class="line">            &#x2F;&#x2F; modeItems是空，则创建一个defalut</span><br><span class="line">            rl-&gt;_commonModeItems &#x3D; CFSetCreateMutable(kCFAllocatorSystemDefault, 0, &amp;kCFTypeSetCallBacks);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;runloop与mode 是一对多的， mode与item也是一对多的</span><br><span class="line">        CFSetAddValue(rl-&gt;_commonModeItems, rlt);</span><br><span class="line">        if (NULL !&#x3D; set) &#123;</span><br><span class="line">            CFTypeRef context[2] &#x3D; &#123;rl, rlt&#125;;</span><br><span class="line">            &#x2F;* add new item to all common-modes *&#x2F;</span><br><span class="line">            &#x2F;&#x2F;执行</span><br><span class="line">            CFSetApplyFunction(set, (__CFRunLoopAddItemToCommonModes), (void *)context);</span><br><span class="line">            CFRelease(set);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F;如果是非commonMode类型</span><br><span class="line">        &#x2F;&#x2F;查找runloop的模型</span><br><span class="line">        CFRunLoopModeRef rlm &#x3D; __CFRunLoopFindMode(rl, modeName, true);</span><br><span class="line">        if (NULL !&#x3D; rlm) &#123;</span><br><span class="line">            if (NULL &#x3D;&#x3D; rlm-&gt;_timers) &#123;</span><br><span class="line">                CFArrayCallBacks cb &#x3D; kCFTypeArrayCallBacks;</span><br><span class="line">                cb.equal &#x3D; NULL;</span><br><span class="line">                rlm-&gt;_timers &#x3D; CFArrayCreateMutable(kCFAllocatorSystemDefault, 0, &amp;cb);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;判断mode是否匹配</span><br><span class="line">        if (NULL !&#x3D; rlm &amp;&amp; !CFSetContainsValue(rlt-&gt;_rlModes, rlm-&gt;_name)) &#123;</span><br><span class="line">            __CFRunLoopTimerLock(rlt);</span><br><span class="line">            if (NULL &#x3D;&#x3D; rlt-&gt;_runLoop) &#123;</span><br><span class="line">                rlt-&gt;_runLoop &#x3D; rl;</span><br><span class="line">            &#125; else if (rl !&#x3D; rlt-&gt;_runLoop) &#123;</span><br><span class="line">                __CFRunLoopTimerUnlock(rlt);</span><br><span class="line">                __CFRunLoopModeUnlock(rlm);</span><br><span class="line">                __CFRunLoopUnlock(rl);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 如果匹配，则将runloop加进去，而runloop的执行依赖于  [runloop run]</span><br><span class="line">            CFSetAddValue(rlt-&gt;_rlModes, rlm-&gt;_name);</span><br><span class="line">            __CFRunLoopTimerUnlock(rlt);</span><br><span class="line">            __CFRunLoopTimerFireTSRLock();</span><br><span class="line">            __CFRepositionTimerInMode(rlm, rlt, false);</span><br><span class="line">            __CFRunLoopTimerFireTSRUnlock();</span><br><span class="line">            if (!_CFExecutableLinkedOnOrAfter(CFSystemVersionLion)) &#123;</span><br><span class="line">                &#x2F;&#x2F; Normally we don&#39;t do this on behalf of clients, but for</span><br><span class="line">                &#x2F;&#x2F; backwards compatibility due to the change in timer handling...</span><br><span class="line">                if (rl !&#x3D; CFRunLoopGetCurrent()) CFRunLoopWakeUp(rl);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (NULL !&#x3D; rlm) &#123;</span><br><span class="line">            __CFRunLoopModeUnlock(rlm);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    __CFRunLoopUnlock(rl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要目的就是把timer添加到对应的mode中。mode 和 item是一对多的关系，timer是item的一种。</p><h3 id="CFRunLoopRun"><a href="#CFRunLoopRun" class="headerlink" title="__CFRunLoopRun"></a>__CFRunLoopRun</h3><p>接下来上源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* rl, rlm are locked on entrance and exit *&#x2F;</span><br><span class="line">static int32_t __CFRunLoopRun(CFRunLoopRef rl, CFRunLoopModeRef rlm, CFTimeInterval seconds, Boolean stopAfterHandle, CFRunLoopModeRef previousMode) &#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    do &#123;</span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        __CFRunLoopUnsetIgnoreWakeUps(rl);</span><br><span class="line">        </span><br><span class="line">        if (rlm-&gt;_observerMask &amp; kCFRunLoopBeforeTimers) __CFRunLoopDoObservers(rl, rlm, kCFRunLoopBeforeTimers);</span><br><span class="line">        if (rlm-&gt;_observerMask &amp; kCFRunLoopBeforeSources) __CFRunLoopDoObservers(rl, rlm, kCFRunLoopBeforeSources);</span><br><span class="line">        </span><br><span class="line">        __CFRunLoopDoBlocks(rl, rlm);</span><br><span class="line">        </span><br><span class="line">        Boolean sourceHandledThisLoop &#x3D; __CFRunLoopDoSources0(rl, rlm, stopAfterHandle);</span><br><span class="line">        if (sourceHandledThisLoop) &#123;</span><br><span class="line">            __CFRunLoopDoBlocks(rl, rlm);</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;如果是timer</span><br><span class="line">        else if (modeQueuePort !&#x3D; MACH_PORT_NULL &amp;&amp; livePort &#x3D;&#x3D; modeQueuePort) &#123;</span><br><span class="line">            CFRUNLOOP_WAKEUP_FOR_TIMER();</span><br><span class="line">            if (!__CFRunLoopDoTimers(rl, rlm, mach_absolute_time())) &#123;</span><br><span class="line">                &#x2F;&#x2F; Re-arm the next timer, because we apparently fired early</span><br><span class="line">                __CFArmNextTimerInMode(rlm, rl);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;如果是source1</span><br><span class="line">        CFRunLoopSourceRef rls &#x3D; __CFRunLoopModeFindSourceForMachPort(rl, rlm, livePort);</span><br><span class="line">        if (rls) &#123;</span><br><span class="line">#if DEPLOYMENT_TARGET_MACOSX || DEPLOYMENT_TARGET_EMBEDDED || DEPLOYMENT_TARGET_EMBEDDED_MINI</span><br><span class="line">            mach_msg_header_t *reply &#x3D; NULL;</span><br><span class="line">            sourceHandledThisLoop &#x3D; __CFRunLoopDoSource1(rl, rlm, rls, msg, msg-&gt;msgh_size, &amp;reply) || sourceHandledThisLoop;</span><br><span class="line">            if (NULL !&#x3D; reply) &#123;</span><br><span class="line">                (void)mach_msg(reply, MACH_SEND_MSG, reply-&gt;msgh_size, 0, MACH_PORT_NULL, 0, MACH_PORT_NULL);</span><br><span class="line">                CFAllocatorDeallocate(kCFAllocatorSystemDefault, reply);</span><br><span class="line">            &#125;</span><br><span class="line">#elif DEPLOYMENT_TARGET_WINDOWS</span><br><span class="line">            sourceHandledThisLoop &#x3D; __CFRunLoopDoSource1(rl, rlm, rls) || sourceHandledThisLoop;</span><br><span class="line">#endif</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    </span><br><span class="line">    &#125;while (0 &#x3D;&#x3D; retVal);</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>__CFRunLoopDoTimers源码，主要是通过for循环，对单个timer进行处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">static Boolean __CFRunLoopDoTimers(CFRunLoopRef rl, CFRunLoopModeRef rlm, uint64_t limitTSR) &#123;    &#x2F;* DOES CALLOUT *&#x2F;</span><br><span class="line">    ...</span><br><span class="line">    &#x2F;&#x2F;循环遍历，做下层单个timer的执行</span><br><span class="line">    for (CFIndex idx &#x3D; 0, cnt &#x3D; timers ? CFArrayGetCount(timers) : 0; idx &lt; cnt; idx++) &#123;</span><br><span class="line">        CFRunLoopTimerRef rlt &#x3D; (CFRunLoopTimerRef)CFArrayGetValueAtIndex(timers, idx);</span><br><span class="line">        &#x2F;&#x2F; 执行timer</span><br><span class="line">        Boolean did &#x3D; __CFRunLoopDoTimer(rl, rlm, rlt);</span><br><span class="line">        timerHandled &#x3D; timerHandled || did;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; mode and rl are locked on entry and exit</span><br><span class="line">static Boolean __CFRunLoopDoTimer(CFRunLoopRef rl, CFRunLoopModeRef rlm, CFRunLoopTimerRef rlt) &#123;    &#x2F;* DOES CALLOUT *&#x2F;</span><br><span class="line">    Boolean timerHandled &#x3D; false;</span><br><span class="line">    uint64_t oldFireTSR &#x3D; 0;</span><br><span class="line">    </span><br><span class="line">    &#x2F;* Fire a timer *&#x2F;</span><br><span class="line">    CFRetain(rlt);</span><br><span class="line">    __CFRunLoopTimerLock(rlt);</span><br><span class="line">    if (__CFIsValid(rlt) &amp;&amp; rlt-&gt;_fireTSR &lt;&#x3D; mach_absolute_time() &amp;&amp; !__CFRunLoopTimerIsFiring(rlt) &amp;&amp; rlt-&gt;_runLoop &#x3D;&#x3D; rl) &#123;</span><br><span class="line">    __CFRunLoopTimerUnlock(rlt);</span><br><span class="line">        __CFRunLoopTimerFireTSRLock();</span><br><span class="line">        oldFireTSR &#x3D; rlt-&gt;_fireTSR;</span><br><span class="line">        __CFRunLoopTimerFireTSRUnlock();</span><br><span class="line">        </span><br><span class="line">        __CFArmNextTimerInMode(rlm, rl);</span><br><span class="line">        </span><br><span class="line">        __CFRunLoopModeUnlock(rlm);</span><br><span class="line">        __CFRunLoopUnlock(rl);</span><br><span class="line">        &#x2F;&#x2F; 执行timer</span><br><span class="line">        __CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__(rlt-&gt;_callout, rlt, context_info);</span><br><span class="line">        CHECK_FOR_FORK();</span><br><span class="line">        if (doInvalidate) &#123;</span><br><span class="line">            CFRunLoopTimerInvalidate(rlt);      &#x2F;* DOES CALLOUT *&#x2F;</span><br><span class="line">        &#125;</span><br><span class="line">        if (context_release) &#123;</span><br><span class="line">            context_release(context_info);</span><br><span class="line">        &#125;</span><br><span class="line">        __CFRunLoopLock(rl);</span><br><span class="line">        __CFRunLoopModeLock(rlm);</span><br><span class="line">        __CFRunLoopTimerLock(rlt);</span><br><span class="line">        timerHandled &#x3D; true;</span><br><span class="line">        __CFRunLoopTimerUnsetFiring(rlt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在timer执行的位置打上断点，使用lldb -&gt; bt命令查看调用栈：</p><p><img src="runloop_2.jpg" alt=""></p><h3 id="timer的调用顺序"><a href="#timer的调用顺序" class="headerlink" title="timer的调用顺序"></a>timer的调用顺序</h3><ol><li>自定义的timer，设置Mode，并将其加入RunLoop中</li><li>在RunLoop的run方法执行时，会调用__CFRunLoopDoTimers执行所有timer</li><li>在__CFRunLoopDoTimers方法中，会通过for循环执行单个timer的操作</li><li>在__CFRunLoopDoTimer方法中，timer执行完毕后，会执行对应的timer回调函数</li></ol><p>是针对timer的执行分析，对于observer、block、source0、source1，其执行原理与timer是类似的</p><p><img src="runloop_3.jpg" alt=""></p><h1 id="runloop底层原理"><a href="#runloop底层原理" class="headerlink" title="runloop底层原理"></a>runloop底层原理</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void CFRunLoopRun(void) &#123;    &#x2F;* DOES CALLOUT *&#x2F;</span><br><span class="line">    int32_t result;</span><br><span class="line">    do &#123;</span><br><span class="line">        &#x2F;&#x2F; 1.0e10 : 科学计数 1*10^10，很大的值</span><br><span class="line">        result &#x3D; CFRunLoopRunSpecific(CFRunLoopGetCurrent(), kCFRunLoopDefaultMode, 1.0e10, false);</span><br><span class="line">        CHECK_FOR_FORK();</span><br><span class="line">    &#125; while (kCFRunLoopRunStopped !&#x3D; result &amp;&amp; kCFRunLoopRunFinished !&#x3D; result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>runloop就是一个do-while循环。当stop或者执行完成之后，则退出循环。</p><p>看一下<code>CFRunLoopRunSpecific</code>的内部：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">SInt32 CFRunLoopRunSpecific(CFRunLoopRef rl, CFStringRef modeName, CFTimeInterval seconds, Boolean returnAfterSourceHandled) &#123;     &#x2F;* DOES CALLOUT *&#x2F;</span><br><span class="line">    CHECK_FOR_FORK();</span><br><span class="line">    if (__CFRunLoopIsDeallocating(rl)) return kCFRunLoopRunFinished;</span><br><span class="line">    __CFRunLoopLock(rl);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;首先根据modeName找到对应mode</span><br><span class="line">    CFRunLoopModeRef currentMode &#x3D; __CFRunLoopFindMode(rl, modeName, false);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 通知 Observers: RunLoop 即将进入 loop。</span><br><span class="line">    __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopEntry);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 内部函数，进入loop，seconds是一个很大的值</span><br><span class="line">    result &#x3D; __CFRunLoopRun(rl, currentMode, seconds, returnAfterSourceHandled, previousMode);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 通知 Observers: RunLoop 即将退出。</span><br><span class="line">    __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopExit);</span><br><span class="line">    </span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来又回到<code>__CFRunLoopRun</code>的代码，上面提到的逻辑只是针对timer的，这里详细的说明一下，使用伪代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;核心函数</span><br><span class="line">&#x2F;* rl, rlm are locked on entrance and exit *&#x2F;</span><br><span class="line">static int32_t __CFRunLoopRun(CFRunLoopRef rl, CFRunLoopModeRef rlm, CFTimeInterval seconds, Boolean stopAfterHandle, CFRunLoopModeRef previousMode)&#123;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;通过GCD开启一个定时器，然后开始跑圈</span><br><span class="line">    dispatch_source_t timeout_timer &#x3D; NULL;</span><br><span class="line">    ...</span><br><span class="line">    dispatch_resume(timeout_timer);</span><br><span class="line">    </span><br><span class="line">    int32_t retVal &#x3D; 0;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;处理事务,即处理items</span><br><span class="line">    do &#123;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 通知 Observers: 即将处理timer事件</span><br><span class="line">        __CFRunLoopDoObservers(rl, rlm, kCFRunLoopBeforeTimers);</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 通知 Observers: 即将处理Source事件</span><br><span class="line">        __CFRunLoopDoObservers(rl, rlm, kCFRunLoopBeforeSources)</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 处理Blocks</span><br><span class="line">        __CFRunLoopDoBlocks(rl, rlm);</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 处理sources0</span><br><span class="line">        Boolean sourceHandledThisLoop &#x3D; __CFRunLoopDoSources0(rl, rlm, stopAfterHandle);</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 处理sources0返回为YES</span><br><span class="line">        if (sourceHandledThisLoop) &#123;</span><br><span class="line">            &#x2F;&#x2F; 处理Blocks</span><br><span class="line">            __CFRunLoopDoBlocks(rl, rlm);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 判断有无端口消息(Source1)</span><br><span class="line">        if (__CFRunLoopWaitForMultipleObjects(NULL, &amp;dispatchPort, 0, 0, &amp;livePort, NULL)) &#123;</span><br><span class="line">            &#x2F;&#x2F; 处理消息</span><br><span class="line">            goto handle_msg;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 通知 Observers: 即将进入休眠</span><br><span class="line">        __CFRunLoopDoObservers(rl, rlm, kCFRunLoopBeforeWaiting);</span><br><span class="line">        __CFRunLoopSetSleeping(rl);</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 等待被唤醒</span><br><span class="line">        __CFRunLoopServiceMachPort(waitSet, &amp;msg, sizeof(msg_buffer), &amp;livePort, poll ? 0 : TIMEOUT_INFINITY);</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; user callouts now OK again</span><br><span class="line">        __CFRunLoopUnsetSleeping(rl);</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 通知 Observers: 被唤醒，结束休眠</span><br><span class="line">        __CFRunLoopDoObservers(rl, rlm, kCFRunLoopAfterWaiting);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    handle_msg:</span><br><span class="line">        if (被timer唤醒) &#123;</span><br><span class="line">            &#x2F;&#x2F; 处理Timers</span><br><span class="line">            __CFRunLoopDoTimers(rl, rlm, mach_absolute_time())；</span><br><span class="line">        &#125;else if (被GCD唤醒)&#123;</span><br><span class="line">            &#x2F;&#x2F; 处理gcd</span><br><span class="line">            __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(msg);</span><br><span class="line">        &#125;else if (被source1唤醒)&#123;</span><br><span class="line">            &#x2F;&#x2F; 被Source1唤醒，处理Source1</span><br><span class="line">            __CFRunLoopDoSource1(rl, rlm, rls, msg, msg-&gt;msgh_size, &amp;reply)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 处理block</span><br><span class="line">        __CFRunLoopDoBlocks(rl, rlm);</span><br><span class="line">        </span><br><span class="line">        if (sourceHandledThisLoop &amp;&amp; stopAfterHandle) &#123;</span><br><span class="line">            retVal &#x3D; kCFRunLoopRunHandledSource;&#x2F;&#x2F;处理源</span><br><span class="line">        &#125; else if (timeout_context-&gt;termTSR &lt; mach_absolute_time()) &#123;</span><br><span class="line">            retVal &#x3D; kCFRunLoopRunTimedOut;&#x2F;&#x2F;超时</span><br><span class="line">        &#125; else if (__CFRunLoopIsStopped(rl)) &#123;</span><br><span class="line">            __CFRunLoopUnsetStopped(rl);</span><br><span class="line">            retVal &#x3D; kCFRunLoopRunStopped;&#x2F;&#x2F;停止</span><br><span class="line">        &#125; else if (rlm-&gt;_stopped) &#123;</span><br><span class="line">            rlm-&gt;_stopped &#x3D; false;</span><br><span class="line">            retVal &#x3D; kCFRunLoopRunStopped;&#x2F;&#x2F;停止</span><br><span class="line">        &#125; else if (__CFRunLoopModeIsEmpty(rl, rlm, previousMode)) &#123;</span><br><span class="line">            retVal &#x3D; kCFRunLoopRunFinished;&#x2F;&#x2F;结束</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;while (0 &#x3D;&#x3D; retVal);</span><br><span class="line">    </span><br><span class="line">    return retVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整理一下runloop的整体流程如下：</p><p><img src="runloop_4.jpg" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="https://opensource.apple.com/tarballs/CF/" target="_blank" rel="noopener">源码下载</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Runloop&quot;&gt;&lt;a href=&quot;#Runloop&quot; class=&quot;headerlink&quot; title=&quot;Runloop&quot;&gt;&lt;/a&gt;Runloop&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>内存管理-自动释放池</title>
    <link href="http://liujiaboy.github.io/2021/05/30/OC%E5%8E%9F%E7%90%86/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E8%87%AA%E5%8A%A8%E9%87%8A%E6%94%BE%E6%B1%A0/"/>
    <id>http://liujiaboy.github.io/2021/05/30/OC%E5%8E%9F%E7%90%86/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86-%E8%87%AA%E5%8A%A8%E9%87%8A%E6%94%BE%E6%B1%A0/</id>
    <published>2021-05-30T02:05:30.000Z</published>
    <updated>2021-05-31T02:29:59.017Z</updated>
    
    <content type="html"><![CDATA[<h1 id="autoreleasepool"><a href="#autoreleasepool" class="headerlink" title="autoreleasepool"></a>autoreleasepool</h1><p>新建一个工程，在main.m中就有一个autoreleasepool</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过clang编译一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ clang -rewrite-objc main.m -o main.cpp</span><br><span class="line">&#x2F;&#x2F; 或者</span><br><span class="line">$ xcrun -sdk iphonesimulator clang -arch x86_64 -rewrite-objc main.m -o main-arm64.cpp</span><br></pre></td></tr></table></figure><p>我们打开对应的cpp文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">struct __AtAutoreleasePool &#123;</span><br><span class="line">    &#x2F;&#x2F;构造函数</span><br><span class="line">    __AtAutoreleasePool() &#123;</span><br><span class="line">        atautoreleasepoolobj &#x3D; objc_autoreleasePoolPush();</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 析构函数</span><br><span class="line">    ~__AtAutoreleasePool() &#123;</span><br><span class="line">        objc_autoreleasePoolPop(atautoreleasepoolobj);</span><br><span class="line">    &#125;</span><br><span class="line">    void * atautoreleasepoolobj;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">   &#123; </span><br><span class="line">        &#x2F;&#x2F; 是一个结构体</span><br><span class="line">         __AtAutoreleasePool __autoreleasepool; </span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@autoreleasepool &#123;&#125;</span><br><span class="line">&#x2F;&#x2F;等价于</span><br><span class="line">&#123;__AtAutoreleasePool __autoreleasepool; &#125;</span><br></pre></td></tr></table></figure><p>__AtAutoreleasePool是一个结构体，有<code>构造函数</code> 和 <code>析构函数</code>，在结构体定义的对象在作用域结束后，会自动调用析构函数。</p><p>在源码中有这么一段话：</p><blockquote><p>  Autorelease pool implementation</p></blockquote><blockquote><p>  A thread’s autorelease pool is a stack of pointers.<br>  Each pointer is either an object to release, or POOL_BOUNDARY which is an autorelease pool boundary.<br>  A pool token is a pointer to the POOL_BOUNDARY for that pool. When the pool is popped, every object hotter than the sentinel is released.<br> The stack is divided into a doubly-linked list of pages. Pages are added and deleted as necessary.<br> Thread-local storage points to the hot page, where newly autoreleased objects are stored. </p></blockquote><p>通过上述描述，可以大概的知道以下几点：</p><p>通过描述，有以下几点说明</p><ol><li>自动释放池 是一个 关于指针的栈结构</li><li>其中的指针是指要释放的对象或者 pool_boundary 哨兵（现在经常被称为 边界）</li><li>自动释放池是一个页的结构（虚拟内存中提及过） ，而且这个页是一个双向链表（表示有父节点 和 子节点，在类中有提及，即类的继承链）</li><li>自动释放池和线程有关系</li></ol><p>接下来看一下源码中的实现：</p><h2 id="AutoreleasePoolPage"><a href="#AutoreleasePoolPage" class="headerlink" title="AutoreleasePoolPage"></a>AutoreleasePoolPage</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void *</span><br><span class="line">objc_autoreleasePoolPush(void)</span><br><span class="line">&#123;</span><br><span class="line">    return AutoreleasePoolPage::push();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void</span><br><span class="line">objc_autoreleasePoolPop(void *ctxt)</span><br><span class="line">&#123;</span><br><span class="line">    AutoreleasePoolPage::pop(ctxt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>都有一个<code>AutoreleasePoolPage</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#96;class AutoreleasePoolPage : private AutoreleasePoolPageData&#96;</span><br><span class="line"></span><br><span class="line">struct AutoreleasePoolPageData</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;用来校验AutoreleasePoolPage的结构是否完整</span><br><span class="line">    magic_t const magic;    &#x2F;&#x2F;16个字节，以结构体中的变量对齐后的值为准，m[4] &#x3D; 4*4 &#x3D;16字节</span><br><span class="line">    &#x2F;&#x2F;指向最新添加的autoreleased对象的下一个位置，初始化时指向begin()</span><br><span class="line">    __unsafe_unretained id *next;&#x2F;&#x2F;8字节</span><br><span class="line">    &#x2F;&#x2F;指向当前线程</span><br><span class="line">    pthread_t const thread;&#x2F;&#x2F;8字节</span><br><span class="line">    &#x2F;&#x2F;指向父节点，第一个结点的parent值为nil</span><br><span class="line">    AutoreleasePoolPage * const parent;&#x2F;&#x2F;8字节</span><br><span class="line">    &#x2F;&#x2F;指向子节点，最后一个结点的child值为nil</span><br><span class="line">    AutoreleasePoolPage *child;&#x2F;&#x2F;8字节</span><br><span class="line">    &#x2F;&#x2F;表示深度，从0开始，往后递增1</span><br><span class="line">    uint32_t const depth;&#x2F;&#x2F;4字节</span><br><span class="line">    &#x2F;&#x2F;表示high water mark 最大入栈数量标记</span><br><span class="line">    uint32_t hiwat;&#x2F;&#x2F;4字节</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;初始化</span><br><span class="line">    AutoreleasePoolPageData(__unsafe_unretained id* _next, pthread_t _thread, AutoreleasePoolPage* _parent, uint32_t _depth, uint32_t _hiwat)</span><br><span class="line">        : magic(), next(_next), thread(_thread),</span><br><span class="line">          parent(_parent), child(nil),</span><br><span class="line">          depth(_depth), hiwat(_hiwat)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来我们在回过头看看<code>objc_autoreleasePoolPush</code></p><h2 id="objc-autoreleasePoolPush"><a href="#objc-autoreleasePoolPush" class="headerlink" title="objc_autoreleasePoolPush"></a>objc_autoreleasePoolPush</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;入栈</span><br><span class="line">static inline void *push() </span><br><span class="line">&#123;</span><br><span class="line">    id *dest;</span><br><span class="line">    &#x2F;&#x2F;判断是否有pool</span><br><span class="line">    if (slowpath(DebugPoolAllocation)) &#123;</span><br><span class="line">        &#x2F;&#x2F; Each autorelease pool starts on a new pool page</span><br><span class="line">        &#x2F;&#x2F; 自动释放池从新池页面开始</span><br><span class="line">        &#x2F;&#x2F;如果没有，则创建</span><br><span class="line">        dest &#x3D; autoreleaseNewPage(POOL_BOUNDARY);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F;压栈一个POOL_BOUNDARY，即压栈哨兵</span><br><span class="line">        dest &#x3D; autoreleaseFast(POOL_BOUNDARY);</span><br><span class="line">    &#125;</span><br><span class="line">    ASSERT(dest &#x3D;&#x3D; EMPTY_POOL_PLACEHOLDER || *dest &#x3D;&#x3D; POOL_BOUNDARY);</span><br><span class="line">    return dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="autoreleaseNewPage"><a href="#autoreleaseNewPage" class="headerlink" title="autoreleaseNewPage"></a>autoreleaseNewPage</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;创建新页</span><br><span class="line">static __attribute__((noinline))</span><br><span class="line">id *autoreleaseNewPage(id obj)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;获取当前操作页</span><br><span class="line">    AutoreleasePoolPage *page &#x3D; hotPage();</span><br><span class="line">    &#x2F;&#x2F;如果存在，则压栈对象</span><br><span class="line">    if (page) return autoreleaseFullPage(obj, page);</span><br><span class="line">    &#x2F;&#x2F;如果不存在，则创建页</span><br><span class="line">    else return autoreleaseNoPage(obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;******** hotPage方法 ********</span><br><span class="line">&#x2F;&#x2F;获取当前操作页</span><br><span class="line">static inline AutoreleasePoolPage *hotPage() </span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;获取当前页</span><br><span class="line">    AutoreleasePoolPage *result &#x3D; (AutoreleasePoolPage *)</span><br><span class="line">        tls_get_direct(key);</span><br><span class="line">    &#x2F;&#x2F;如果是一个空池，则返回nil，否则，返回当前线程的自动释放池</span><br><span class="line">    if ((id *)result &#x3D;&#x3D; EMPTY_POOL_PLACEHOLDER) return nil;</span><br><span class="line">    if (result) result-&gt;fastcheck();</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;******** autoreleaseNoPage方法 ********</span><br><span class="line">static __attribute__((noinline))</span><br><span class="line">id *autoreleaseNoPage(id obj)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; &quot;No page&quot; could mean no pool has been pushed</span><br><span class="line">    &#x2F;&#x2F; or an empty placeholder pool has been pushed and has no contents yet</span><br><span class="line">    ASSERT(!hotPage());</span><br><span class="line"></span><br><span class="line">    bool pushExtraBoundary &#x3D; false;</span><br><span class="line">    &#x2F;&#x2F;判断是否是空占位符，如果是，则压栈哨兵标识符置为YES</span><br><span class="line">    if (haveEmptyPoolPlaceholder()) &#123;</span><br><span class="line">        &#x2F;&#x2F; We are pushing a second pool over the empty placeholder pool</span><br><span class="line">        &#x2F;&#x2F; or pushing the first object into the empty placeholder pool.</span><br><span class="line">        &#x2F;&#x2F; Before doing that, push a pool boundary on behalf of the pool </span><br><span class="line">        &#x2F;&#x2F; that is currently represented by the empty placeholder.</span><br><span class="line">        pushExtraBoundary &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;如果对象不是哨兵对象，且没有Pool，则报错</span><br><span class="line">    else if (obj !&#x3D; POOL_BOUNDARY  &amp;&amp;  DebugMissingPools) &#123;</span><br><span class="line">        &#x2F;&#x2F; We are pushing an object with no pool in place, </span><br><span class="line">        &#x2F;&#x2F; and no-pool debugging was requested by environment.</span><br><span class="line">        _objc_inform(&quot;MISSING POOLS: (%p) Object %p of class %s &quot;</span><br><span class="line">                     &quot;autoreleased with no pool in place - &quot;</span><br><span class="line">                     &quot;just leaking - break on &quot;</span><br><span class="line">                     &quot;objc_autoreleaseNoPool() to debug&quot;, </span><br><span class="line">                     objc_thread_self(), (void*)obj, object_getClassName(obj));</span><br><span class="line">        objc_autoreleaseNoPool(obj);</span><br><span class="line">        return nil;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;如果对象是哨兵对象，且没有申请自动释放池内存，则设置一个空占位符存储在tls中，其目的是为了节省内存</span><br><span class="line">    else if (obj &#x3D;&#x3D; POOL_BOUNDARY  &amp;&amp;  !DebugPoolAllocation) &#123;&#x2F;&#x2F;如果传入参数为哨兵</span><br><span class="line">        &#x2F;&#x2F; We are pushing a pool with no pool in place,</span><br><span class="line">        &#x2F;&#x2F; and alloc-per-pool debugging was not requested.</span><br><span class="line">        &#x2F;&#x2F; Install and return the empty pool placeholder.</span><br><span class="line">        return setEmptyPoolPlaceholder();&#x2F;&#x2F;设置空的占位符</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; We are pushing an object or a non-placeholder&#39;d pool.</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Install the first page.</span><br><span class="line">    &#x2F;&#x2F;初始化第一页</span><br><span class="line">    AutoreleasePoolPage *page &#x3D; new AutoreleasePoolPage(nil);</span><br><span class="line">    &#x2F;&#x2F;设置page为当前聚焦页</span><br><span class="line">    setHotPage(page);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; Push a boundary on behalf of the previously-placeholder&#39;d pool.</span><br><span class="line">    &#x2F;&#x2F;压栈哨兵的标识符为YES，则压栈哨兵对象</span><br><span class="line">    if (pushExtraBoundary) &#123;</span><br><span class="line">        &#x2F;&#x2F;压栈哨兵</span><br><span class="line">        page-&gt;add(POOL_BOUNDARY);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; Push the requested object or pool.</span><br><span class="line">    &#x2F;&#x2F;压栈对象</span><br><span class="line">    return page-&gt;add(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中autoreleaseNoPage方法中发现当前线程的自动释放池是通过AutoreleasePoolPage创建的，其定义中有构造方法，而构造方法的实现是通过父类AutoreleasePoolPageData的初始化方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;**********AutoreleasePoolPage构造方法**********</span><br><span class="line">    AutoreleasePoolPage(AutoreleasePoolPage *newParent) :</span><br><span class="line">        AutoreleasePoolPageData(begin(),&#x2F;&#x2F;开始存储的位置</span><br><span class="line">                                objc_thread_self(),&#x2F;&#x2F;传的是当前线程，当前线程时通过tls获取的</span><br><span class="line">                                newParent,</span><br><span class="line">                                newParent ? 1+newParent-&gt;depth : 0,&#x2F;&#x2F;如果是第一页深度为0，往后是前一个的深度+1</span><br><span class="line">                                newParent ? newParent-&gt;hiwat : 0)</span><br><span class="line">&#123; </span><br><span class="line">    if (parent) &#123;</span><br><span class="line">        parent-&gt;check();</span><br><span class="line">        ASSERT(!parent-&gt;child);</span><br><span class="line">        parent-&gt;unprotect();</span><br><span class="line">        &#x2F;&#x2F;this 表示 新建页面，将当前页面的子节点 赋值为新建页面</span><br><span class="line">        parent-&gt;child &#x3D; this;</span><br><span class="line">        parent-&gt;protect();</span><br><span class="line">    &#125;</span><br><span class="line">    protect();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;**********AutoreleasePoolPageData初始化方法**********</span><br><span class="line">AutoreleasePoolPageData(__unsafe_unretained id* _next, pthread_t _thread, AutoreleasePoolPage* _parent, uint32_t _depth, uint32_t _hiwat)</span><br><span class="line">        : magic(), next(_next), thread(_thread),</span><br><span class="line">          parent(_parent), child(nil),</span><br><span class="line">          depth(_depth), hiwat(_hiwat)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>看一下几个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AutoreleasePoolPageData(begin(),&#x2F;&#x2F;开始存储的位置</span><br><span class="line">                                objc_thread_self(),&#x2F;&#x2F;传的是当前线程，当前线程时通过tls获取的</span><br><span class="line">                                newParent,</span><br><span class="line">                                newParent ? 1+newParent-&gt;depth : 0,&#x2F;&#x2F;如果是第一页深度为0，往后是前一个的深度+1</span><br><span class="line">                                newParent ? newParent-&gt;hiwat : 0)</span><br></pre></td></tr></table></figure><ul><li><p><code>begin()</code>:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;页的开始位置</span><br><span class="line">id * begin() &#123;</span><br><span class="line">    &#x2F;&#x2F;等于 首地址+56（AutoreleasePoolPage类所占内存大小）</span><br><span class="line">    return (id *) ((uint8_t *)this+sizeof(*this));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>objc_thread_self()</code>： 表示的是当前线程，而当前线程时通过tls获取</p></li><li><p><code>newParent</code>： 父节点</p></li><li><p>后面两个参数是通过父节点的深度、最大入栈个数计算depth以及hiwat</p></li></ul><h3 id="自动释放池内存结构"><a href="#自动释放池内存结构" class="headerlink" title="自动释放池内存结构"></a>自动释放池内存结构</h3><p>由于在ARC模式下，是无法手动调用autorelease，所以将Demo切换至MRC模式。<br><code>Build Settings</code> -&gt; <code>Objectice-C Automatic Reference Counting</code>设置为<code>NO</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 自动释放池打印</span><br><span class="line">extern void _objc_autoreleasePoolPrint(void);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;************运行代码************</span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        &#x2F;&#x2F;循环创建对象，并加入自动释放池</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 5; i++) &#123;</span><br><span class="line">             NSObject *objc &#x3D; [[NSObject alloc] sutorelease];</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;调用</span><br><span class="line">        _objc_autoreleasePoolPrint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="autorelease_1.png" alt=""></p><p>查看自动释放池的内存结构，发现page的开始与第一个对象的地址差是0x38，转换成十进制刚好是56，也就是 AutoreleasePoolPage自己本身的内存大小。</p><p>但是打印的是5个对象，但是这里有6个。第一个<code>pool</code>是啥？</p><p>哨兵对象。只在第一页有，防止释放时越界。</p><p>接着我们修改i的最大值为505。发现第二页开始有1个数据了。<br>接着在继续修改最大值为504+506，发现第三页也开始有1个数据了。</p><p>所以第一页有哨兵对象，可以存504个对象。第二页之后可以存505个对象。</p><p>在源码中<code>AutoreleasePoolPage</code>-&gt;size可以看到一页的大小。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public:</span><br><span class="line">static size_t const SIZE &#x3D; PAGE_MIN_SIZE;</span><br><span class="line"></span><br><span class="line">#define PAGE_MIN_SHIFT          12</span><br><span class="line">#define PAGE_MIN_SIZE           (1 &lt;&lt; PAGE_MIN_SHIFT)</span><br></pre></td></tr></table></figure><p>size = 1&lt;&lt;12 = 4096。</p><p>首地址是从0x38开始的，也就是56个字节，4096-46 = 4040 = 505 * 8<br>所以一页有506个对象。</p><p><img src="autorelease_2.jpg" alt=""></p><h3 id="autoreleaseFast压栈"><a href="#autoreleaseFast压栈" class="headerlink" title="autoreleaseFast压栈"></a>autoreleaseFast压栈</h3><p>push方法的第二步，第一步是创建，第二步是直接存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">static inline id *autoreleaseFast(id obj)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;获取当前操作页</span><br><span class="line">    AutoreleasePoolPage *page &#x3D; hotPage();</span><br><span class="line">    &#x2F;&#x2F;判断页是否满了</span><br><span class="line">    if (page &amp;&amp; !page-&gt;full()) &#123;</span><br><span class="line">        &#x2F;&#x2F;如果未满，则压栈</span><br><span class="line">        return page-&gt;add(obj);</span><br><span class="line">    &#125; else if (page) &#123;</span><br><span class="line">        &#x2F;&#x2F; 如果满了，则安排新的页面</span><br><span class="line">        return autoreleaseFullPage(obj, page);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F;页不存在，则新建页</span><br><span class="line">        return autoreleaseNoPage(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当前页没有满，则添加<code>add</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 添加释放对象</span><br><span class="line">id *add(id obj)</span><br><span class="line">&#123;</span><br><span class="line">    ASSERT(!full());</span><br><span class="line">    unprotect();</span><br><span class="line">    &#x2F;&#x2F;传入对象存储的位置</span><br><span class="line">    id *ret &#x3D; next;  &#x2F;&#x2F; faster than &#96;return next-1&#96; because of aliasing</span><br><span class="line">    &#x2F;&#x2F;将obj压栈到next指针位置，然后next进行++，即下一个对象存储的位置</span><br><span class="line">    *next++ &#x3D; obj;</span><br><span class="line">    protect();</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果页满了则处理<code>autoreleaseFullPage</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;添加自动释放对象，当页满的时候调用这个方法</span><br><span class="line">static __attribute__((noinline))</span><br><span class="line">id *autoreleaseFullPage(id obj, AutoreleasePoolPage *page)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; The hot page is full. </span><br><span class="line">    &#x2F;&#x2F; Step to the next non-full page, adding a new page if necessary.</span><br><span class="line">    &#x2F;&#x2F; Then add the object to that page.</span><br><span class="line">    ASSERT(page &#x3D;&#x3D; hotPage());</span><br><span class="line">    ASSERT(page-&gt;full()  ||  DebugPoolAllocation);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;do-while遍历循环查找界面是否满了</span><br><span class="line">    do &#123;</span><br><span class="line">        &#x2F;&#x2F;如果子页面存在，则将页面替换为子页面</span><br><span class="line">        if (page-&gt;child) page &#x3D; page-&gt;child;</span><br><span class="line">        &#x2F;&#x2F;如果子页面不存在，则新建页面</span><br><span class="line">        else page &#x3D; new AutoreleasePoolPage(page);</span><br><span class="line">    &#125; while (page-&gt;full());</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;设置为当前操作页面</span><br><span class="line">    setHotPage(page);</span><br><span class="line">    &#x2F;&#x2F;对象压栈</span><br><span class="line">    return page-&gt;add(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="压栈流程"><a href="#压栈流程" class="headerlink" title="压栈流程"></a>压栈流程</h4><ol><li>如果页存在，且未满，则通过add方法压栈对象</li><li>如果页存在，且满了，则通过autoreleaseFullPage方法安排新的页面</li><li>如果页不存在，则通过autoreleaseNoPage方法创建新页</li></ol><h2 id="objc-autoreleasePoolPop"><a href="#objc-autoreleasePoolPop" class="headerlink" title="objc_autoreleasePoolPop"></a>objc_autoreleasePoolPop</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 析构函数</span><br><span class="line">~__AtAutoreleasePool() &#123;</span><br><span class="line">    objc_autoreleasePoolPop(atautoreleasepoolobj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在析构函数中传了一个参数，就是<code>atautoreleasepoolobj</code>对象，这样就可以和创建的autoreleasepool关联上了。接下来看一下pop的源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;出栈</span><br><span class="line">static inline void</span><br><span class="line">pop(void *token)</span><br><span class="line">&#123;</span><br><span class="line">    AutoreleasePoolPage *page;</span><br><span class="line">    id *stop;</span><br><span class="line">   &#x2F;&#x2F;判断对象是否是空占位符</span><br><span class="line">    if (token &#x3D;&#x3D; (void*)EMPTY_POOL_PLACEHOLDER) &#123;</span><br><span class="line">        &#x2F;&#x2F;如果当是空占位符</span><br><span class="line">        &#x2F;&#x2F; Popping the top-level placeholder pool.</span><br><span class="line">        &#x2F;&#x2F;获取当前页</span><br><span class="line">        page &#x3D; hotPage();</span><br><span class="line">        if (!page) &#123;</span><br><span class="line">            &#x2F;&#x2F; Pool was never used. Clear the placeholder.</span><br><span class="line">            &#x2F;&#x2F;如果当前页不存在，则清除空占位符</span><br><span class="line">            return setHotPage(nil);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; Pool was used. Pop its contents normally.</span><br><span class="line">        &#x2F;&#x2F; Pool pages remain allocated for re-use as usual.</span><br><span class="line">        &#x2F;&#x2F;如果当前页存在，则将当前页设置为coldPage,token设置为coldPage的开始位置</span><br><span class="line">        page &#x3D; coldPage();</span><br><span class="line">        token &#x3D; page-&gt;begin();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F;获取token所在的页</span><br><span class="line">        page &#x3D; pageForPointer(token);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    stop &#x3D; (id *)token;</span><br><span class="line">    &#x2F;&#x2F;判断最后一个位置，是否是哨兵</span><br><span class="line">    if (*stop !&#x3D; POOL_BOUNDARY) &#123;</span><br><span class="line">        &#x2F;&#x2F;最后一个位置不是哨兵，即最后一个位置是一个对象</span><br><span class="line">        if (stop &#x3D;&#x3D; page-&gt;begin()  &amp;&amp;  !page-&gt;parent) &#123;</span><br><span class="line">            &#x2F;&#x2F;如果是第一个位置，且没有父节点，什么也不做</span><br><span class="line">            &#x2F;&#x2F; Start of coldest page may correctly not be POOL_BOUNDARY:</span><br><span class="line">            &#x2F;&#x2F; 1. top-level pool is popped, leaving the cold page in place</span><br><span class="line">            &#x2F;&#x2F; 2. an object is autoreleased with no pool</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            &#x2F;&#x2F;如果是第一个位置，且有父节点，则出现了混乱</span><br><span class="line">            &#x2F;&#x2F; Error. For bincompat purposes this is not </span><br><span class="line">            &#x2F;&#x2F; fatal in executables built with old SDKs.</span><br><span class="line">            return badPop(token);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (slowpath(PrintPoolHiwat || DebugPoolAllocation || DebugMissingPools)) &#123;</span><br><span class="line">        return popPageDebug(token, page, stop);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;出栈页</span><br><span class="line">    return popPage&lt;false&gt;(token, page, stop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下popPage</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;出栈页面</span><br><span class="line">template&lt;bool allowDebug&gt;</span><br><span class="line">    static void</span><br><span class="line">    popPage(void *token, AutoreleasePoolPage *page, id *stop)</span><br><span class="line">&#123;</span><br><span class="line">    if (allowDebug &amp;&amp; PrintPoolHiwat) printHiwat();</span><br><span class="line">    &#x2F;&#x2F; 出栈当前操作页面对象</span><br><span class="line">    page-&gt;releaseUntil(stop);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; memory: delete empty children 删除空子项</span><br><span class="line">    if (allowDebug &amp;&amp; DebugPoolAllocation  &amp;&amp;  page-&gt;empty()) &#123;</span><br><span class="line">        &#x2F;&#x2F; special case: delete everything during page-per-pool debugging</span><br><span class="line">        &#x2F;&#x2F;调试期间删除每个特殊情况下的所有池</span><br><span class="line">        &#x2F;&#x2F;获取当前页面的父节点</span><br><span class="line">        AutoreleasePoolPage *parent &#x3D; page-&gt;parent;</span><br><span class="line">        &#x2F;&#x2F;将当前页面杀掉</span><br><span class="line">        page-&gt;kill();</span><br><span class="line">        &#x2F;&#x2F;设置操作页面为父节点页面</span><br><span class="line">        setHotPage(parent);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (allowDebug &amp;&amp; DebugMissingPools  &amp;&amp;  page-&gt;empty()  &amp;&amp;  !page-&gt;parent) &#123;</span><br><span class="line">        &#x2F;&#x2F; special case: delete everything for pop(top)</span><br><span class="line">        &#x2F;&#x2F; when debugging missing autorelease pools</span><br><span class="line">        &#x2F;&#x2F;特殊情况：调试丢失的自动释放池时删除pop（top）的所有内容</span><br><span class="line">        page-&gt;kill();</span><br><span class="line">        setHotPage(nil);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (page-&gt;child) &#123;</span><br><span class="line">        &#x2F;&#x2F; hysteresis: keep one empty child if page is more than half full 如果页面已满一半以上，则保留一个空子级</span><br><span class="line">        if (page-&gt;lessThanHalfFull()) &#123;</span><br><span class="line">            page-&gt;child-&gt;kill();</span><br><span class="line">        &#125;</span><br><span class="line">        else if (page-&gt;child-&gt;child) &#123;</span><br><span class="line">            page-&gt;child-&gt;child-&gt;kill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>stop就是自动释放池创建的位置。拿到stop的位置后，释放到stop位置之后的所有对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;释放到stop位置之前的所有对象</span><br><span class="line">void releaseUntil(id *stop) </span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Not recursive: we don&#39;t want to blow out the stack  </span><br><span class="line">    &#x2F;&#x2F; 不是递归的：我们不想破坏堆栈</span><br><span class="line">    &#x2F;&#x2F; if a thread accumulates a stupendous amount of garbage</span><br><span class="line">    &#x2F;&#x2F;判断下一个对象是否等于stop，如果不等于，则进入while循环</span><br><span class="line">    while (this-&gt;next !&#x3D; stop) &#123;</span><br><span class="line">        &#x2F;&#x2F; Restart from hotPage() every time, in case -release </span><br><span class="line">        &#x2F;&#x2F; autoreleased more objects 每次从hotPage（）重新启动，以防-release自动释放更多对象</span><br><span class="line">        &#x2F;&#x2F;获取当前操作页面，即hot页面</span><br><span class="line">        AutoreleasePoolPage *page &#x3D; hotPage();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; fixme I think this &#96;while&#96; can be &#96;if&#96;, but I can&#39;t prove it</span><br><span class="line">        &#x2F;&#x2F;如果当前页是空的</span><br><span class="line">        while (page-&gt;empty()) &#123;</span><br><span class="line">            &#x2F;&#x2F;将page赋值为父节点页</span><br><span class="line">            page &#x3D; page-&gt;parent;</span><br><span class="line">            &#x2F;&#x2F;并设置当前页为父节点页</span><br><span class="line">            setHotPage(page);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        page-&gt;unprotect();</span><br><span class="line">        &#x2F;&#x2F;next进行--操作，即出栈</span><br><span class="line">        id obj &#x3D; *--page-&gt;next;</span><br><span class="line">        &#x2F;&#x2F;将页索引位置置为SCRIBBLE，表示已经被释放</span><br><span class="line">        memset((void*)page-&gt;next, SCRIBBLE, sizeof(*page-&gt;next));</span><br><span class="line">        page-&gt;protect();</span><br><span class="line"></span><br><span class="line">        if (obj !&#x3D; POOL_BOUNDARY) &#123;</span><br><span class="line">            &#x2F;&#x2F;释放</span><br><span class="line">            objc_release(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;设置当前页</span><br><span class="line">    setHotPage(this);</span><br><span class="line"></span><br><span class="line">#if DEBUG</span><br><span class="line">    &#x2F;&#x2F; we expect any children to be completely empty</span><br><span class="line">    for (AutoreleasePoolPage *page &#x3D; child; page; page &#x3D; page-&gt;child) &#123;</span><br><span class="line">        ASSERT(page-&gt;empty());</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看一下<code>kill</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;销毁</span><br><span class="line">void kill() </span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Not recursive: we don&#39;t want to blow out the stack </span><br><span class="line">    &#x2F;&#x2F; if a thread accumulates a stupendous amount of garbage</span><br><span class="line">    AutoreleasePoolPage *page &#x3D; this;</span><br><span class="line">    &#x2F;&#x2F;获取最后一个页</span><br><span class="line">    while (page-&gt;child) page &#x3D; page-&gt;child;</span><br><span class="line"></span><br><span class="line">    AutoreleasePoolPage *deathptr;</span><br><span class="line">    do &#123;</span><br><span class="line">        deathptr &#x3D; page;</span><br><span class="line">        &#x2F;&#x2F;子节点 变成 父节点</span><br><span class="line">        page &#x3D; page-&gt;parent;</span><br><span class="line">        if (page) &#123;</span><br><span class="line">            page-&gt;unprotect();</span><br><span class="line">            &#x2F;&#x2F;子节点为nil</span><br><span class="line">            page-&gt;child &#x3D; nil;</span><br><span class="line">            page-&gt;protect();</span><br><span class="line">        &#125;</span><br><span class="line">        delete deathptr;</span><br><span class="line">    &#125; while (deathptr !&#x3D; this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="autorelease-pop流程"><a href="#autorelease-pop流程" class="headerlink" title="autorelease pop流程"></a>autorelease pop流程</h3><ol><li>是否是空页，做容错处理</li><li>releaseUntil(stop)，按页倒序进行，循环释放所有对象，直到位置执行stop。先从child开始</li><li>页中的对象释放之后，page执行kill，循环删除child节点</li></ol><h2 id="autorelease底层"><a href="#autorelease底层" class="headerlink" title="autorelease底层"></a>autorelease底层</h2><p>看一下mrc下autorelease的源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">id</span><br><span class="line">objc_autorelease(id obj)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;如果不是对象，则直接返回</span><br><span class="line">    if (!obj) return obj;</span><br><span class="line">    &#x2F;&#x2F;如果是小对象，也直接返回</span><br><span class="line">    if (obj-&gt;isTaggedPointer()) return obj;</span><br><span class="line">    return obj-&gt;autorelease();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果是小对象，则直接return，不处理。</li><li>如果是对象，执行<code>obj-&gt;autorelease()</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">inline id </span><br><span class="line">objc_object::autorelease()</span><br><span class="line">&#123;</span><br><span class="line">    ASSERT(!isTaggedPointer());</span><br><span class="line">    &#x2F;&#x2F; 自定义对象</span><br><span class="line">    if (fastpath(!ISA()-&gt;hasCustomRR())) &#123;</span><br><span class="line">        return rootAutorelease();</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 系统</span><br><span class="line">    return ((id(*)(objc_object *, SEL))objc_msgSend)(this, @selector(autorelease));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义对象，执行<code>rootAutorelease</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">inline id </span><br><span class="line">objc_object::rootAutorelease()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 是否为小对象</span><br><span class="line">    if (isTaggedPointer()) return (id)this;</span><br><span class="line">    if (prepareOptimizedReturn(ReturnAtPlus1)) return (id)this;</span><br><span class="line"></span><br><span class="line">    return rootAutorelease2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象执行<code>rootAutorelease2</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__attribute__((noinline,used))</span><br><span class="line">id </span><br><span class="line">objc_object::rootAutorelease2()</span><br><span class="line">&#123;</span><br><span class="line">    ASSERT(!isTaggedPointer());</span><br><span class="line">    return AutoreleasePoolPage::autorelease((id)this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后执行的还是<code>AutoreleasePoolPage</code>这个对象，调用<code>autorelease</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public:</span><br><span class="line">    static inline id autorelease(id obj)</span><br><span class="line">    &#123;</span><br><span class="line">        ASSERT(obj);</span><br><span class="line">        ASSERT(!obj-&gt;isTaggedPointer());</span><br><span class="line">        id *dest __unused &#x3D; autoreleaseFast(obj);</span><br><span class="line">        ASSERT(!dest  ||  dest &#x3D;&#x3D; EMPTY_POOL_PLACEHOLDER  ||  *dest &#x3D;&#x3D; obj);</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里调用的就是<code>autoreleaseFast</code>。就又回到了上面的压栈流程。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>@autoreleasepool {} 等价于 {__AtAutoreleasePool __autoreleasepool; }，这是构造和析构函数</li><li>autorelease push压栈流程<ol><li>如果页存在，且未满，则通过add方法压栈对象</li><li>如果页存在，且满了，则通过autoreleaseFullPage方法安排新的页面</li><li>如果页不存在，则通过autoreleaseNoPage方法创建新页</li></ol></li><li>autorelease pop流程<ol><li>是否是空页，做容错处理</li><li>releaseUntil(stop)，按页倒序进行，循环释放所有对象，直到位置执行stop。先从child开始</li><li>页中的对象释放之后，page执行kill，循环删除child节点</li></ol></li><li>mrc下 autorelease原理<ol><li>判断是否为小对象，是直接return</li><li>执行<code>autoreleaseFast</code>，执行autorelease push压栈流程</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;autoreleasepool&quot;&gt;&lt;a href=&quot;#autoreleasepool&quot; class=&quot;headerlink&quot; title=&quot;autoreleasepool&quot;&gt;&lt;/a&gt;autoreleasepool&lt;/h1&gt;&lt;p&gt;新建一个工程，在main.m中就有一
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>内存管理</title>
    <link href="http://liujiaboy.github.io/2021/05/29/OC%E5%8E%9F%E7%90%86/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://liujiaboy.github.io/2021/05/29/OC%E5%8E%9F%E7%90%86/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</id>
    <published>2021-05-29T11:35:15.000Z</published>
    <updated>2021-05-31T02:29:59.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内存管理方案"><a href="#内存管理方案" class="headerlink" title="内存管理方案"></a>内存管理方案</h1><ol><li>ARC/MRC</li><li>TarggedPointer: 专门用来处理小对象，比如NSNumber、NSDate、（NSString中有一种是targeed pointer）</li><li>Nonpointer_isa：非指针类型的isa。主要用来优化64位地址。</li><li>SideTables：散列表。主要有两种类型的表，引用计数表，弱引用表。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; viewDidLoad添加</span><br><span class="line">- (void)taggedPointerDemo &#123;</span><br><span class="line">  self.queue &#x3D; dispatch_queue_create(&quot;com.cjl.cn&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    </span><br><span class="line">    for (int i &#x3D; 0; i&lt;10000; i++) &#123;</span><br><span class="line">        dispatch_async(self.queue, ^&#123;</span><br><span class="line">            &#x2F;&#x2F; alloc堆上，iOS优化之后变成 taggedpointer</span><br><span class="line">            &#x2F;&#x2F; nameStr是NSTaggedPointerString</span><br><span class="line">            self.nameStr &#x3D; [NSString stringWithFormat:@&quot;aaa&quot;];  </span><br><span class="line">             NSLog(@&quot;%@&quot;,self.nameStr);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 点击</span><br><span class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event&#123;</span><br><span class="line">    NSLog(@&quot;来了&quot;);</span><br><span class="line">    for (int i &#x3D; 0; i&lt;10000; i++) &#123;</span><br><span class="line">        dispatch_async(self.queue, ^&#123;</span><br><span class="line">            &#x2F;&#x2F; nameStr是NSCFString</span><br><span class="line">            self.nameStr &#x3D; [NSString stringWithFormat:@&quot;aa-加油&quot;];</span><br><span class="line">            NSLog(@&quot;%@&quot;,self.nameStr);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的代码啊，发现在<code>taggedPointerDemo</code>方法中没有问题，但是点击屏幕，执行了touchesBegan就发生了崩溃。虽然在多线程时有过类似的例子，是由于多次释放造成的。但是这里的根本原因是<code>nameStr</code>在底层的类型不一致导致的，分别在两个赋值的方法处打上断点，看看是什么类型。</p><ul><li>taggedPointerDemo方法中的nameStr类型是 NSTaggedPointerString，存储在常量区。因为nameStr在alloc分配时在堆区，由于较小，所以经过xcode中iOS的优化，成了NSTaggedPointerString类型，存储在常量区。</li><li>touchesBegan方法中的nameStr类型是 NSCFString类型，存储在堆上</li></ul><h2 id="NSString的类型"><a href="#NSString的类型" class="headerlink" title="NSString的类型"></a>NSString的类型</h2><ol><li>NSCFConstantString：字符串常量，是一种编译时常量，retainCount值很大，对其操作，不会引起引用计数变化，存储在字符串常量区。</li><li>NSCFString：是在运行时创建的NSString子类，创建后引用计数会加1，存储在堆上。</li><li>NSTaggedPointerString：标签指针，是苹果在64位环境下对NSString、NSNumber等对象做的优化。对于NSString对象来说，当字符串是由数字、英文字母组合且长度小于等于9时，会自动成为NSTaggedPointerString类型，存储在常量区。</li><li>当有中文或者其他特殊符号时，会直接成为__NSCFString类型，存储在堆区。</li></ol><h2 id="Tagged-Pointer小对象"><a href="#Tagged-Pointer小对象" class="headerlink" title="Tagged Pointer小对象"></a>Tagged Pointer小对象</h2><p>接下来看一下tagged pointer对象的引用计数相关逻辑。直接上源码：</p><p><code>void objc_setProperty</code> -&gt; <code>reallySetProperty</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">static inline void reallySetProperty(id self, SEL _cmd, id newValue, ptrdiff_t offset, bool atomic, bool copy, bool mutableCopy)</span><br><span class="line">&#123;</span><br><span class="line">    if (offset &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        object_setClass(self, newValue);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    id oldValue;</span><br><span class="line">    id *slot &#x3D; (id*) ((char*)self + offset);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; copy和mutableCopy处理</span><br><span class="line">    if (copy) &#123;</span><br><span class="line">        newValue &#x3D; [newValue copyWithZone:nil];</span><br><span class="line">    &#125; else if (mutableCopy) &#123;</span><br><span class="line">        newValue &#x3D; [newValue mutableCopyWithZone:nil];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (*slot &#x3D;&#x3D; newValue) return;</span><br><span class="line">        &#x2F;&#x2F; retain操作</span><br><span class="line">        newValue &#x3D; objc_retain(newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!atomic) &#123;</span><br><span class="line">        oldValue &#x3D; *slot;</span><br><span class="line">        *slot &#x3D; newValue;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        spinlock_t&amp; slotlock &#x3D; PropertyLocks[slot];</span><br><span class="line">        slotlock.lock();</span><br><span class="line">        oldValue &#x3D; *slot;</span><br><span class="line">        *slot &#x3D; newValue;        </span><br><span class="line">        slotlock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; release操作</span><br><span class="line">    objc_release(oldValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们看看retain和release内部做了什么</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">__attribute__((aligned(16), flatten, noinline))</span><br><span class="line">id </span><br><span class="line">objc_retain(id obj)</span><br><span class="line">&#123;</span><br><span class="line">    if (!obj) return obj;</span><br><span class="line">    &#x2F;&#x2F;判断是否是小对象，如果是，则直接返回对象</span><br><span class="line">    if (obj-&gt;isTaggedPointer()) return obj;</span><br><span class="line">    &#x2F;&#x2F;如果不是小对象，则retain</span><br><span class="line">    return obj-&gt;retain();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;****************objc_release****************</span><br><span class="line">__attribute__((aligned(16), flatten, noinline))</span><br><span class="line">void </span><br><span class="line">objc_release(id obj)</span><br><span class="line">&#123;</span><br><span class="line">    if (!obj) return;</span><br><span class="line">    &#x2F;&#x2F;如果是小对象，则直接返回</span><br><span class="line">    if (obj-&gt;isTaggedPointer()) return;</span><br><span class="line">    &#x2F;&#x2F;如果不是小对象，则release</span><br><span class="line">    return obj-&gt;release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是Tagged Pointer小对象，不会对引用计数做处理。</p><h3 id="小对象地址分析"><a href="#小对象地址分析" class="headerlink" title="小对象地址分析"></a>小对象地址分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSString *str1 &#x3D; [NSString stringWithFormat:@&quot;a&quot;];</span><br><span class="line">NSString *str2 &#x3D; [NSString stringWithFormat:@&quot;啊&quot;];</span><br><span class="line">NSLog(@&quot;%p-%@&quot;,str1,str1);</span><br><span class="line">NSLog(@&quot;%p-%@&quot;,str2,str2);</span><br></pre></td></tr></table></figure><p>看一下输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0xd3c9816ac08c01c6-a</span><br><span class="line">0x6000033631e0-啊</span><br></pre></td></tr></table></figure><p>在类的加载时，其中的_read_images源码有一个方法对小对象进行了处理，即initializeTaggedPointerObfuscator方法。</p><p>查看一下源码：<code>_read_images</code> -&gt; <code>initializeTaggedPointerObfuscator</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">static void</span><br><span class="line">initializeTaggedPointerObfuscator(void)</span><br><span class="line">&#123;</span><br><span class="line">    if (sdkIsOlderThan(10_14, 12_0, 12_0, 5_0, 3_0) ||</span><br><span class="line">        &#x2F;&#x2F; Set the obfuscator to zero for apps linked against older SDKs,</span><br><span class="line">        &#x2F;&#x2F; in case they&#39;re relying on the tagged pointer representation.</span><br><span class="line">        DisableTaggedPointerObfuscation) &#123;</span><br><span class="line">        objc_debug_taggedpointer_obfuscator &#x3D; 0;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; Pull random data into the variable, then shift away all non-payload bits.</span><br><span class="line">        arc4random_buf(&amp;objc_debug_taggedpointer_obfuscator,</span><br><span class="line">                       sizeof(objc_debug_taggedpointer_obfuscator));</span><br><span class="line">        &#x2F;&#x2F; _OBJC_TAG_MASK 进行混淆</span><br><span class="line">        objc_debug_taggedpointer_obfuscator &amp;&#x3D; ~_OBJC_TAG_MASK;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全局搜索<code>objc_debug_taggedpointer_obfuscator</code>，找到了encode和decode方法。分别是对tagged pointer的编码和解码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">static inline void * _Nonnull</span><br><span class="line">_objc_encodeTaggedPointer(uintptr_t ptr)</span><br><span class="line">&#123;</span><br><span class="line">    return (void *)(objc_debug_taggedpointer_obfuscator ^ ptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static inline uintptr_t</span><br><span class="line">_objc_decodeTaggedPointer(const void * _Nullable ptr)</span><br><span class="line">&#123;</span><br><span class="line">    return (uintptr_t)ptr ^ objc_debug_taggedpointer_obfuscator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>encode时进行了一次<code>^</code>操作，decode时也进行了一次<code>^</code>操作。可以对值进行还原。</p><p>那我们分别打印一下decode后的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NSString *str1 &#x3D; [NSString stringWithFormat:@&quot;a&quot;];</span><br><span class="line">NSLog(@&quot;%p-%@&quot;,str1,str1);</span><br><span class="line">NSLog(@&quot;0x%lx&quot;,_objc_decodeTaggedPointer_(str1));</span><br><span class="line"></span><br><span class="line">NSNumber *number1 &#x3D; @1;</span><br><span class="line">NSLog(@&quot;%@-%p-%@&quot;,object_getClass(number1),number1,number1);</span><br><span class="line">NSLog(@&quot;0x%lx&quot;,_objc_decodeTaggedPointer_(number3));</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0xe4742f5bd16235e6-a</span><br><span class="line">0xa000000000000611</span><br><span class="line"></span><br><span class="line">__NSCFNumber-0xf4742f5bd16233e5-1</span><br><span class="line">0xb000000000000012</span><br></pre></td></tr></table></figure><p>在源码中有一个判断条件，是否为TaggedPointer：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static inline bool </span><br><span class="line">_objc_isTaggedPointer(const void * _Nullable ptr)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;等价于 ptr &amp; 1左移63，即2^63，相当于除了64位，其他位都为0，即只是保留了最高位的值</span><br><span class="line">    return ((uintptr_t)ptr &amp; _OBJC_TAG_MASK) &#x3D;&#x3D; _OBJC_TAG_MASK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以0xa、0xb主要是用于判断是否是小对象taggedpointer，即判断条件，判断第64位上是否为1（taggedpointer指针地址即表示指针地址，也表示值）</p><p>0xa 转换成二进制为 1 010（64为为1，63~61后三位表示 tagType类型 - 2），表示NSString类型</p><p>0xb 转换为二进制为 1 011（64为为1，63~61后三位表示 tagType类型 - 3），表示NSNumber类型，这里需要注意一点，如果NSNumber的值是-1，其地址中的值是用补码表示的</p><p>这里可以通过_objc_makeTaggedPointer方法的参数tag类型objc_tag_index_t进入其枚举，其中 2表示NSString，3表示NSNumber</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#if __has_feature(objc_fixed_enum)  ||  __cplusplus &gt;&#x3D; 201103L</span><br><span class="line">enum objc_tag_index_t : uint16_t</span><br><span class="line">#else</span><br><span class="line">typedef uint16_t objc_tag_index_t;</span><br><span class="line">enum</span><br><span class="line">#endif</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 60-bit payloads</span><br><span class="line">    OBJC_TAG_NSAtom            &#x3D; 0, </span><br><span class="line">    OBJC_TAG_1                 &#x3D; 1, </span><br><span class="line">    OBJC_TAG_NSString          &#x3D; 2,     &#x2F;&#x2F; NSString</span><br><span class="line">    OBJC_TAG_NSNumber          &#x3D; 3,     &#x2F;&#x2F; NSNumber</span><br><span class="line">    OBJC_TAG_NSIndexPath       &#x3D; 4, </span><br><span class="line">    OBJC_TAG_NSManagedObjectID &#x3D; 5, </span><br><span class="line">    OBJC_TAG_NSDate            &#x3D; 6,</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 60-bit reserved</span><br><span class="line">    OBJC_TAG_RESERVED_7        &#x3D; 7, </span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 52-bit payloads</span><br><span class="line">    OBJC_TAG_Photos_1          &#x3D; 8,</span><br><span class="line">    OBJC_TAG_Photos_2          &#x3D; 9,</span><br><span class="line">    OBJC_TAG_Photos_3          &#x3D; 10,</span><br><span class="line">    OBJC_TAG_Photos_4          &#x3D; 11,</span><br><span class="line">    OBJC_TAG_XPC_1             &#x3D; 12,</span><br><span class="line">    OBJC_TAG_XPC_2             &#x3D; 13,</span><br><span class="line">    OBJC_TAG_XPC_3             &#x3D; 14,</span><br><span class="line">    OBJC_TAG_XPC_4             &#x3D; 15,</span><br><span class="line">    OBJC_TAG_NSColor           &#x3D; 16,</span><br><span class="line">    OBJC_TAG_UIColor           &#x3D; 17,</span><br><span class="line">    OBJC_TAG_CGColor           &#x3D; 18,</span><br><span class="line">    OBJC_TAG_NSIndexSet        &#x3D; 19,</span><br><span class="line"></span><br><span class="line">    OBJC_TAG_First60BitPayload &#x3D; 0, </span><br><span class="line">    OBJC_TAG_Last60BitPayload  &#x3D; 6, </span><br><span class="line">    OBJC_TAG_First52BitPayload &#x3D; 8, </span><br><span class="line">    OBJC_TAG_Last52BitPayload  &#x3D; 263, </span><br><span class="line"></span><br><span class="line">    OBJC_TAG_RESERVED_264      &#x3D; 264</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>跟我们上面得到的结果是一样的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Tagged Pointer小对象类型（用于存储NSNumber、NSDate、小NSString），小对象指针不再是简单的地址，而是地址 + 值，即真正的值，它只是一个披着对象皮的普通变量而以。所以可以直接进行读取。优点是占用空间小，节省内存</li><li>Tagged Pointer小对象 不会进入retain 和 release，意味着不需要ARC进行管理，所以可以直接被系统自主的释放和回收。</li><li>Tagged Pointer的内存并不存储在堆中，而是在常量区中，也不需要malloc和free。</li><li>对于NSString类型，建议直接使用<code>@&quot;&quot;</code>初始化赋值。</li></ul><h1 id="SideTables-散列表"><a href="#SideTables-散列表" class="headerlink" title="SideTables 散列表"></a>SideTables 散列表</h1><p>SideTables是一个hash表。在weak修饰时会存放在SideTables这个表中。</p><p>对于OC正常的对象来说当执行retain操作时，当引用计数达到一定的值（256）时，则会存放在SideTables中。</p><p>我们接下来看一下retain 的流程</p><h2 id="retain流程"><a href="#retain流程" class="headerlink" title="retain流程"></a>retain流程</h2><p>看一些源码：进入<code>objc_retain</code> -&gt; <code>retain</code> -&gt; <code>rootRetain</code>查看源码实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">LWAYS_INLINE id </span><br><span class="line">objc_object::rootRetain(bool tryRetain, bool handleOverflow)</span><br><span class="line">&#123;</span><br><span class="line">    if (isTaggedPointer()) return (id)this;</span><br><span class="line"></span><br><span class="line">    bool sideTableLocked &#x3D; false;</span><br><span class="line">    bool transcribeToSideTable &#x3D; false;</span><br><span class="line">    &#x2F;&#x2F;为什么有isa？因为需要对引用计数+1，即retain+1，而引用计数存储在isa的bits中，需要进行新旧isa的替换</span><br><span class="line">    isa_t oldisa;</span><br><span class="line">    isa_t newisa;</span><br><span class="line">    &#x2F;&#x2F;重点</span><br><span class="line">    do &#123;</span><br><span class="line">        transcribeToSideTable &#x3D; false;</span><br><span class="line">        oldisa &#x3D; LoadExclusive(&amp;isa.bits);</span><br><span class="line">        newisa &#x3D; oldisa;</span><br><span class="line">        &#x2F;&#x2F;判断是否为nonpointer isa</span><br><span class="line">        if (slowpath(!newisa.nonpointer)) &#123;</span><br><span class="line">            &#x2F;&#x2F;如果不是 nonpointer isa，直接操作散列表sidetable</span><br><span class="line">            ClearExclusive(&amp;isa.bits);</span><br><span class="line">            if (rawISA()-&gt;isMetaClass()) return (id)this;</span><br><span class="line">            if (!tryRetain &amp;&amp; sideTableLocked) sidetable_unlock();</span><br><span class="line">            if (tryRetain) return sidetable_tryRetain() ? (id)this : nil;</span><br><span class="line">            else return sidetable_retain();</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; don&#39;t check newisa.fast_rr; we already called any RR overrides</span><br><span class="line">        &#x2F;&#x2F;dealloc源码</span><br><span class="line">        if (slowpath(tryRetain &amp;&amp; newisa.deallocating)) &#123;</span><br><span class="line">            ClearExclusive(&amp;isa.bits);</span><br><span class="line">            if (!tryRetain &amp;&amp; sideTableLocked) sidetable_unlock();</span><br><span class="line">            return nil;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        uintptr_t carry;</span><br><span class="line">        &#x2F;&#x2F;执行引用计数+1操作，即对bits中的 1ULL&lt;&lt;45（arm64） 即extra_rc，用于该对象存储引用计数值</span><br><span class="line">        newisa.bits &#x3D; addc(newisa.bits, RC_ONE, 0, &amp;carry);  &#x2F;&#x2F; extra_rc++</span><br><span class="line">        &#x2F;&#x2F;判断extra_rc是否满了，carry是标识符</span><br><span class="line">        if (slowpath(carry)) &#123;</span><br><span class="line">            &#x2F;&#x2F; newisa.extra_rc++ overflowed</span><br><span class="line">            if (!handleOverflow) &#123;</span><br><span class="line">                ClearExclusive(&amp;isa.bits);</span><br><span class="line">                return rootRetain_overflow(tryRetain);</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; Leave half of the retain counts inline and </span><br><span class="line">            &#x2F;&#x2F; prepare to copy the other half to the side table.</span><br><span class="line">            if (!tryRetain &amp;&amp; !sideTableLocked) sidetable_lock();</span><br><span class="line">            sideTableLocked &#x3D; true;</span><br><span class="line">            transcribeToSideTable &#x3D; true;</span><br><span class="line">            &#x2F;&#x2F;如果extra_rc满了，则直接将满状态的一半拿出来存到extra_rc</span><br><span class="line">            newisa.extra_rc &#x3D; RC_HALF;</span><br><span class="line">            &#x2F;&#x2F;给一个标识符为YES，表示需要存储到散列表</span><br><span class="line">            newisa.has_sidetable_rc &#x3D; true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; while (slowpath(!StoreExclusive(&amp;isa.bits, oldisa.bits, newisa.bits)));</span><br><span class="line"></span><br><span class="line">    if (slowpath(transcribeToSideTable)) &#123;</span><br><span class="line">        &#x2F;&#x2F; Copy the other half of the retain counts to the side table.</span><br><span class="line">        &#x2F;&#x2F;将另一半存在散列表的rc_half中，即满状态下是8位，一半就是1左移7位，即除以2</span><br><span class="line">        &#x2F;&#x2F;这么操作的目的在于提高性能，因为如果都存在散列表中，当需要release-1时，需要去访问散列表，每次都需要开解锁，比较消耗性能。extra_rc存储一半的话，可以直接操作extra_rc即可，不需要操作散列表。性能会提高很多</span><br><span class="line">        sidetable_addExtraRC_nolock(RC_HALF);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (slowpath(!tryRetain &amp;&amp; sideTableLocked)) sidetable_unlock();</span><br><span class="line">    return (id)this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程分析：</p><ol><li>isTaggedPointer直接返回。</li><li>不是nonpointer，直接存sideTable</li><li>是否正在释放，deallocating，返回nil</li><li>引用计数+1。</li><li>判断引用计数是否存满了，满了则变成一半，另一半存放在散列表中。</li></ol><p>之所以不直接把引用计数存放在散列表中，是因为对表的操作，需要用到锁，这是耗时操作。<br>如果每一个对象都需要一个散列表，也会造成性能问题。如果所有对象公用一个散列表，则其他数据可能不安全，所以也不会公用一个表。真机上最多有8个表。</p><h2 id="release流程"><a href="#release流程" class="headerlink" title="release流程"></a>release流程</h2><p>release流程与retain相反。</p><p><code>setProperty</code> -&gt; <code>reallySetProperty</code> -&gt; <code>objc_release</code> -&gt; <code>release</code> -&gt; <code>rootRelease</code> -&gt; <code>rootRelease</code>查看源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">ALWAYS_INLINE bool </span><br><span class="line">objc_object::rootRelease(bool performDealloc, bool handleUnderflow)</span><br><span class="line">&#123;</span><br><span class="line">    if (isTaggedPointer()) return false;</span><br><span class="line"></span><br><span class="line">    bool sideTableLocked &#x3D; false;</span><br><span class="line"></span><br><span class="line">    isa_t oldisa;</span><br><span class="line">    isa_t newisa;</span><br><span class="line"></span><br><span class="line"> retry:</span><br><span class="line">    do &#123;</span><br><span class="line">        oldisa &#x3D; LoadExclusive(&amp;isa.bits);</span><br><span class="line">        newisa &#x3D; oldisa;</span><br><span class="line">        &#x2F;&#x2F;判断是否是Nonpointer isa</span><br><span class="line">        if (slowpath(!newisa.nonpointer)) &#123;</span><br><span class="line">            &#x2F;&#x2F;如果不是，则直接操作散列表-1</span><br><span class="line">            ClearExclusive(&amp;isa.bits);</span><br><span class="line">            if (rawISA()-&gt;isMetaClass()) return false;</span><br><span class="line">            if (sideTableLocked) sidetable_unlock();</span><br><span class="line">            return sidetable_release(performDealloc);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; don&#39;t check newisa.fast_rr; we already called any RR overrides</span><br><span class="line">        uintptr_t carry;</span><br><span class="line">        &#x2F;&#x2F;进行引用计数-1操作，即extra_rc-1</span><br><span class="line">        newisa.bits &#x3D; subc(newisa.bits, RC_ONE, 0, &amp;carry);  &#x2F;&#x2F; extra_rc--</span><br><span class="line">        &#x2F;&#x2F;如果此时extra_rc的值为0了，则走到underflow</span><br><span class="line">        if (slowpath(carry)) &#123;</span><br><span class="line">            &#x2F;&#x2F; don&#39;t ClearExclusive()</span><br><span class="line">            goto underflow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; while (slowpath(!StoreReleaseExclusive(&amp;isa.bits, </span><br><span class="line">                                             oldisa.bits, newisa.bits)));</span><br><span class="line"></span><br><span class="line">    if (slowpath(sideTableLocked)) sidetable_unlock();</span><br><span class="line">    return false;</span><br><span class="line"></span><br><span class="line"> underflow:</span><br><span class="line">    &#x2F;&#x2F; newisa.extra_rc-- underflowed: borrow from side table or deallocate</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; abandon newisa to undo the decrement</span><br><span class="line">    newisa &#x3D; oldisa;</span><br><span class="line">    &#x2F;&#x2F;判断散列表中是否存储了一半的引用计数</span><br><span class="line">    if (slowpath(newisa.has_sidetable_rc)) &#123;</span><br><span class="line">        if (!handleUnderflow) &#123;</span><br><span class="line">            ClearExclusive(&amp;isa.bits);</span><br><span class="line">            return rootRelease_underflow(performDealloc);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Transfer retain count from side table to inline storage.</span><br><span class="line"></span><br><span class="line">        if (!sideTableLocked) &#123;</span><br><span class="line">            ClearExclusive(&amp;isa.bits);</span><br><span class="line">            sidetable_lock();</span><br><span class="line">            sideTableLocked &#x3D; true;</span><br><span class="line">            &#x2F;&#x2F; Need to start over to avoid a race against </span><br><span class="line">            &#x2F;&#x2F; the nonpointer -&gt; raw pointer transition.</span><br><span class="line">            goto retry;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Try to remove some retain counts from the side table.</span><br><span class="line">        &#x2F;&#x2F;从散列表中取出存储的一半引用计数</span><br><span class="line">        size_t borrowed &#x3D; sidetable_subExtraRC_nolock(RC_HALF);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; To avoid races, has_sidetable_rc must remain set </span><br><span class="line">        &#x2F;&#x2F; even if the side table count is now zero.</span><br><span class="line"></span><br><span class="line">        if (borrowed &gt; 0) &#123;</span><br><span class="line">            &#x2F;&#x2F; Side table retain count decreased.</span><br><span class="line">            &#x2F;&#x2F; Try to add them to the inline count.</span><br><span class="line">            &#x2F;&#x2F;进行-1操作，然后存储到extra_rc中</span><br><span class="line">            newisa.extra_rc &#x3D; borrowed - 1;  &#x2F;&#x2F; redo the original decrement too</span><br><span class="line">            bool stored &#x3D; StoreReleaseExclusive(&amp;isa.bits, </span><br><span class="line">                                                oldisa.bits, newisa.bits);</span><br><span class="line">            if (!stored) &#123;</span><br><span class="line">                &#x2F;&#x2F; Inline update failed. </span><br><span class="line">                &#x2F;&#x2F; Try it again right now. This prevents livelock on LL&#x2F;SC </span><br><span class="line">                &#x2F;&#x2F; architectures where the side table access itself may have </span><br><span class="line">                &#x2F;&#x2F; dropped the reservation.</span><br><span class="line">                isa_t oldisa2 &#x3D; LoadExclusive(&amp;isa.bits);</span><br><span class="line">                isa_t newisa2 &#x3D; oldisa2;</span><br><span class="line">                if (newisa2.nonpointer) &#123;</span><br><span class="line">                    uintptr_t overflow;</span><br><span class="line">                    newisa2.bits &#x3D; </span><br><span class="line">                        addc(newisa2.bits, RC_ONE * (borrowed-1), 0, &amp;overflow);</span><br><span class="line">                    if (!overflow) &#123;</span><br><span class="line">                        stored &#x3D; StoreReleaseExclusive(&amp;isa.bits, oldisa2.bits, </span><br><span class="line">                                                       newisa2.bits);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (!stored) &#123;</span><br><span class="line">                &#x2F;&#x2F; Inline update failed.</span><br><span class="line">                &#x2F;&#x2F; Put the retains back in the side table.</span><br><span class="line">                sidetable_addExtraRC_nolock(borrowed);</span><br><span class="line">                goto retry;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Decrement successful after borrowing from side table.</span><br><span class="line">            &#x2F;&#x2F; This decrement cannot be the deallocating decrement - the side </span><br><span class="line">            &#x2F;&#x2F; table lock and has_sidetable_rc bit ensure that if everyone </span><br><span class="line">            &#x2F;&#x2F; else tried to -release while we worked, the last one would block.</span><br><span class="line">            sidetable_unlock();</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            &#x2F;&#x2F; Side table is empty after all. Fall-through to the dealloc path.</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;此时extra_rc中值为0，散列表中也是空的，则直接进行析构，即自动触发dealloc流程</span><br><span class="line">    &#x2F;&#x2F; Really deallocate.</span><br><span class="line">    &#x2F;&#x2F;触发dealloc的时机</span><br><span class="line">    if (slowpath(newisa.deallocating)) &#123;</span><br><span class="line">        ClearExclusive(&amp;isa.bits);</span><br><span class="line">        if (sideTableLocked) sidetable_unlock();</span><br><span class="line">        return overrelease_error();</span><br><span class="line">        &#x2F;&#x2F; does not actually return</span><br><span class="line">    &#125;</span><br><span class="line">    newisa.deallocating &#x3D; true;</span><br><span class="line">    if (!StoreExclusive(&amp;isa.bits, oldisa.bits, newisa.bits)) goto retry;</span><br><span class="line"></span><br><span class="line">    if (slowpath(sideTableLocked)) sidetable_unlock();</span><br><span class="line"></span><br><span class="line">    __c11_atomic_thread_fence(__ATOMIC_ACQUIRE);</span><br><span class="line"></span><br><span class="line">    if (performDealloc) &#123;</span><br><span class="line">        &#x2F;&#x2F;发送一个dealloc消息</span><br><span class="line">        ((void(*)(objc_object *, SEL))objc_msgSend)(this, @selector(dealloc));</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程分析如下：</p><ol><li><p>判断是否是Nonpointer isa，如果不是，则直接对散列表进行-1操作</p></li><li><p>如果是Nonpointer isa，则对extra_rc中的引用计数值进行-1操作，并存储此时的extra_rc状态到carry中</p></li><li><p>如果此时的状态carray为0，则走到underflow流程</p><p> underflow流程有以下几步：</p><ol><li>判断散列表中是否存储了一半的引用计数，如果是，则从散列表中取出存储的一半引用计数，进行-1操作，然后存储到extra_rc中</li><li>如果此时extra_rc没有值，散列表中也是空的，则直接进行析构，即dealloc操作，属于自动触发</li></ol></li></ol><h2 id="dealloc分析"><a href="#dealloc分析" class="headerlink" title="dealloc分析"></a>dealloc分析</h2><p>dealloc是在retainCount为0时系统自动触发的。</p><p><code>dealloc</code> -&gt; <code>_objc_rootDealloc</code> -&gt; <code>rootDealloc</code>查看源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">inline void</span><br><span class="line">objc_object::rootDealloc()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;对象要释放，需要做哪些事情？</span><br><span class="line">    &#x2F;&#x2F;1、isa - cxx - 关联对象 - 弱引用表 - 引用计数表</span><br><span class="line">    &#x2F;&#x2F;2、free</span><br><span class="line">    if (isTaggedPointer()) return;  &#x2F;&#x2F; fixme necessary?</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;如果没有这些，则直接free</span><br><span class="line">    if (fastpath(isa.nonpointer  &amp;&amp;  </span><br><span class="line">                 !isa.weakly_referenced  &amp;&amp;  </span><br><span class="line">                 !isa.has_assoc  &amp;&amp;  </span><br><span class="line">                 !isa.has_cxx_dtor  &amp;&amp;  </span><br><span class="line">                 !isa.has_sidetable_rc))</span><br><span class="line">    &#123;</span><br><span class="line">        assert(!sidetable_present());</span><br><span class="line">        free(this);</span><br><span class="line">    &#125; </span><br><span class="line">    else &#123;</span><br><span class="line">        &#x2F;&#x2F;如果有</span><br><span class="line">        object_dispose((id)this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>根据条件判断是否有isa、cxx、关联对象、弱引用表、引用计数表，如果没有，则直接free释放内存</li><li>如果有，则进入object_dispose方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">id </span><br><span class="line">object_dispose(id obj)</span><br><span class="line">&#123;</span><br><span class="line">    if (!obj) return nil;</span><br><span class="line">    &#x2F;&#x2F; 销毁实例而不会释放内存</span><br><span class="line">    objc_destructInstance(obj);</span><br><span class="line">    &#x2F;&#x2F;释放内存</span><br><span class="line">    free(obj);</span><br><span class="line"></span><br><span class="line">    return nil;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>objc_destructInstance</code>为了消耗实例对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void *objc_destructInstance(id obj) </span><br><span class="line">&#123;</span><br><span class="line">    if (obj) &#123;</span><br><span class="line">        &#x2F;&#x2F; Read all of the flags at once for performance.</span><br><span class="line">        bool cxx &#x3D; obj-&gt;hasCxxDtor();</span><br><span class="line">        bool assoc &#x3D; obj-&gt;hasAssociatedObjects();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; This order is important.</span><br><span class="line">        &#x2F;&#x2F;调用C ++析构函数</span><br><span class="line">        if (cxx) object_cxxDestruct(obj);</span><br><span class="line">        &#x2F;&#x2F;删除关联引用</span><br><span class="line">        if (assoc) _object_remove_assocations(obj);</span><br><span class="line">        &#x2F;&#x2F;释放</span><br><span class="line">        obj-&gt;clearDeallocating();</span><br><span class="line">    &#125;</span><br><span class="line">    return obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在内部判断是否有析构函数，如果有则调用。</li><li>是否有关联对象，有的花移除关联对象。</li><li>执行clearDeallocating</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">inline void </span><br><span class="line">objc_object::clearDeallocating()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;判断是否为nonpointer isa</span><br><span class="line">    if (slowpath(!isa.nonpointer)) &#123;</span><br><span class="line">        &#x2F;&#x2F; Slow path for raw pointer isa.</span><br><span class="line">        &#x2F;&#x2F;如果不是，则直接释放散列表</span><br><span class="line">        sidetable_clearDeallocating();</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;如果是，清空弱引用表 + 散列表</span><br><span class="line">    else if (slowpath(isa.weakly_referenced  ||  isa.has_sidetable_rc)) &#123;</span><br><span class="line">        &#x2F;&#x2F; Slow path for non-pointer isa with weak refs and&#x2F;or side table data.</span><br><span class="line">        clearDeallocating_slow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    assert(!sidetable_present());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>clearDeallocating</code>的目的主要是为了清空散列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">NEVER_INLINE void</span><br><span class="line">objc_object::clearDeallocating_slow()</span><br><span class="line">&#123;</span><br><span class="line">    ASSERT(isa.nonpointer  &amp;&amp;  (isa.weakly_referenced || isa.has_sidetable_rc));</span><br><span class="line"></span><br><span class="line">    SideTable&amp; table &#x3D; SideTables()[this];</span><br><span class="line">    table.lock();</span><br><span class="line">    if (isa.weakly_referenced) &#123;</span><br><span class="line">        &#x2F;&#x2F;清空弱引用表</span><br><span class="line">        weak_clear_no_lock(&amp;table.weak_table, (id)this);</span><br><span class="line">    &#125;</span><br><span class="line">    if (isa.has_sidetable_rc) &#123;</span><br><span class="line">        &#x2F;&#x2F;清空引用计数</span><br><span class="line">        table.refcnts.erase(this);</span><br><span class="line">    &#125;</span><br><span class="line">    table.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>清空引用计数，情况弱引用表。</p><p>以上就是dealloc 的流程。</p><h2 id="retainCount"><a href="#retainCount" class="headerlink" title="retainCount"></a>retainCount</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSObject *objc &#x3D; [NSObject alloc];</span><br><span class="line">NSLog(@&quot;%ld&quot;,CFGetRetainCount((__bridge CFTypeRef)objc));</span><br></pre></td></tr></table></figure><p>上面输出的引用计数是多少？这是一个经典的面试题。</p><p>这里输出的结果是1。但是1是不对的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">- (NSUInteger)retainCount &#123;</span><br><span class="line">    return _objc_rootRetainCount(self);</span><br><span class="line">&#125;</span><br><span class="line">👇</span><br><span class="line">uintptr_t</span><br><span class="line">_objc_rootRetainCount(id obj)</span><br><span class="line">&#123;</span><br><span class="line">    ASSERT(obj);</span><br><span class="line"></span><br><span class="line">    return obj-&gt;rootRetainCount();</span><br><span class="line">&#125;</span><br><span class="line">👇</span><br><span class="line">inline uintptr_t </span><br><span class="line">objc_object::rootRetainCount()</span><br><span class="line">&#123;</span><br><span class="line">    if (isTaggedPointer()) return (uintptr_t)this;</span><br><span class="line"></span><br><span class="line">    sidetable_lock();</span><br><span class="line">    isa_t bits &#x3D; LoadExclusive(&amp;isa.bits);</span><br><span class="line">    ClearExclusive(&amp;isa.bits);</span><br><span class="line">    &#x2F;&#x2F;如果是nonpointer isa，才有引用计数的下层处理</span><br><span class="line">    if (bits.nonpointer) &#123;</span><br><span class="line">        &#x2F;&#x2F;alloc创建的对象引用计数为0，包括sideTable,所以对于alloc来说，是 0+1&#x3D;1，这也是为什么通过retaincount获取的引用计数为1的原因</span><br><span class="line">        uintptr_t rc &#x3D; 1 + bits.extra_rc;</span><br><span class="line">        if (bits.has_sidetable_rc) &#123;</span><br><span class="line">            rc +&#x3D; sidetable_getExtraRC_nolock();</span><br><span class="line">        &#125;</span><br><span class="line">        sidetable_unlock();</span><br><span class="line">        return rc;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;如果不是，则正常返回</span><br><span class="line">    sidetable_unlock();</span><br><span class="line">    return sidetable_retainCount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当对象创建时，并没有存引用计数，bits.extra_rc还是0，当调用了retainCount时执行了<code>1 + bits.extra_rc</code>，所以就变成了1 。如果reatinCount=0，相当于创建成功之后就会被释放掉。</p><p>所以这里的答案应该是0。不管我有没有执行init操作，都是0 。在读的时候才会是1。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内存管理方案&quot;&gt;&lt;a href=&quot;#内存管理方案&quot; class=&quot;headerlink&quot; title=&quot;内存管理方案&quot;&gt;&lt;/a&gt;内存管理方案&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;ARC/MRC&lt;/li&gt;
&lt;li&gt;TarggedPointer: 专门用来处理小对象，比如NSN
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>启动优化</title>
    <link href="http://liujiaboy.github.io/2021/05/27/OC%E5%8E%9F%E7%90%86/%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/"/>
    <id>http://liujiaboy.github.io/2021/05/27/OC%E5%8E%9F%E7%90%86/%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/</id>
    <published>2021-05-27T13:35:54.000Z</published>
    <updated>2021-05-31T02:29:59.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="虚拟内存-amp-物理内存"><a href="#虚拟内存-amp-物理内存" class="headerlink" title="虚拟内存 &amp; 物理内存"></a>虚拟内存 &amp; 物理内存</h2><p>我们在进程和物理内存之间增加一个中间层，这个中间层就是所谓的虚拟内存，主要用于解决当多个进程同时存在时，对物理内存的管理。提高了CPU的利用率，使多个进程可以同时、按需加载。</p><p>所以虚拟内存其本质就是一张虚拟地址和物理地址对应关系的映射表。</p><ul><li>每个进程都有一个独立的虚拟内存，从0开始，大小是4G固定的，每个虚拟内存又会划分为一个一个的页（page的大小在iOS中是16K，其他的是4K），每次加载都是以页为单位加载的，进程间是无法互相访问的，保证了进程间数据的安全性。</li><li>一个进程中，只有部分功能是活跃的，所以只需要将进程中活跃的页放入物理内存，避免物理内存的浪费。</li><li>当CPU需要访问数据时，首先是访问虚拟内存，然后通过虚拟内存去寻找真正的物理内存，然后对相应的物理地址进行访问</li><li>如果在访问时，虚拟地址的内容未加载到物理内存，会发生缺页异常（pagefault），此时需要先将数据载入到物理内存（这个过程是很快的），然后再读取。这样就避免了内存浪费</li></ul><p><img src="ram_map.jpg" alt=""></p><h2 id="ASLR"><a href="#ASLR" class="headerlink" title="ASLR"></a>ASLR</h2><p>虚拟内存的起始地址与大小都是固定的，这意味着，当我们访问时，其数据的地址也是固定的，这会导致我们的数据非常容易被破解，为了解决这个问题，所以苹果为了解决这个问题，在iOS4.3开始引入了ASLR技术。</p><p>ASLR的概念：(Address Space Layout Randomization ) 地址空间配置随机加载，是一种针对缓冲区溢出的安全保护技术，通过对堆、栈、共享库映射等线性区布局的随机化，通过增加攻击者预测目的地址的难度，防止攻击者直接定位攻击代码位置，达到阻止溢出攻击的目的的一种技术。</p><p>其目的的通过利用随机方式配置数据地址空间，使某些敏感数据（例如APP登录注册、支付相关代码）配置到一个恶意程序无法事先获知的地址，令攻击者难以进行攻击。</p><p>由于ASLR的存在，导致可执行文件和动态链接库在虚拟内存中的加载地址每次启动都不固定，所以需要在编译时来修复镜像中的资源指针，来指向正确的地址。即<code>正确的内存地址 = ASLR地址 + 偏移值</code></p><h2 id="可执行文件"><a href="#可执行文件" class="headerlink" title="可执行文件"></a>可执行文件</h2><p>通用二进制文件是苹果公司提出的一种新的二进制文件的存储结构，可以同时存储多种架构的二进制指令，使CPU在读取该二进制文件时可以自动检测并选用合适的架构，以最理想的方式进行读取。</p><p>由于通用二进制文件会同时存储多种架构，所以比单一架构的二进制文件大很多，会占用大量的磁盘空间，但由于系统会自动选择最合适的，不相关的架构代码不会占用内存空间，且执行效率高了。</p><p>Mach-O文件是Mach Object文件格式的缩写，它是用于可执行文件、动态库、目标代码的文件格式。作为a.out格式的替代，Mach-O格式提供了更强的扩展性，以及更快的符号表信息访问速度。经常使用<code>MachOView</code>工具来查看Mach-O文件。</p><h3 id="Mach-O的组成"><a href="#Mach-O的组成" class="headerlink" title="Mach-O的组成"></a>Mach-O的组成</h3><ul><li>Header：主要是Mach-O的cpu架构，文件类型以及加载命令等信息</li><li>Load Commands：描述了文件中数据的具体组织结构，不同的数据类型使用不同的加载命令表示。（通常为framework、dylib的加载）</li><li>Data：数据区域<ul><li>__TEXT：只读，包括函数、静态变量等</li><li>__DATA：读写，可变的全局变量等</li><li>__LINKEDIT：方法、变量</li></ul></li></ul><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>启动的过程一般是指从用户点击app图标开始到<code>[AppDelegate didFinishLaunching</code>方法执行完成为止，其中，启动也分为冷启动和热启动</p><ul><li>冷启动：内存中不包含app相关数据的启动，一般我们可以通过重启手机来实现冷启动</li><li>热启动：是指杀掉app进程后，数据仍然存在时的启动</li></ul><p>而我们这里所说的启动优化，一般是指冷启动情况下的，这种情况下的启动主要分为两部分：</p><ul><li>T1 ：pre-main阶段，即main函数之前，操作系统加载App可执行文件到内存，执行一系列的加载、链接等工作，简单来说，就是dyld加载过程。</li><li>T2：main函数之后，即从main函数开始，到Appdelegate 的didFinishLaunching方法执行完成为止，主要是构建第一个界面，并完成渲染。</li></ul><p>所以，T1+T2的过程 就是 从用户点击App图标到用户能看到app主界面的过程，即需要启动优化的部分。</p><h2 id="pre-main阶段"><a href="#pre-main阶段" class="headerlink" title="pre-main阶段"></a>pre-main阶段</h2><p>pre-main阶段的启动时间其实就是dyld加载过程的时间。</p><p>针对main函数之前的启动时间，苹果提供了内建的测量方法，在<code>Edit Scheme -&gt; Run -&gt; Arguments -&gt; Environment Variables</code>点击【+】添加环境变量 <code>DYLD_PRINT_STATISTICS 设为 1</code>，然后运行，就可以直接打印相关数据。</p><p><img src="pre_main_time.jpg" alt=""></p><p>pre-main阶段一共耗时1.7s。</p><ul><li><code>dylib loading time</code>：主要是加载动态库，用时320.32ms</li><li><code>rebase/binding time</code>：偏移修正、符号绑定耗时，耗时160.52ms<ul><li><code>rebase</code>：偏移修正，任何一个app生成的二进制文件，在二进制文件内部所有的方法、函数调用，都有一个地址，这个地址是在当前二进制文件中的偏移地址。在APP运行是，每次系统都会随机分配一个ASLR（Address Space Layout Randomization，地址空间布局随机化）地址值，然后在加上偏移值就是运行时确定的内存地址。</li><li><code>binding</code>：绑定，例如NSLog方法，在编译时期生成的mach-o文件中，会创建一个符号！NSLog（目前指向一个随机的地址），然后在运行时（从磁盘加载到内存中，是一个镜像文件），会将真正的地址给符号（即在内存中将地址与符号进行绑定，是dyld做的，也称为动态库符号绑定），一句话概括：绑定就是给符号赋值的过程</li></ul></li><li><code>ObjC setup time</code>：OC类注册的耗时，OC类越多，越耗时</li><li><code>initializer time</code>：执行load和构造函数的耗时</li></ul><h3 id="pre-main优化建议"><a href="#pre-main优化建议" class="headerlink" title="pre-main优化建议"></a>pre-main优化建议</h3><ol><li>尽量减少外部动态库的使用。苹果建议自定义动态库的数量最好不要超过6个，超过6个则合并动态库。</li><li>减少OC类</li><li>讲不要的<code>+load</code>方法去掉，延迟到<code>+initialize</code>中</li><li>尽量减少C++函数</li></ol><h2 id="main-阶段"><a href="#main-阶段" class="headerlink" title="main 阶段"></a>main 阶段</h2><p>在main函数之后的<code>didFinishLaunching</code>方法中，主要是执行了各种业务，有很多并不是必须在这里立即执行的，这种业务我们可以采取延迟加载，防止影响启动时间。</p><p>在<code>didFinishLaunching</code>中，主要做一下几件事情：</p><ol><li>初始化第三方sdk</li><li>app运行环境配置</li><li>自定义工具的初始化等</li></ol><h3 id="main-阶段的优化"><a href="#main-阶段的优化" class="headerlink" title="main 阶段的优化"></a>main 阶段的优化</h3><ol><li>减少启动时需要初始化的sdk等，使用懒加载或者多线程处理。</li><li>优化代码，去除非必须的代码逻辑。</li><li>首页UI加载最后使用纯代码，避免使用xib和storybord（需要转换，更耗时）。</li><li>删除废弃的类、方法。</li></ol><h1 id="大招-二进制重排"><a href="#大招-二进制重排" class="headerlink" title="大招 二进制重排"></a>大招 二进制重排</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzI1MzYzMjE0MQ==&mid=2247485101&idx=1&sn=abbbb6da1aba37a04047fc210363bcc9" target="_blank" rel="noopener">抖音研发实践：基于二进制文件重排的解决方案 APP启动速度提升超15%</a></p><h3 id="System-Trace"><a href="#System-Trace" class="headerlink" title="System Trace"></a>System Trace</h3><p>基于Page Fault，App在冷启动过程中，会有大量的类、分类、三方等需要加载和执行，此时的产生的Page Fault所带来的的耗时是很大的。我们使用System Trace看下，在启动阶段的Page Fault的堆栈。</p><p>打开<code>Instruments</code>工具，选则<code>System Trace</code>。启动之后，在第一个界面出来之后，直接停掉。</p><p><img src="system_trace.jpg" alt=""></p><p>可以看到PageFault有2800次。</p><p>所以二进制重排要怎么重排呢？</p><h2 id="二进制重排原理"><a href="#二进制重排原理" class="headerlink" title="二进制重排原理"></a>二进制重排原理</h2><p>在虚拟内存部分，我们知道，当进程访问一个虚拟内存page，而对应的物理内存不存在时，会触发缺页中断（Page Fault），因此阻塞进程。此时就需要先加载数据到物理内存，然后再继续访问。这个对性能是有一定影响的。</p><p>所以我们就需要把先优先调用的方法等按照一定的顺序进行排列，这样就避免了<code>Page Falut</code>多次执行的情况。</p><p><img src="%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%87%8D%E6%8E%92.jpg" alt=""></p><p>可以查看上面抖音的文章，通过hook，大部分的方法都可以拿到，但是block、c++、initialize等方法是没有办法hook到，最后他们提到了clang插庄。</p><p>我们写一个Demo，来看一下编译的时期的顺序以及如何进行clang插庄。</p><p>在<code>target -&gt; Build Setting -&gt; Write Link Map File</code>设置为YES，可以查看linkMap文件代码的执行顺序。</p><h2 id="步奏"><a href="#步奏" class="headerlink" title="步奏"></a>步奏</h2><h3 id="添加编译参数"><a href="#添加编译参数" class="headerlink" title="添加编译参数"></a>添加编译参数</h3><p>在<code>Target -&gt; Build Setting -&gt; Custom Complier Flags -&gt; Other C Flags</code> 添加<br><code>-fsanitize-coverage=func,trace-pc-guard</code> 这个参数。此时编译会报错。</p><p>如果存在swift混编，还需要在 <code>Other Swift Flags</code> 中加入<code>-sanitize-coverage=func</code> 和 <code>-sanitize=undefined</code>。</p><h3 id="导入头文件，添加代码"><a href="#导入头文件，添加代码" class="headerlink" title="导入头文件，添加代码"></a>导入头文件，添加代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;sanitizer&#x2F;coverage_interface.h&gt;</span><br><span class="line">#import &lt;dlfcn.h&gt;</span><br><span class="line">#import &lt;libkern&#x2F;OSAtomic.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;原子队列，其目的是保证写入安全，线程安全</span><br><span class="line">static  OSQueueHead queue &#x3D; OS_ATOMIC_QUEUE_INIT;</span><br><span class="line">&#x2F;&#x2F;定义符号结构体，以链表的形式</span><br><span class="line">typedef struct &#123;</span><br><span class="line">    void *pc;</span><br><span class="line">    void *next;</span><br><span class="line">&#125; ALNode;</span><br><span class="line"></span><br><span class="line">void __sanitizer_cov_trace_pc_guard_init(uint32_t *start,</span><br><span class="line">                                                    uint32_t *stop) &#123;</span><br><span class="line">  static uint64_t N;  &#x2F;&#x2F; Counter for the guards.</span><br><span class="line">  if (start &#x3D;&#x3D; stop || *start) return;  &#x2F;&#x2F; Initialize only once.</span><br><span class="line">  printf(&quot;INIT: %p %p\n&quot;, start, stop);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void __sanitizer_cov_trace_pc_guard(uint32_t *guard) &#123;</span><br><span class="line">    &#x2F;&#x2F; 这个会拦截load方法，所以把这个注释掉</span><br><span class="line">    &#x2F;&#x2F; if (!*guard) return;</span><br><span class="line">    &#x2F;&#x2F;当前函数返回到上一个调用的地址，可以打断点通过lldb调试，使用bt命令，可以看到pc的值与0、1的关系。</span><br><span class="line">    void *PC &#x3D; __builtin_return_address(0);</span><br><span class="line">    &#x2F;&#x2F;创建结构体</span><br><span class="line">    SYNode * node &#x3D; malloc(sizeof(SYNode));</span><br><span class="line">    &#x2F;&#x2F; node赋值</span><br><span class="line">    *node &#x3D; (SYNode)&#123;PC,NULL&#125;;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 加入结构!</span><br><span class="line">    OSAtomicEnqueue(&amp;symbolList, node, offsetof(SYNode, next));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当第一个页面加载完成，或者didFinishLaunching之后，调用输出，生成order_file。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">- (void)createOrderFile &#123;</span><br><span class="line">NSMutableArray&lt;NSString *&gt; * symbolNames &#x3D; [NSMutableArray array];</span><br><span class="line">    while (true) &#123;</span><br><span class="line">        &#x2F;&#x2F;offsetof 就是针对某个结构体找到某个属性相对这个结构体的偏移量</span><br><span class="line">        SymbolNode * node &#x3D; OSAtomicDequeue(&amp;symboList, offsetof(SymbolNode, next));</span><br><span class="line">        if (node &#x3D;&#x3D; NULL) break;</span><br><span class="line">        Dl_info info;</span><br><span class="line">        dladdr(node-&gt;pc, &amp;info);</span><br><span class="line">        </span><br><span class="line">        NSString * name &#x3D; @(info.dli_sname);</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 添加不是OC方法，需要添加下划线</span><br><span class="line">        BOOL isObjc &#x3D; [name hasPrefix:@&quot;+[&quot;] || [name hasPrefix:@&quot;-[&quot;];</span><br><span class="line">        NSString * symbolName &#x3D; isObjc ? name : [@&quot;_&quot; stringByAppendingString:name];</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;去重</span><br><span class="line">        if (![symbolNames containsObject:symbolName]) &#123;</span><br><span class="line">            [symbolNames addObject:symbolName];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;取反</span><br><span class="line">    NSArray * symbolAry &#x3D; [[symbolNames reverseObjectEnumerator] allObjects];</span><br><span class="line">    NSLog(@&quot;%@&quot;,symbolAry);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;将结果写入到文件</span><br><span class="line">    NSString * funcString &#x3D; [symbolAry componentsJoinedByString:@&quot;\n&quot;];</span><br><span class="line">    NSString * filePath &#x3D; [NSTemporaryDirectory() stringByAppendingPathComponent:@&quot;lb.order&quot;];</span><br><span class="line">    NSData * fileContents &#x3D; [funcString dataUsingEncoding:NSUTF8StringEncoding];</span><br><span class="line">    BOOL result &#x3D; [[NSFileManager defaultManager] createFileAtPath:filePath contents:fileContents attributes:nil];</span><br><span class="line">    if (result) &#123;</span><br><span class="line">        NSLog(@&quot;%@&quot;,filePath);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        NSLog(@&quot;文件写入出错&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链接order-file"><a href="#链接order-file" class="headerlink" title="链接order file"></a>链接order file</h3><p>在<code>target -&gt; build setting -&gt; order file</code> 导入我们生成的<code>.order</code>文件。</p><h1 id="引用："><a href="#引用：" class="headerlink" title="引用："></a>引用：</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzI1MzYzMjE0MQ==&mid=2247485101&idx=1&sn=abbbb6da1aba37a04047fc210363bcc9" target="_blank" rel="noopener">抖音研发实践：基于二进制文件重排的解决方案 APP启动速度提升超15%</a></p><p><img src="https://juejin.cn/post/6844904130406793224" alt="iOS 优化篇 - 启动优化之Clang插桩实现二进制重排"><br><img src="https://www.jianshu.com/p/bae1e9bddcc9" alt="iOS优化篇之App启动时间优化"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h1&gt;&lt;h2 id=&quot;虚拟内存-amp-物理内存&quot;&gt;&lt;a href=&quot;#虚拟内存-amp-物理内存&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>代码注入</title>
    <link href="http://liujiaboy.github.io/2021/05/25/%E9%80%86%E5%90%91/nx-4-%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5/"/>
    <id>http://liujiaboy.github.io/2021/05/25/%E9%80%86%E5%90%91/nx-4-%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5/</id>
    <published>2021-05-25T05:55:24.000Z</published>
    <updated>2021-06-02T03:04:50.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码注入"><a href="#代码注入" class="headerlink" title="代码注入"></a>代码注入</h1><p>我们按照上一章（应用重签名）的逻辑，先把程序跑起来。</p><p>然后再<code>.app</code>中显示包内容，查看可执行文件。这里我们使用<code>MachOView</code>工具进行分析，这里我们主要查看的是<code>Load Commands</code>。</p><p><img src="MachOView.jpg" alt=""></p><p><code>Load Commands</code>：加载命令。</p><p>在<code>Load Commands</code>里头，可以看到所有的Framework。点击每一个Framework可以看到这个Framework的执行路径。</p><h2 id="Framework注入"><a href="#Framework注入" class="headerlink" title="Framework注入"></a>Framework注入</h2><h3 id="创建动态库"><a href="#创建动态库" class="headerlink" title="创建动态库"></a>创建动态库</h3><ol><li><p>在工程中选择<code>WeChat.xcodeproj</code>，然后在工程配置页面，选择左下角的加号”+“ -&gt; ”iOS“ -&gt; search ”Framework“。</p><p> <img src="add_framework.jpg" alt=""></p></li><li><p>创建一个类，添加<code>+(void)load</code>方法，打印一串字符串。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ (void)load &#123;</span><br><span class="line">    NSLog(@&quot;\n\n hock success...\n\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li>重新运行工程（使用重签名）。这个时候我们的<code>NSLog</code>并不会执行，因为并没有链接到可执行文件。</li></ol><pre><code>然后在项目工程`project` -&gt; `show in finder` -&gt; 找到对应的APP -&gt; 显示包内容 -&gt; Framework文件夹。可以看到我们添加的ALHook.framework。然后重新用`MachOView`工具打开可以执行文件（需要这个可执行文件），看看是否有链接ALHook.framework。这里是没有的。</code></pre><h3 id="链接动态库"><a href="#链接动态库" class="headerlink" title="链接动态库"></a>链接动态库</h3><p>通过<code>yololib</code>工具修改Mach-O文件，目的就是链接我们添加的动态库。</p><p>把<code>yololib</code>工具放到我们的工程文件中，与<code>appSign.sh</code>文件同级。然后把上面debug的可执行文件也同样复制过来。</p><p>然后执行下面的命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;yololib [可执行文件] Frameworks&#x2F;[添加的动态库].framework&#x2F;[添加的动态库的可执行文件]</span><br><span class="line"></span><br><span class="line">$ .&#x2F;yololib WeChat Frameworks&#x2F;ALHook.framework&#x2F;ALHook</span><br></pre></td></tr></table></figure><p>执行完命令之后，重新使用<code>MachOView</code>工具打开可执行文件。</p><p><img src="MachO_ALHook.jpg" alt=""></p><h3 id="重新压缩，打包ipa文件"><a href="#重新压缩，打包ipa文件" class="headerlink" title="重新压缩，打包ipa文件"></a>重新压缩，打包ipa文件</h3><ol><li>重新解压<code>8.0.2.ipa</code>文件。</li><li>替换<code>Payload/xx.app -&gt; 显示包内容</code>中的可执行文件，把上一部链接好的可执行文件做替换。</li><li>重新压缩 <code>$ zip -ry WeChat.ipa Payload/</code>。</li><li>把压缩后的ipa包重新放在工程目录APP文件夹下。</li></ol><h3 id="重新运行"><a href="#重新运行" class="headerlink" title="重新运行"></a>重新运行</h3><p>这个时候重新运行，就可以看到我们的NSLog了。</p><p><img src="hook_success.jpg" alt=""></p><h2 id="dylib注入"><a href="#dylib注入" class="headerlink" title="dylib注入"></a>dylib注入</h2><p>我们按照上一章（应用重签名）的逻辑，先把程序跑起来。</p><h3 id="创建dylib"><a href="#创建dylib" class="headerlink" title="创建dylib"></a>创建dylib</h3><p>然后选择target -&gt; “+” -&gt; “macOs” -&gt; 搜索”library” -&gt; 选择”Library”，命名为”ALHook”。步奏与创建动态库类似。</p><h3 id="修改ALHook"><a href="#修改ALHook" class="headerlink" title="修改ALHook"></a>修改ALHook</h3><p>在<code>ALHook</code> -&gt; “Build Setting”中配置</p><ol><li>base sdk改为 <code>iOS</code></li><li>code signing identify 改为 <code>iOS Developer</code></li></ol><p>然后再文件中添加load方法，注入代码输出一串文本。</p><h3 id="添加依赖-Copy-Files"><a href="#添加依赖-Copy-Files" class="headerlink" title="添加依赖 Copy Files"></a>添加依赖 Copy Files</h3><p>在当前工程中拷贝dylib。</p><p><img src="add_dylib.jpg" alt=""></p><p>这里需要注意的是，<code>run script</code>的顺序一定是在<code>Copy Files</code>上的，因为如果顺序反了，会导致最后才执行脚本。则把copy的dylib文件给重新覆盖掉，因为脚本文件执行的是app替换。</p><h3 id="使用脚本执行"><a href="#使用脚本执行" class="headerlink" title="使用脚本执行"></a>使用脚本执行</h3><p>在上方动态库中我们是手动使用<code>/.yololib</code>工具进行链接的，这里我们使用脚本，在原来的<code>appSigh.sh</code>文件末尾添加一句代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 链接手动添加的库，做代码注入</span><br><span class="line">.&#x2F;yololib &quot;$TARGET_APP_PATH&#x2F;$APP_BINARY&quot; &quot;Frameworks&#x2F;libALHook.dylib&quot;</span><br></pre></td></tr></table></figure><h3 id="直接运行"><a href="#直接运行" class="headerlink" title="直接运行"></a>直接运行</h3><p>直接运行代码，可以在Framework中看到<code>libALHook.dylib</code>文件。</p><p>运行成功之后，可以看到我们的输出。</p><h1 id="代码注入流程总结"><a href="#代码注入流程总结" class="headerlink" title="代码注入流程总结"></a>代码注入流程总结</h1><ul><li>Framework手动注入，是为了熟悉原理，真正操作的时候我们使用的都是脚本文件，从繁到简。</li><li>Framework流程：<ol><li>Xcode新建Framework。</li><li>通过yololib工具是Mach-O文件链接Framework文件。<ul><li>所有的Framework加载都是由DYLD加载进入内存被执行的</li><li>注入成功的库路径会写入到Mach-O文件的<code>LC_LOAD_DYLIB</code>字段中</li></ul></li></ol></li><li>dylib注入流程：<ol><li>Xcode新建<code>dylib</code>库，然后修改”Build Setting”<ol><li>base sdk改为 <code>iOS</code></li><li>code signing identify 改为 <code>iOS Developer</code></li></ol></li><li>添加依赖，<code>Copy Files</code>将dylib文件拷贝到APP包中</li><li>通过yololib工具链接dylib文件。</li></ol></li></ul><p>这里需要注意的是，顺序不能错误，如下图：</p><p><img src="script_framework.jpg" alt=""></p><h1 id="真正的代码注入"><a href="#真正的代码注入" class="headerlink" title="真正的代码注入"></a>真正的代码注入</h1><p>我们使用Framework的形式进行注入。因为比较方便，dylib需要修改一些东西。</p><p>这里也直接使用dylib中使用脚本的方式进行注入。</p><h2 id="Debug-View-Hierarchy调试"><a href="#Debug-View-Hierarchy调试" class="headerlink" title="Debug View Hierarchy调试"></a>Debug View Hierarchy调试</h2><p><img src="hook_register.jpg" alt=""></p><p>我们看一下图片上的内容，通过<code>Debug View Hierarchy</code>的方式，先获取到我们想要的东西。</p><p>这里可以看到注册按钮的相关信息：</p><ol><li>是一个<code>FixTitleColorButton</code>的类，应该是封装的Button</li><li>指定的target是<code>WCAccountLoginControlLogic</code>。</li><li>相应的action是<code>onFirstViewRegister</code>。</li></ol><p>能拿到这些信息，就可以直接通过runtime的方法替换就可以直接修改了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+ (void)load &#123;</span><br><span class="line">    Method oldRegister &#x3D; class_getInstanceMethod(objc_getClass(&quot;WCAccountLoginControlLogic&quot;), @selector(onFirstViewRegister));</span><br><span class="line">    </span><br><span class="line">    Method newRegister &#x3D; class_getInstanceMethod([self class], @selector(new_register));</span><br><span class="line">    method_exchangeImplementations(oldRegister, newRegister);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)new_register &#123;</span><br><span class="line">    NSLog(@&quot;new register...&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就把原来的注册方法给替换掉了，点击注册会输出者一串字符。</p><p>接下来我们要在点击登录时，拿到用户密码，并且不影响正常的登录流程。</p><h2 id="class-dump工具"><a href="#class-dump工具" class="headerlink" title="class-dump工具"></a>class-dump工具</h2><p>如果我们通过使用上面的方式，可以轻松的拿到用户名和密码，但是这是通过响应链一层层的去找的，所以也就有了这么个工具，可以直接输出OC中的类、方法、属性等内容。</p><p>把<code>WeChat</code>的可执行文件拷贝出来，和<code>class-dump</code>工具放在相同目录中(也可以是其他目录)，然后执行下述命令，可以输出所有的header文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;class-dump -H WeChat -o .&#x2F;headers&#x2F;</span><br></pre></td></tr></table></figure><p>然后我们通过<code>Debug View Hierarchy</code>找到对应的账号密码登录页面，查看页面的class和文本框的class，进一步在输出的头文件中找。</p><p><img src="hook_class_dump.jpg" alt=""></p><p>我们用同样的方式继续找<code>WCAccountTextFieldItem</code>。发现在<code>WCBaseTextFieldItem</code>有一个<code>WCUITextField</code>，继承自<code>UITextField</code>也就是我们要找的文本框。</p><p>在通过<code>Debug View Hierarchy</code>找到登录的点击事件。为<code>onNext</code>。能拿到这些信息，就可以操作了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">+(void)load &#123;</span><br><span class="line">    &#x2F;&#x2F;原始的Method</span><br><span class="line">    Method onNext &#x3D; class_getInstanceMethod(objc_getClass(&quot;WCAccountMainLoginViewController&quot;), @selector(onNext));</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;添加新方法!</span><br><span class="line">    class_addMethod(objc_getClass(&quot;WCAccountMainLoginViewController&quot;), @selector(new_onNext), new_onNext, &quot;v@:&quot;);</span><br><span class="line">    &#x2F;&#x2F;交换</span><br><span class="line">    method_exchangeImplementations(onNext, class_getInstanceMethod(objc_getClass(&quot;WCAccountMainLoginViewController&quot;), @selector(new_onNext)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;新的IMP</span><br><span class="line">void new_onNext(id self,SEL _cmd)&#123;</span><br><span class="line">    UITextField * pwd &#x3D; (UITextField *)[[self valueForKey:@&quot;_textFieldUserPwdItem&quot;] valueForKey:@&quot;m_textField&quot;];</span><br><span class="line"></span><br><span class="line">    NSLog(@&quot;密码是:%@&quot;,pwd.text);</span><br><span class="line">    &#x2F;&#x2F;调用回原来的逻辑!!</span><br><span class="line">    &#x2F;&#x2F;调用原来的方法!</span><br><span class="line">    [self performSelector:@selector(new_onNext)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，这里是在原来的<code>WCAccountMainLoginViewController</code>类中添加方法，而不是用注册时的那种方法，是因为会造成crash，因为使用的是<code>exchange</code>方法交换，在<code>WCAccountMainLoginViewController</code>类执行<code>new_onNext</code>方法时找不到对应的方法。</p><p>这种是使用<code>class_addMethod</code>在<code>WCAccountMainLoginViewController</code>中添加了一个方法。接下来我们使用setImp和getImp的方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+(void)load&#123;</span><br><span class="line">    &#x2F;&#x2F;原始的Method</span><br><span class="line">    old_onNext &#x3D; method_getImplementation(class_getInstanceMethod(objc_getClass(&quot;WCAccountMainLoginViewController&quot;), @selector(onNext)));</span><br><span class="line">    method_setImplementation(class_getInstanceMethod(objc_getClass(&quot;WCAccountMainLoginViewController&quot;), @selector(onNext)), new_onNext);</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 定义原来的IMP</span><br><span class="line">IMP (*old_onNext)(id self,SEL _cmd);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义新的IMP</span><br><span class="line">void new_onNext(id self,SEL _cmd)&#123;</span><br><span class="line">    UITextField * pwd &#x3D; (UITextField *)[[self valueForKey:@&quot;_textFieldUserPwdItem&quot;] valueForKey:@&quot;m_textField&quot;];</span><br><span class="line"></span><br><span class="line">    NSLog(@&quot;密码是:%@&quot;,pwd.text);</span><br><span class="line">    &#x2F;&#x2F;调用回原来的逻辑!!</span><br><span class="line">    &#x2F;&#x2F;调用原来的方法!</span><br><span class="line">    old_onNext(self,_cmd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式相对比较清晰，然后重新运行就好了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过Framework、Dylib注入</p><ul><li>Xcode自动打包Framework进入app包</li><li>macho中load commands里需要有 LC_LOAD_DYLIB字段</li><li>DYLD加载我们创建的Framework</li><li>MethodSwizzle - Runtime中也是重点<ul><li>exchange函数交换SEL和IMP的对应关系<ul><li>这种方案有可能会造成crash。因为没法调用原来的方法。</li></ul></li><li>解决方案：<ul><li>添加方法列表，然后exchange或者replace</li><li>getImp、setImp配合使用</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;代码注入&quot;&gt;&lt;a href=&quot;#代码注入&quot; class=&quot;headerlink&quot; title=&quot;代码注入&quot;&gt;&lt;/a&gt;代码注入&lt;/h1&gt;&lt;p&gt;我们按照上一章（应用重签名）的逻辑，先把程序跑起来。&lt;/p&gt;
&lt;p&gt;然后再&lt;code&gt;.app&lt;/code&gt;中显示包内容，查
      
    
    </summary>
    
    
      <category term="逆向" scheme="http://liujiaboy.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="应用签名" scheme="http://liujiaboy.github.io/tags/%E5%BA%94%E7%94%A8%E7%AD%BE%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>LLVM-编译流程</title>
    <link href="http://liujiaboy.github.io/2021/05/24/OC%E5%8E%9F%E7%90%86/LLVM/"/>
    <id>http://liujiaboy.github.io/2021/05/24/OC%E5%8E%9F%E7%90%86/LLVM/</id>
    <published>2021-05-24T13:41:15.000Z</published>
    <updated>2021-05-27T02:47:29.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LLVM"><a href="#LLVM" class="headerlink" title="LLVM"></a>LLVM</h1><p>LLVM是架构编译器的框架系统，以C++编写而成，用于优化任意程序语言编写的程序的编译时间（compile-time）、链接时间（link-time）、运行时间（run-time）以及空闲时间（idle-time）。对开发者保持开放，并兼容已有脚本。</p><h2 id="传统编译器设计"><a href="#传统编译器设计" class="headerlink" title="传统编译器设计"></a>传统编译器设计</h2><p>源码<code>Source Code</code> + 前端<code>Frontend</code> + 优化器<code>Optimizer</code> + 后端<code>Backend</code>（代码生成器 CodeGenerator）+ 机器码<code>Machine Code</code>，如下图所示</p><p><img src="llvm-1.jpg" alt=""></p><ul><li><p>前端<code>Frontend</code>：编译器前端的任务是解析源代码（编译阶段），它会进行 词法分析、语法分析、语义分析、检查源代码是否存在错误，然后构建抽象语法树（Abstract Syntax Tree AST），LLVM的前端还会生成中间代码（intermediate representation，简称<code>IR</code>），可以理解为llvm是编译器 + 优化器， 接收的是IR中间代码，输出的还是IR，给后端，经过后端翻译成目标指令集。</p></li><li><p>优化器 <code>Optimizer</code>：优化器负责进行各种优化，改善代码的运行时间，例如消除冗余计算等。</p></li><li><p>后端<code>Backend</code>（代码生成器 Code Generator）：将代码映射到目标指令集，生成机器代码，并且进行机器代码相关的代码优化。</p></li></ul><h2 id="iOS的编译架构"><a href="#iOS的编译架构" class="headerlink" title="iOS的编译架构"></a>iOS的编译架构</h2><p>OC、C、C++使用的编译器前端是Clang，Swift是swift，后端都是LLVM。</p><p><img src="llvm-2.jpg" alt=""></p><h2 id="LLVM的设计"><a href="#LLVM的设计" class="headerlink" title="LLVM的设计"></a>LLVM的设计</h2><p>当编译器决定支持多种源语言或者多种硬件架构时，LLVM最重要的地方就来了。其他的编译器如GCC，他们都非常成功，但是由于它是作为整体应用程序设计的，因此他们的用途受到了很大的限制。</p><p>LLVM设计的最重要方面是，使用通用的代码表示形式（IR），它是用来在编译器中表示代码的形式，所有LLVM可以为任何编程语言独立编写前端，并且可以为任意硬件架构独立编写后端。</p><p><img src="llvm-3.jpg" alt=""></p><p>LLVM的设计是前后端分离的，无论前端还是后端发生变化，都不会影响另一个。</p><h2 id="Clang简介"><a href="#Clang简介" class="headerlink" title="Clang简介"></a>Clang简介</h2><p>clang是LLVM项目中的一个子项目，它是基于LLVM架构图的轻量级编译器，诞生之初是为了替代GCC，提供更快的编译速度，它是负责C、C++、OC语言的编译器，属于整个LLVM架构中的 编译器前端，对于开发者来说，研究Clang可以给我们带来很多好处。</p><h1 id="编译流程"><a href="#编译流程" class="headerlink" title="编译流程"></a>编译流程</h1><p>创建一个工程，在main.m中添加代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#define c 3</span><br><span class="line">typedef int Demo_Int;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    int a &#x3D; 1;</span><br><span class="line">    Demo_Int b &#x3D; 2;</span><br><span class="line">    printf(&quot;%d&quot;, a + b + c);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过命令可以打印源码的编译流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clang -ccc-print-phases main.m</span><br></pre></td></tr></table></figure><p>流程如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">输入文件：找到源文件</span><br><span class="line">+- 0: input, &quot;main.m&quot;, objective-c</span><br><span class="line"></span><br><span class="line">预处理阶段：这个过程处理包括宏的替换，头文件的导入</span><br><span class="line">+- 1: preprocessor, &#123;0&#125;, objective-c-cpp-output</span><br><span class="line"></span><br><span class="line">编译阶段：进行词法分析、语法分析、检测语法是否正确，最终生成IR</span><br><span class="line">+- 2: compiler, &#123;1&#125;, ir</span><br><span class="line"></span><br><span class="line">后端：这里LLVM会通过一个一个的pass去优化，每个pass做一些事情，最终生成汇编代码</span><br><span class="line">+- 3: backend, &#123;2&#125;, assembler</span><br><span class="line"></span><br><span class="line">汇编代码生成目标文件</span><br><span class="line">+- 4: assembler, &#123;3&#125;, object</span><br><span class="line"></span><br><span class="line">链接：一个个&quot;xxx.0&quot;文件链接起来，再链接需要的动态库和静态库，生成可执行文件</span><br><span class="line">+- 5: linker, &#123;4&#125;, image（镜像文件）</span><br><span class="line"></span><br><span class="line">绑定：通过不同的架构，生成对应的可执行文件</span><br><span class="line">6: bind-arch, &quot;x86_64&quot;, &#123;5&#125;, image</span><br></pre></td></tr></table></figure><h2 id="预处理阶段"><a href="#预处理阶段" class="headerlink" title="预处理阶段"></a>预处理阶段</h2><p>预处理主要是处理：</p><ol><li>头文件导入<ul><li>包括引入的头文件中的头文件</li></ul></li><li>宏定义，替换宏<ul><li>比如上方定义的<code>#define c 3</code>，预处理后，不会看到<code>c</code>直接会用3替代。</li></ul></li></ol><p>通过命令可以查看预处理后的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 在终端直接查看预处理的结果</span><br><span class="line">$ clang -E main.m</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 把预处理的结果输出到main2.m文件中</span><br><span class="line">$ clang -E main.m &gt;&gt; main2.m</span><br></pre></td></tr></table></figure><p>编译之后的主要代码如下，删除很多头文件的引入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">typedef int Demo_Int;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    int a &#x3D; 1;</span><br><span class="line">    Demo_Int b &#x3D; 2;</span><br><span class="line">    printf(&quot;%d&quot;, a + b + 3;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>typedef 处理类型别名时，在预处理阶段<code>不会被替换掉</code>。</li><li>#define 在预处理阶段<code>会被替换掉</code>。在逆向工程中，通常会被用来进行代码混淆，将核心方法等使用<code>系统相似的名称</code>，来达到代码混淆的目的，使代码更安全。</li></ol></blockquote><h2 id="编译阶段"><a href="#编译阶段" class="headerlink" title="编译阶段"></a>编译阶段</h2><p>由<code>词法分析</code>、<code>语法分析</code>、<code>生成中级代码IR</code>等组成。</p><h3 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h3><p>预处理完成后就会进行词法分析，这里会把代码切成一个个token，比如大小括号、等号、字符串、关键词等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clang -fmodules -fsyntax-only -Xclang -dump-tokens main.m</span><br></pre></td></tr></table></figure><p><img src="llvm-4.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; StartOfLine：main.m文件中，第11行，第1个字符开始，是&#39;typedef&#39;</span><br><span class="line">typedef &#39;typedef&#39; [StartOfLine]Loc&#x3D;&lt;main.m:11:1&gt;</span><br><span class="line">&#x2F;&#x2F; LeadingSpace： main.m文件中，第11行，从第9个字符开始</span><br><span class="line">int &#39;int&#39; [LeadingSpace]Loc&#x3D;&lt;main.m:11:9&gt;</span><br><span class="line">identifier &#39;Demo_Int&#39; [LeadingSpace]Loc&#x3D;&lt;main.m:11:13&gt;</span><br><span class="line">&#x2F;&#x2F; 符号&quot;;&quot;，从main.m的第11行，21个字符开始</span><br><span class="line">semi &#39;;&#39;Loc&#x3D;&lt;main.m:11:21&gt;</span><br></pre></td></tr></table></figure><p>如果代码中有书写错误，在词法分析时不会报错。</p><h3 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h3><p>词法分析完成后就是语法分析，它的任务是验证语法是否正确，在词法分析的基础上将单词序列组合成各类此法短语，如程序、语句、表达式 等等，然后将所有节点组成抽象语法树（Abstract Syntax Tree = AST），语法分析判断程序在结构上是否正确。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clang -fmodules -fsyntax-only -Xclang -ast-dump main.m</span><br></pre></td></tr></table></figure><p>如果导入头文件找不到，可以指定SDK</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ clang -isysroot (自己Xcode下对应SDK路径) -fmodules -fsyntax-only -Xclang -ast-dump main.m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ clang -isysroot &#x2F;Applications&#x2F;Xcode.app&#x2F;Contents&#x2F;Developer&#x2F;Platforms&#x2F;iPhoneSimulator.platform&#x2F;Developer&#x2F;SDKs&#x2F;iPhoneSimulator14.3.sdk&#x2F; -fmodules -fsyntax-only -Xclang -ast-dump main.m</span><br></pre></td></tr></table></figure><p>这是截取了语法分析中的一部分：</p><p><img src="llvm-5.jpg" alt=""></p><p>这是严格的按照语法进行处理的，从代码的对齐上可以看出点东西来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 头文件引入 stdio</span><br><span class="line">ImportDecl 0x7fc57905a130 &lt;main.m:9:1&gt; col:1 implicit Darwin.C.stdio</span><br><span class="line">&#x2F;&#x2F; typedef int Demo_Int;</span><br><span class="line">|-TypedefDecl 0x7fc57905a188 &lt;line:11:1, col:13&gt; col:13 referenced Demo_Int &#39;int&#39;</span><br><span class="line">| &#96;-BuiltinType 0x7fc57901b500 &#39;int&#39;</span><br><span class="line">&#x2F;&#x2F; 定义了一个方法main，从13行的第1个字符开始到第18行第1个字符结束，返回int类型，有两个参数int和char **</span><br><span class="line">FunctionDecl 0x7fc57905a460 &lt;line:13:1, line:18:1&gt; line:13:5 main &#39;int (int, const char **)&#39;</span><br><span class="line">  &#x2F;&#x2F; 第1个参数为int 类型，参数名是argc</span><br><span class="line">  |-ParmVarDecl 0x7fc57905a1f8 &lt;col:10, col:14&gt; col:14 argc &#39;int&#39;</span><br><span class="line">  &#x2F;&#x2F; 第2个参数为char ** 类型，参数名是argv</span><br><span class="line">  |-ParmVarDecl 0x7fc57905a310 &lt;col:20, col:38&gt; col:33 argv &#39;const char **&#39;:&#39;const char **&#39;</span><br><span class="line">  &#x2F;&#x2F; 函数的内容范围，从第13行第41个字符开始到第18行第1个字符结束，也就是两个大括号的位置，也就是函数的作用域</span><br><span class="line">  &#96;-CompoundStmt 0x7fc578966df0 &lt;col:41, line:18:1&gt;</span><br><span class="line">    &#x2F;&#x2F; 声明局部变量</span><br><span class="line">    |-DeclStmt 0x7fc578966688 &lt;line:14:5, col:14&gt;</span><br><span class="line">    &#x2F;&#x2F; 局部变量为a，类型为int</span><br><span class="line">    | &#96;-VarDecl 0x7fc578966600 &lt;col:5, col:13&gt; col:9 used a &#39;int&#39; cinit</span><br><span class="line">    &#x2F;&#x2F; 局部变量a的值为1</span><br><span class="line">    |   &#96;-IntegerLiteral 0x7fc578966668 &lt;col:13&gt; &#39;int&#39; 1</span><br><span class="line">    |-DeclStmt 0x7fc578966b70 &lt;line:15:5, col:19&gt;</span><br><span class="line">    | &#96;-VarDecl 0x7fc5789666d0 &lt;col:5, col:18&gt; col:14 used b &#39;Demo_Int&#39;:&#39;int&#39; cinit</span><br><span class="line">    |   &#96;-IntegerLiteral 0x7fc578966738 &lt;col:18&gt; &#39;int&#39; 2</span><br><span class="line">    &#x2F;&#x2F; 调用了函数方法，返回int类型</span><br><span class="line">    |-CallExpr 0x7fc578966d60 &lt;line:16:5, col:27&gt; &#39;int&#39;</span><br><span class="line">      &#x2F;&#x2F; 隐式转换</span><br><span class="line">    | |-ImplicitCastExpr 0x7fc578966d48 &lt;col:5&gt; &#39;int (*)(const char *, ...)&#39; &lt;FunctionToPointerDecay&gt;</span><br><span class="line">    | | &#96;-DeclRefExpr 0x7fc578966b88 &lt;col:5&gt; &#39;int (const char *, ...)&#39; Function 0x7fc578966760 &#39;printf&#39; &#39;int (const char *, ...)&#39;</span><br><span class="line">    | |-ImplicitCastExpr 0x7fc578966da8 &lt;col:12&gt; &#39;const char *&#39; &lt;NoOp&gt;</span><br><span class="line">    | | &#96;-ImplicitCastExpr 0x7fc578966d90 &lt;col:12&gt; &#39;char *&#39; &lt;ArrayToPointerDecay&gt;</span><br><span class="line">    &#x2F;&#x2F; 对应的string类型转化为char[]类型，</span><br><span class="line">    | |   &#96;-StringLiteral 0x7fc578966be8 &lt;col:12&gt; &#39;char [3]&#39; lvalue &quot;%d&quot;</span><br><span class="line">    &#x2F;&#x2F; 运算表达式</span><br><span class="line">    | &#96;-BinaryOperator 0x7fc578966ce8 &lt;col:18, line:10:11&gt; &#39;int&#39; &#39;+&#39;</span><br><span class="line">    |   |-BinaryOperator 0x7fc578966ca8 &lt;line:16:18, col:22&gt; &#39;int&#39; &#39;+&#39;</span><br><span class="line">    |   | |-ImplicitCastExpr 0x7fc578966c78 &lt;col:18&gt; &#39;int&#39; &lt;LValueToRValue&gt;</span><br><span class="line">    |   | | &#96;-DeclRefExpr 0x7fc578966c08 &lt;col:18&gt; &#39;int&#39; lvalue Var 0x7fc578966600 &#39;a&#39; &#39;int&#39;</span><br><span class="line">    |   | &#96;-ImplicitCastExpr 0x7fc578966c90 &lt;col:22&gt; &#39;Demo_Int&#39;:&#39;int&#39; &lt;LValueToRValue&gt;</span><br><span class="line">    |   |   &#96;-DeclRefExpr 0x7fc578966c40 &lt;col:22&gt; &#39;Demo_Int&#39;:&#39;int&#39; lvalue Var 0x7fc5789666d0 &#39;b&#39; &#39;Demo_Int&#39;:&#39;int&#39;</span><br><span class="line">    |   &#96;-IntegerLiteral 0x7fc578966cc8 &lt;line:10:11&gt; &#39;int&#39; 3</span><br><span class="line">    &#96;-ReturnStmt 0x7fc578966de0 &lt;line:17:5, col:12&gt;</span><br><span class="line">      &#96;-IntegerLiteral 0x7fc578966dc0 &lt;col:12&gt; &#39;int&#39; 0</span><br></pre></td></tr></table></figure><p><code>CompoundStmt</code>：函数的作用域，大括号的开始与结束<code>{}</code><br><code>DeclStmt</code>：局部变量声明<br><code>CallExpr</code>：函数调用<br><code>BinaryOperator</code>：运算表达式</p><p><a href="https://www.jianshu.com/p/d21c16b8953e" target="_blank" rel="noopener">AST语法树关键字解析</a><br><a href="https://github.com/CodeLittlePrince/blog/issues/19" target="_blank" rel="noopener">AST抽象语法树</a></p><p>如果当我们写的代码有问题时，在编译阶段就会出现问题，比如我们在上面的代码中删除一个分号，再运行一下命令。</p><p><img src="llvm-6.jpg" alt=""></p><p>在语法分析阶段就会把错误清晰的暴露出来。</p><h3 id="生成中级代码IR"><a href="#生成中级代码IR" class="headerlink" title="生成中级代码IR"></a>生成中级代码IR</h3><p>完成以上步骤后，就开始生成中间代码IR了，代码生成器（Code Generation）会将语法树自顶向下遍历逐步翻译成LLVM IR。</p><p>可以通过下面命令生成<code>xx.ll</code>的文本文件，也就是IR代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 默认不优化</span><br><span class="line">$ clang -S -fobjc-arc -emit-llvm main.m</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; IR文件的优化，在Xcode中target - build setting -optimization level可以设置。</span><br><span class="line">&#x2F;&#x2F; LLVM的优化登记分别为 -O0、 -O1 、-O2、-O3、-Os（第一个字母为大写O）</span><br><span class="line">clang -Os -S -fobjc-arc -emit-llvm main.m -o main.ll</span><br></pre></td></tr></table></figure><p>以下是<code>IR</code>的基本语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@ 全局标识</span><br><span class="line">% 局部标识</span><br><span class="line">alloca 开辟空间</span><br><span class="line">align 内存对齐</span><br><span class="line">i32 32bit，4个字节</span><br><span class="line">store 写入内存</span><br><span class="line">load 读取数据</span><br><span class="line">call 调用函数</span><br><span class="line">ret 返回</span><br></pre></td></tr></table></figure><p>编译之后的IR代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">define i32 @main(i32 %0, i8** %1) #0 &#123;</span><br><span class="line">  %3 &#x3D; alloca i32, align 4</span><br><span class="line">  %4 &#x3D; alloca i32, align 4</span><br><span class="line">  %5 &#x3D; alloca i8**, align 8</span><br><span class="line">  %6 &#x3D; alloca i32, align 4</span><br><span class="line">  %7 &#x3D; alloca i32, align 4</span><br><span class="line">  store i32 0, i32* %3, align 4</span><br><span class="line">  store i32 %0, i32* %4, align 4</span><br><span class="line">  store i8** %1, i8*** %5, align 8</span><br><span class="line">  store i32 1, i32* %6, align 4</span><br><span class="line">  store i32 2, i32* %7, align 4</span><br><span class="line">  %8 &#x3D; load i32, i32* %6, align 4</span><br><span class="line">  %9 &#x3D; load i32, i32* %7, align 4</span><br><span class="line">  %10 &#x3D; add nsw i32 %8, %9</span><br><span class="line">  %11 &#x3D; add nsw i32 %10, 3</span><br><span class="line">  %12 &#x3D; call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %11)</span><br><span class="line">  ret i32 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化后生成的代码就不放了，自己看吧。</p><h4 id="bitcode"><a href="#bitcode" class="headerlink" title="bitcode"></a>bitcode</h4><p>在Xcode7以后，开启了bitcode，苹果会做进一步的优化，生成<code>.bc</code>的中间代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clang -emit-llvm -c main.ll -o main.bc</span><br></pre></td></tr></table></figure><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>LLVM在后端主要是会通过一个个的Pass去优化，每个Pass做一些事情，最终生成汇编代码。</p><p>按照整个llvm的流程，是通过<code>.ll</code>文件生成汇编文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clang -S -fobjc-arc main.ll -o main.s</span><br></pre></td></tr></table></figure><p>我们也可以直接使用源文件生成汇编代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clang -Os -S -fobjc-arc main.m -o main.s</span><br></pre></td></tr></table></figure><p>这里需要注意的是，在上一步中优化后得到的汇编代码与直接使用优化得到的汇编代码是一样的。</p><h3 id="生成目标文件"><a href="#生成目标文件" class="headerlink" title="生成目标文件"></a>生成目标文件</h3><p>目标文件的生成，是汇编器以汇编代码作为插入，将汇编代码转换为机器代码，最后输出目标文件（object file），<code>.o</code>结尾。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -fmodules -c main.s -o main.o</span><br></pre></td></tr></table></figure><p>接下来我们看看<code>.o</code>文件中有哪些内容(main.o的符号)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nm -nm main.o</span><br></pre></td></tr></table></figure><p>输出的结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ nm -nm main.o</span><br><span class="line">                 (undefined) external _printf</span><br><span class="line">0000000000000000 (__TEXT,__text) external _test</span><br><span class="line">000000000000000a (__TEXT,__text) external _main</span><br></pre></td></tr></table></figure><p><code>_printf</code>函数是一个是undefined、external类型的：</p><ul><li><code>undefined</code>：表示在当前文件暂时找不到符号_printf。</li><li><code>external</code>：表示这个符号是外部可以访问的。</li></ul><p>之所以找不到，是因为没有运行，有一些动态库、静态库是需要在运行时才被链接进来的。一堆堆的<code>.o</code>文件，链接起来，最后生成我们的可以执行文件。</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>连接器把编译生成的<code>.o</code>文件和<code>.dyld</code>、·.a·文件链接，生成一个<code>mach-o</code>文件。</p><p>其中，静态库和可执行文件合并，动态库是独立的（系统的动态库可以让所有mach-o访问的）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang main.o -o main</span><br></pre></td></tr></table></figure><p>接下来看一下生成的可执行文件<code>main</code>的符号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ nm -nm main</span><br><span class="line">                 (undefined) external _printf (from libSystem)</span><br><span class="line">                 (undefined) external dyld_stub_binder (from libSystem)</span><br><span class="line">0000000100000000 (__TEXT,__text) [referenced dynamically] external __mh_execute_header</span><br><span class="line">0000000100003f6d (__TEXT,__text) external _test</span><br><span class="line">0000000100003f77 (__TEXT,__text) external _main</span><br><span class="line">0000000100008008 (__DATA,__data) non-external __dyld_private</span><br></pre></td></tr></table></figure><p>可以看到，把dyld相关的库已经链接到可执行文件中了。</p><p>这个时候可以直接运行这个可执行文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ .&#x2F;main</span><br><span class="line">6%</span><br></pre></td></tr></table></figure><p>直接可以输出结果。</p><h3 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h3><p>通过不同的架构，生成对应的mach-o格式的可执行文件。</p><p>我们可以直接通过<code>file</code>命令查看可执行文件的类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file main</span><br><span class="line">main: Mach-O 64-bit executable x86_64</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="llvm-7.jpg" alt=""></p><h1 id="clang插件"><a href="#clang插件" class="headerlink" title="clang插件"></a>clang插件</h1><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="https://www.jianshu.com/p/d21c16b8953e" target="_blank" rel="noopener">AST语法树关键字解析</a><br><a href="https://github.com/CodeLittlePrince/blog/issues/19" target="_blank" rel="noopener">AST抽象语法树</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LLVM&quot;&gt;&lt;a href=&quot;#LLVM&quot; class=&quot;headerlink&quot; title=&quot;LLVM&quot;&gt;&lt;/a&gt;LLVM&lt;/h1&gt;&lt;p&gt;LLVM是架构编译器的框架系统，以C++编写而成，用于优化任意程序语言编写的程序的编译时间（compile-time）、链接
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>block</title>
    <link href="http://liujiaboy.github.io/2021/05/22/OC%E5%8E%9F%E7%90%86/block/"/>
    <id>http://liujiaboy.github.io/2021/05/22/OC%E5%8E%9F%E7%90%86/block/</id>
    <published>2021-05-22T08:56:34.000Z</published>
    <updated>2021-05-24T10:58:50.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Block的类型"><a href="#Block的类型" class="headerlink" title="Block的类型"></a>Block的类型</h1><p>Block分为 Malloc Block、 Stack Block、Global Block，但是怎么做区分呢？</p><p>在 ARC下:</p><ul><li><p>只要没有访问外部变量（或者访问的是全局变量，静态变量），就是全局block</p></li><li><p>如果访问了外部变量，在block声明的时候是stack block，在执行了copy之后就是malloc block</p></li><li><p>执行过copy操作的（全局block除外），是malloc block</p></li></ul><p>结论放这里，可以试一下哈。stack block在下面的章节中有提到过。iOS14之后对stack block做了处理。</p><h1 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">typedef void(^testBlock)(void);</span><br><span class="line">@interface BlockViewController ()</span><br><span class="line"></span><br><span class="line">@property (nonatomic, copy) testBlock block;</span><br><span class="line">@property (nonatomic, copy) NSString *name;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation BlockViewController</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    &#x2F;&#x2F; 循环引用</span><br><span class="line">    self.name &#x3D; @&quot;blcok demo&quot;;</span><br><span class="line">    [self blockDemo];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)blockDemo &#123;</span><br><span class="line">    self.block &#x3D; ^(void)&#123;</span><br><span class="line">        NSLog(@&quot;%@&quot;, self.name);</span><br><span class="line">    &#125;;</span><br><span class="line">    self.block();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)dealloc &#123;</span><br><span class="line">    NSLog(@&quot;dealloc 来了&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>从A页面进来<code>BlockViewController</code>，点击返回，就发现没有走dealloc，因为发生了循环引用。</p><p>在BlockVC中，self 持有 block， block持有self，就造成了循环引用。导致无法释放。</p><p>self -&gt; block -&gt; self<br>怎么解决这个问题，按照这个环的形成，正常来说应该有2种解决方案：</p><h2 id="打破第一个环，self-gt-block。"><a href="#打破第一个环，self-gt-block。" class="headerlink" title="打破第一个环，self -&gt; block。"></a>打破第一个环，self -&gt; block。</h2><pre><code>1. 现在是使用的copy修饰的block，如果换成weak修饰是否可以打破？2. 答案是不行的，因为使用weak修饰，没有被强持有，初始化之后就会被释放掉，block压根不会执行。3. 所以就只能使用第二种方案了。</code></pre><h2 id="打破第二个环，block-gt-self。"><a href="#打破第二个环，block-gt-self。" class="headerlink" title="打破第二个环，block -&gt; self。"></a>打破第二个环，block -&gt; self。</h2><h3 id="weak-strong-dance"><a href="#weak-strong-dance" class="headerlink" title="weak strong dance"></a>weak strong dance</h3><p>首先我们使用__weak来处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (void)blockDemo &#123;</span><br><span class="line">    __weak typeof(self) weakSelf &#x3D; self;</span><br><span class="line">    self.block &#x3D; ^(void)&#123;</span><br><span class="line">        NSLog(@&quot;%@&quot;, weakSelf);</span><br><span class="line">    &#125;;</span><br><span class="line">    self.block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>确实可以解决引用循环。但是会有一个问题，__weak持有的self，是存放在weak表中的，如果，self被释放之后，weakSelf也会被释放掉，整个weak表都会释放。所以当延后执行就会发生问题了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (void)blockDemo &#123;</span><br><span class="line">    __weak typeof(self) weakSelf &#x3D; self;</span><br><span class="line">    self.block &#x3D; ^(void)&#123;</span><br><span class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            NSLog(@&quot;%@&quot;, weakSelf.name);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    self.block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们延后2s打印数据，进来之后，直接退出，发现打印的就是空。这不符合我们的使用。所以就添加了__strong来修饰weak。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (void)blockDemo &#123;</span><br><span class="line">    __weak typeof(self) weakSelf &#x3D; self;</span><br><span class="line">    self.block &#x3D; ^(void) &#123;</span><br><span class="line">        __strong __typeof(weakSelf)strongSelf &#x3D; weakSelf; &#x2F;&#x2F; 可以释放 when</span><br><span class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            NSLog(@&quot;%@&quot;,strongSelf.name);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    self.block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候就没有问题了。</p><p>weak-strong-dance是系统自动帮助我们解决引用循环。</p><h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><p>我们只需要破坏掉block -&gt; self的这个环就可以了，处理weak-strong之外，还有另外一种方法，中介者模式。</p><p>中介者模式则需要我们手动解决循环引用。</p><ol><li><p>使用__block 创建一个变量，替代self</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (void)blockDemo &#123;</span><br><span class="line">    __block ViewController *vc &#x3D; self;</span><br><span class="line">    self.block &#x3D; ^(void)&#123;</span><br><span class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            NSLog(@&quot;%@&quot;,vc.name);</span><br><span class="line">            vc &#x3D; nil;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    self.block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 使用__block修饰代替self，然后在block执行完毕时，重新置空，也可以打破block持有self的环。</p></li><li><p>修改block，添加参数</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">typedef void(^testBlock)(ViewController *);</span><br><span class="line"></span><br><span class="line">- (void)blockDemo &#123;</span><br><span class="line">    self.block &#x3D; ^(ViewController *vc)&#123;</span><br><span class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            NSLog(@&quot;%@&quot;,vc.name);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    self.block(self);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 我们可以不让block持有self，可以把self对应的<code>BlockViewController</code>当做参数传到block中，这样也可以打破block持有self的环。</p></li></ol><p>当然还有其他的方式可以解决，毕竟怎么传值的方式有很多种，比如NSProxy等。</p><h1 id="Block-clang分析"><a href="#Block-clang分析" class="headerlink" title="Block clang分析"></a>Block clang分析</h1><p>我们在main.m文件中添加一个最简单的block，然后通过clang进行编译，查看main.cpp文件，看看block的一些底层原理。</p><p>我们直接创建一个main.m文件。不需要使用工程，当然也可以创建一个工程，在main.m中添加代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stdio.h&quot;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">    void (^block)() &#x3D; ^()&#123;</span><br><span class="line">        printf(&quot;hello block&quot;);</span><br><span class="line">    &#125;;</span><br><span class="line">    block();</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们使用clang命令编译该文件<br><code>clang -rewrite-objc main.c -o main.cpp</code></p><p>或者 使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -rewrite-objc -fobjc-arc -fobjc-runtime&#x3D;ios-14.0.0 -isysroot &#x2F;Applications&#x2F;Xcode.app&#x2F;Contents&#x2F;Developer&#x2F;Platforms&#x2F;iPhoneSimulator.platform&#x2F;Developer&#x2F;SDKs&#x2F;iPhoneSimulator14.3.sdk main.m</span><br></pre></td></tr></table></figure><p>我们通过main.cpp文件学习一下block</p><h2 id="没有外部变量的block"><a href="#没有外部变量的block" class="headerlink" title="没有外部变量的block"></a>没有外部变量的block</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">    void (*block)() &#x3D; ((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA));</span><br><span class="line">    ((void (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来很乱，我们简化一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">    &#x2F;&#x2F; block &#x3D; __main_block_impl_0(参数1，参数2)</span><br><span class="line">    void (*block)() &#x3D; __main_block_impl_0(__main_block_func_0, &amp;__main_block_desc_0_DATA);</span><br><span class="line">    &#x2F;&#x2F; block执行，调用方法，参数是block本身</span><br><span class="line">    block-&gt;FuncPtr(block);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先看一下<code>__main_block_impl_0</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">struct __main_block_impl_0 &#123;</span><br><span class="line">  struct __block_impl impl;</span><br><span class="line">  struct __main_block_desc_0* Desc;</span><br><span class="line">  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int flags&#x3D;0) &#123;</span><br><span class="line">    impl.isa &#x3D; &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags &#x3D; flags;</span><br><span class="line">    impl.FuncPtr &#x3D; fp;</span><br><span class="line">    Desc &#x3D; desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>__main_block_impl_0</code>即是一个结构体，又是一个<code>__main_block_impl_0()</code>方法。结构体内部还有两个结构体<code>impl</code>和<code>Desc</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">struct __block_impl &#123;</span><br><span class="line">  void *isa;        &#x2F;&#x2F; isa指针</span><br><span class="line">  int Flags;        &#x2F;&#x2F; flags</span><br><span class="line">  int Reserved;     &#x2F;&#x2F;</span><br><span class="line">  void *FuncPtr;    &#x2F;&#x2F; 函数</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">static struct __main_block_desc_0 &#123;</span><br><span class="line">  size_t reserved;      &#x2F;&#x2F;</span><br><span class="line">  size_t Block_size;    &#x2F;&#x2F; </span><br><span class="line">&#125; __main_block_desc_0_DATA &#x3D; &#123; 0, sizeof(struct __main_block_impl_0)&#125;;</span><br></pre></td></tr></table></figure><ul><li>impl.isa指针，指向的是stack block</li><li>impl.Flasg = 0。</li><li>impl.FuncPtr = fp，也就是<code>__main_block_func_0</code>。这种属于函数式，函数做为参数。</li><li>Desc = desc，&amp;__main_block_desc_0_DATA</li></ul><p>而<code>__main_block_func_0</code>这个方法长这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">    printf(&quot;hello block&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数有一个参数就是block本身。之所以需要当成参数传进来，是因为，方便block获取值来使用，在接下来的block引入外部变量一看就知道了。</p><h2 id="block引入外部变量"><a href="#block引入外部变量" class="headerlink" title="block引入外部变量"></a>block引入外部变量</h2><p>改变一些main.m，加入一个外部变量a。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int a &#x3D; 10;</span><br><span class="line">void (^block)() &#x3D; ^()&#123;</span><br><span class="line">    printf(&quot;hello block &#x3D; %d&quot;, a);</span><br><span class="line">&#125;;</span><br><span class="line">block();</span><br></pre></td></tr></table></figure><p>重新使用clang编译一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">    int a &#x3D; 10;</span><br><span class="line">    void (*block)() &#x3D; ((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, a));</span><br><span class="line">    ((void (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次简化一下clang编译之后的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a &#x3D; 10;</span><br><span class="line">void (*block)() &#x3D; __main_block_impl_0(__main_block_func_0, &amp;__main_block_desc_0_DATA, a);</span><br><span class="line">block-&gt;FuncPtr(block);</span><br></pre></td></tr></table></figure><p>当引入外部变量之后，<code>__main_block_impl_0()</code>变成了3个参数，变量a也被传进去了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">struct __main_block_impl_0 &#123;</span><br><span class="line">  struct __block_impl impl;</span><br><span class="line">  struct __main_block_desc_0* Desc;</span><br><span class="line">  int a; &#x2F;&#x2F; blcok内部多了一个a的变量</span><br><span class="line">  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _a, int flags&#x3D;0) : a(_a) &#123;    &#x2F;&#x2F; a进行直接赋值（c++函数）</span><br><span class="line">    impl.isa &#x3D; &amp;_NSConcreteStackBlock;  &#x2F;&#x2F; 还是stack block</span><br><span class="line">    impl.Flags &#x3D; flags;</span><br><span class="line">    impl.FuncPtr &#x3D; fp;</span><br><span class="line">    Desc &#x3D; desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">    &#x2F;&#x2F; a重新生成了一个变量，这个a和外界的变量是同一个值，但是是不同的两块地址，都指向10</span><br><span class="line">    int a &#x3D; __cself-&gt;a; &#x2F;&#x2F; bound by copy</span><br><span class="line">    printf(&quot;hello block &#x3D; %d&quot;, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当引入外部变量是，会在block的结构体中会增加一个与外界同名的变量。<br>在block函数内部，会重新生成一个变量a来指向block-&gt;a</p><p>这种操作，相当于 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int a &#x3D; 10; &#x2F;&#x2F; 相当于block的外部变量</span><br><span class="line">int b &#x3D; a;  &#x2F;&#x2F; b相当于block函数__main_block_func_0中生成的a</span><br><span class="line">printf(&quot;pa&#x3D;%p, pb&#x3D;%p&quot;, &amp;a, &amp;b);</span><br></pre></td></tr></table></figure><p>可以试一下，打印a和b的地址，是两个不同的栈空间，指向同一个值。</p><p><code>pa=0x7ffee2c23c1c, pb=0x7ffee2c23c18</code></p><p>这也就是我们没有办法在block内部操作外界变量的原因，在block内没有拿到外界的地址，而是重新生成了一份。</p><h2 id="block修饰的外部变量"><a href="#block修饰的外部变量" class="headerlink" title="__block修饰的外部变量"></a>__block修饰的外部变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__block int a &#x3D; 10;</span><br><span class="line">void (^block)() &#x3D; ^()&#123;</span><br><span class="line">    a++;</span><br><span class="line">    printf(&quot;hello block &#x3D; %d&quot;, a);</span><br><span class="line">&#125;;</span><br><span class="line">block();</span><br></pre></td></tr></table></figure><p>clang编译之后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">    &#x2F;&#x2F; 变量a做了处理，变成了__Block_byref_a_0这种结构体</span><br><span class="line">    __Block_byref_a_0 a &#x3D; &#123;(void*)0,</span><br><span class="line">        (__Block_byref_a_0 *)&amp;a,</span><br><span class="line">        0,</span><br><span class="line">        sizeof(__Block_byref_a_0),</span><br><span class="line">        10&#125;;</span><br><span class="line">    &#x2F;&#x2F; 函数中增加了参数 &amp;a，把地址传过去</span><br><span class="line">    void (*block)() &#x3D; __main_block_impl_0(__main_block_func_0, &amp;__main_block_desc_0_DATA, &amp;a, 570425344));</span><br><span class="line">    block)-&gt;FuncPtr(block);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们查看<code>__Block_byref_a_0</code>这个结构体，它的初始化方法和传的参数是一一对应的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">__Block_byref_a_0 a &#x3D; &#123;</span><br><span class="line">    (void*)0,                   &#x2F;&#x2F; __isa，因为是一个常量，所以没有指向</span><br><span class="line">    (__Block_byref_a_0 *)&amp;a,    &#x2F;&#x2F; __forwarding，指向block外部的变量a的地址</span><br><span class="line">    0,                          &#x2F;&#x2F; flags</span><br><span class="line">    sizeof(__Block_byref_a_0),  &#x2F;&#x2F; size</span><br><span class="line">    10                          &#x2F;&#x2F; block外部变量a的值</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct __Block_byref_a_0 &#123;</span><br><span class="line">  void *__isa;</span><br><span class="line">__Block_byref_a_0 *__forwarding;</span><br><span class="line"> int __flags;</span><br><span class="line"> int __size;</span><br><span class="line"> int a;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们在看block的结构体<code>__main_block_impl_0</code>。多了一个<code>__Block_byref_a_0</code>类型的对象。指向block外部生成的对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">struct __main_block_impl_0 &#123;</span><br><span class="line">  struct __block_impl impl;</span><br><span class="line">  struct __main_block_desc_0* Desc;</span><br><span class="line">  __Block_byref_a_0 *a; &#x2F;&#x2F; by ref</span><br><span class="line">  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_a_0 *_a, int flags&#x3D;0) : a(_a-&gt;__forwarding) &#123;</span><br><span class="line">    impl.isa &#x3D; &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags &#x3D; flags;</span><br><span class="line">    impl.FuncPtr &#x3D; fp;</span><br><span class="line">    Desc &#x3D; desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">    &#x2F;&#x2F; 指针指向，</span><br><span class="line">    __Block_byref_a_0 *a &#x3D; __cself-&gt;a; &#x2F;&#x2F; bound by ref</span><br><span class="line">    &#x2F;&#x2F; a的__forwarding指向的地址就是外界变量a的地址。</span><br><span class="line">    (a-&gt;__forwarding-&gt;a)++;</span><br><span class="line">    printf(&quot;hello block &#x3D; %d&quot;, (a-&gt;__forwarding-&gt;a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以这里在block内部执行a++，是可以的。</p><h2 id="block引用对象类型"><a href="#block引用对象类型" class="headerlink" title="block引用对象类型"></a>block引用对象类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">NSMutableArray *mArray &#x3D; [NSMutableArray array];</span><br><span class="line">Person *p &#x3D; [Person new];</span><br><span class="line">p.name &#x3D; @&quot;1&quot;;</span><br><span class="line">    </span><br><span class="line">Person *p2 &#x3D; [Person new];</span><br><span class="line">p2.name &#x3D; @&quot;2&quot;;</span><br><span class="line">[mArray addObject:p2];</span><br><span class="line">    </span><br><span class="line">void (^block)() &#x3D; ^()&#123;</span><br><span class="line">    NSLog(@&quot;p.name&#x3D;%@, mArray&#x3D;%@&quot;,p.name, mArray);</span><br><span class="line">&#125;;</span><br><span class="line">block();</span><br></pre></td></tr></table></figure><p>我们声明了两个变量，一个可变数组，一个person对象。clang编译一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 可变数组的初始化</span><br><span class="line">NSMutableArray *mArray &#x3D; objc_msgSend(objc_getClass(&quot;NSMutableArray&quot;), sel_registerName(&quot;array&quot;));</span><br><span class="line">&#x2F;&#x2F; person初始化</span><br><span class="line">Person *p &#x3D; objc_msgSend(objc_getClass(&quot;Person&quot;), sel_registerName(&quot;new&quot;));</span><br><span class="line">&#x2F;&#x2F; setName</span><br><span class="line">objc_msgSend(p, sel_registerName(&quot;setName:&quot;), (NSString *)&amp;__NSConstantStringImpl__var_folders_v1_79z2l10138z4855091f7nkh40000gn_T_main_4445e3_mi_0);</span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F; p2初始化</span><br><span class="line">Person *p2 &#x3D; objc_msgSend(objc_getClass(&quot;Person&quot;), sel_registerName(&quot;new&quot;));</span><br><span class="line">objc_msgSend(p2, sel_registerName(&quot;setName:&quot;), (NSString *)&amp;__NSConstantStringImpl__var_folders_v1_79z2l10138z4855091f7nkh40000gn_T_main_4445e3_mi_1);</span><br><span class="line">&#x2F;&#x2F; addObject:</span><br><span class="line">objc_msgSend(mArray, sel_registerName(&quot;addObject:&quot;), p2);</span><br><span class="line"></span><br><span class="line">void (*block)() &#x3D; __main_block_impl_0(__main_block_func_0, &amp;__main_block_desc_0_DATA, p, mArray, 570425344));</span><br><span class="line">block-&gt;FuncPtr(block);</span><br></pre></td></tr></table></figure><p>这里与使用<code>__block</code>修饰的变量不一样了，对象类型的与正常的初始化没有什么区别。<br>再看看block的结构体，以及调用的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">struct __main_block_impl_0 &#123;</span><br><span class="line">  struct __block_impl impl;</span><br><span class="line">  struct __main_block_desc_0* Desc;</span><br><span class="line">  Person *__strong p;   &#x2F;&#x2F; __strong 修饰</span><br><span class="line">  NSMutableArray *__strong mArray;</span><br><span class="line">  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, Person *__strong _p, NSMutableArray *__strong _mArray, int flags&#x3D;0) : p(_p), mArray(_mArray) &#123;</span><br><span class="line">    impl.isa &#x3D; &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags &#x3D; flags;</span><br><span class="line">    impl.FuncPtr &#x3D; fp;</span><br><span class="line">    Desc &#x3D; desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; block方法调用</span><br><span class="line">static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</span><br><span class="line">    Person *__strong p &#x3D; __cself-&gt;p; &#x2F;&#x2F; bound by copy</span><br><span class="line">    NSMutableArray *__strong mArray &#x3D; __cself-&gt;mArray; &#x2F;&#x2F; bound by copy</span><br><span class="line"></span><br><span class="line">    NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_v1_79z2l10138z4855091f7nkh40000gn_T_main_4445e3_mi_2,((NSString *(*)(id, SEL))(void *)objc_msgSend)((id)p, sel_registerName(&quot;name&quot;)), mArray);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>__main_block_impl_0</code>结构体内部，只是增加了两个用strong修饰符修饰的变量。<br><code>__main_block_func_0</code>方法中，使用两个对象时，重新生成了一个<code>__strong</code>修饰的变量。</p><p>这里需要注意的是，因为在block内部使用的是<code>__strong</code>修饰的变量。在赋值的时候，会进行深拷贝。注意也只是单层深拷贝，内部元素不会做拷贝。<br>也就是说，外部变量数组mArray，会被拷贝一份放在block内部。但是指向的都是相同的指针。数组中的元素没有变化。</p><p>我们添加一些打印信息，然后打印一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">NSMutableArray *mArray &#x3D; [NSMutableArray array];</span><br><span class="line">Person *p &#x3D; [Person new];</span><br><span class="line">p.name &#x3D; @&quot;1&quot;;</span><br><span class="line">    </span><br><span class="line">Person *p2 &#x3D; [Person new];</span><br><span class="line">p2.name &#x3D; @&quot;2&quot;;</span><br><span class="line">[mArray addObject:p2];</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;p&#x3D;%p, p&#x3D;%@&quot;, &amp;p, p);</span><br><span class="line">NSLog(@&quot;mArray&#x3D;%p, mArray&#x3D;%p, obj&#x3D;%@&quot;, &amp;mArray, mArray, mArray[0]);</span><br><span class="line">    </span><br><span class="line">void (^block)() &#x3D; ^()&#123;</span><br><span class="line">    </span><br><span class="line">    NSLog(@&quot;p1&#x3D;%p, p1&#x3D;%@&quot;, &amp;p, p);</span><br><span class="line">    NSLog(@&quot;mArray1&#x3D;%p, mArray1&#x3D;%p, obj1&#x3D;%@&quot;, &amp;mArray, mArray, mArray[0]);</span><br><span class="line">&#125;;</span><br><span class="line">block();</span><br></pre></td></tr></table></figure><p>运行一下，看下结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p&#x3D;0x7ffeeb105c10, p&#x3D;&lt;Person: 0x600000814090&gt;</span><br><span class="line">mArray&#x3D;0x7ffeeb105c18, mArray&#x3D;0x600000452a60, obj&#x3D;&lt;Person: 0x6000008140a0&gt;</span><br><span class="line">-------------- blcok 里</span><br><span class="line">p1&#x3D;0x60000041fb90, p1&#x3D;&lt;Person: 0x600000814090&gt;</span><br><span class="line">mArray1&#x3D;0x60000041fb98, mArray1&#x3D;0x600000452a60, obj1&#x3D;&lt;Person: 0x6000008140a0&gt;</span><br></pre></td></tr></table></figure><p>涉及到<a href="https://www.jianshu.com/p/df1579149c5c" target="_blank" rel="noopener">深拷贝和浅拷贝的处理可以看这一篇文章</a>。</p><h1 id="Block的底层原理"><a href="#Block的底层原理" class="headerlink" title="Block的底层原理"></a>Block的底层原理</h1><p>我们用block引入外部<code>__block</code>修饰的变量来做例子，看一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__block NSString *name &#x3D; [NSString stringWithFormat:@&quot;%@&quot;, @&quot;name&quot;];</span><br><span class="line">void(^block)(void) &#x3D; ^&#123;   &#x2F;&#x2F; 这一行打断点。运行</span><br><span class="line">    name &#x3D; @&quot;block&quot;;</span><br><span class="line">    NSLog(@&quot;name&#x3D;%@&quot;, name);</span><br><span class="line">&#125;;</span><br><span class="line">block();</span><br></pre></td></tr></table></figure><p>打上断点，打开汇编调试，运行一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x1002062b0 &lt;+100&gt;: nop    </span><br><span class="line">0x1002062b4 &lt;+104&gt;: ldr    x10, #0x1d4c              ; (void *)0x0000000253e91a20: _NSConcreteStackBlock</span><br><span class="line">0x1002062b8 &lt;+108&gt;: str    w9, [sp, #0x48]</span><br><span class="line">0x1002062bc &lt;+112&gt;: str    x10, [sp, #0x8]</span><br><span class="line">0x1002062c0 &lt;+116&gt;: nop    </span><br><span class="line">0x1002062c4 &lt;+120&gt;: ldr    d0, 0x100207f68</span><br><span class="line">0x1002062c8 &lt;+124&gt;: adr    x9, #0xa4                 ; __main_block_invoke at main.m:21</span><br></pre></td></tr></table></figure><p>其实汇编代码后面已经给了注释，我们也读一下这个x10寄存器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(lldb) register read x10</span><br><span class="line">     x10 &#x3D; 0x0000000253e91a20  libsystem_blocks.dylib&#96;_NSConcreteStackBlock</span><br><span class="line">(lldb)</span><br></pre></td></tr></table></figure><p>打印的是一个stack block，我们知道引入了外部变量，会执行block_copy操作，我们再添加一个<code>_block_copy</code>的符号断点，继续执行。</p><p>进来<code>_block_copy</code>之后，发现属于<code>libsystem_blocks.dylib</code>这个库，然后我们下载对应的源码。</p><p>我们想知道它在内部做了什么。在<code>_block_copy</code>的汇编代码中，在最后的return时，加一个断点。在看看寄存器x0的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(lldb) register read x0</span><br><span class="line">      x0 &#x3D; 0x00000002818c44e0</span><br><span class="line">(lldb) po 0x00000002818c44e0</span><br><span class="line">&lt;__NSMallocBlock__: 0x2818c44e0&gt;</span><br></pre></td></tr></table></figure><p>这个block从stack变成了malloc。接下来我们看看源码：</p><h2 id="Block-layout"><a href="#Block-layout" class="headerlink" title="Block_layout"></a>Block_layout</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct Block_layout &#123;</span><br><span class="line">    void *isa;      &#x2F;&#x2F; isa指针</span><br><span class="line">    volatile int32_t flags; &#x2F;&#x2F; contains ref count &#x2F;&#x2F; 标志状态，是一个枚举</span><br><span class="line">    int32_t reserved;   &#x2F;&#x2F; 保留字段，可能有其他的作用</span><br><span class="line">    BlockInvokeFunction invoke; &#x2F;&#x2F; 函数执行</span><br><span class="line">    struct Block_descriptor_1 *descriptor; &#x2F;&#x2F; block的描述信息，size</span><br><span class="line">    &#x2F;&#x2F; imported variables</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在<code>_Block_copy</code>的源码中，第一行就是<code>Block_layout</code>，这个才是block真正的样子，一个结构体。</p><p>我们在看看flags都有哪些值，表示什么意思：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">enum &#123;</span><br><span class="line">    BLOCK_DEALLOCATING &#x3D;      (0x0001),  &#x2F;&#x2F; runtime 标记正在释放</span><br><span class="line">    BLOCK_REFCOUNT_MASK &#x3D;     (0xfffe),  &#x2F;&#x2F; runtime 存储引用计数的值</span><br><span class="line">    BLOCK_NEEDS_FREE &#x3D;        (1 &lt;&lt; 24), &#x2F;&#x2F; runtime 是否增加或减少引用计数的值</span><br><span class="line">    BLOCK_HAS_COPY_DISPOSE &#x3D;  (1 &lt;&lt; 25), &#x2F;&#x2F; compiler 是否拥有拷贝辅助函数 确定block是否存在Block_descriptor_2这个参数</span><br><span class="line">    BLOCK_HAS_CTOR &#x3D;          (1 &lt;&lt; 26), &#x2F;&#x2F; compiler: helpers have C++ code 是否有C++析构函数</span><br><span class="line">    BLOCK_IS_GC &#x3D;             (1 &lt;&lt; 27), &#x2F;&#x2F; runtime 是否有垃圾回收</span><br><span class="line">    BLOCK_IS_GLOBAL &#x3D;         (1 &lt;&lt; 28), &#x2F;&#x2F; compiler 是否是全局block</span><br><span class="line">    BLOCK_USE_STRET &#x3D;         (1 &lt;&lt; 29), &#x2F;&#x2F; compiler: undefined if !BLOCK_HAS_SIGNATURE</span><br><span class="line">    BLOCK_HAS_SIGNATURE  &#x3D;    (1 &lt;&lt; 30), &#x2F;&#x2F; compiler 是否拥有签名</span><br><span class="line">    BLOCK_HAS_EXTENDED_LAYOUT&#x3D;(1 &lt;&lt; 31)  &#x2F;&#x2F; compiler 确定Block_descriptor_3中的layout参数</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 这个结构体是block_layout必有的变量</span><br><span class="line">#define BLOCK_DESCRIPTOR_1 1</span><br><span class="line">struct Block_descriptor_1 &#123;</span><br><span class="line">    uintptr_t reserved;</span><br><span class="line">    uintptr_t size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 可选 这两个是可选变量。</span><br><span class="line">#define BLOCK_DESCRIPTOR_2 1</span><br><span class="line">&#x2F;&#x2F; 当flag&#x3D;BLOCK_HAS_COPY_DISPOSE时才会存在</span><br><span class="line">struct Block_descriptor_2 &#123;</span><br><span class="line">    &#x2F;&#x2F; requires BLOCK_HAS_COPY_DISPOSE</span><br><span class="line">    BlockCopyFunction copy;</span><br><span class="line">    BlockDisposeFunction dispose;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define BLOCK_DESCRIPTOR_3 1</span><br><span class="line">&#x2F;&#x2F; 当flag&#x3D;BLOCK_HAS_SIGNATURE时才会存在</span><br><span class="line">struct Block_descriptor_3 &#123;</span><br><span class="line">    &#x2F;&#x2F; requires BLOCK_HAS_SIGNATURE</span><br><span class="line">    const char *signature;</span><br><span class="line">    const char *layout;     &#x2F;&#x2F; contents depend on BLOCK_HAS_EXTENDED_LAYOUT</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Block_descriptor_3当中存放的是block的签名信息。我们知道block是一个匿名函数，只要是一个函数就会有签名，比如<code>v8@?0</code>这种样式的就是签名。</p><p>其中<code>v</code>表示返回值是<code>void</code>，<code>@?</code>表示未知的对象，即为<code>block</code>。<br>这和方法签名是有所不同的，方法签名一般是<code>v@:</code>这样的形式(此处只说返回值为void的场景)，<code>:</code>表示<code>SEL</code>。</p><p>接下来，我们看下<code>_Block_copy</code>。</p><h2 id="Block-copy"><a href="#Block-copy" class="headerlink" title="_Block_copy"></a>_Block_copy</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">void *_Block_copy(const void *arg) &#123;</span><br><span class="line">    &#x2F;&#x2F; 创建一个新的block</span><br><span class="line">    struct Block_layout *aBlock;</span><br><span class="line">    &#x2F;&#x2F; arg就是栈上的block</span><br><span class="line">    if (!arg) return NULL;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 直接赋值，新创建的aBlock指向arg</span><br><span class="line">    aBlock &#x3D; (struct Block_layout *)arg;</span><br><span class="line">    &#x2F;&#x2F; 我们已经对flags的值做了解释，这里做判断，其实这里就是一个堆区的block</span><br><span class="line">    if (aBlock-&gt;flags &amp; BLOCK_NEEDS_FREE) &#123;</span><br><span class="line">        &#x2F;&#x2F; latches on high</span><br><span class="line">        &#x2F;&#x2F; 处理refcount相关（引用计数）</span><br><span class="line">        latching_incr_int(&amp;aBlock-&gt;flags);</span><br><span class="line">        &#x2F;&#x2F; 直接返回</span><br><span class="line">        return aBlock;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (aBlock-&gt;flags &amp; BLOCK_IS_GLOBAL) &#123;</span><br><span class="line">        &#x2F;&#x2F; 全局区block，直接返回</span><br><span class="line">        return aBlock; &#x2F;&#x2F; 不需要</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123; </span><br><span class="line">        &#x2F;&#x2F; 这里就只有可能是栈区的block</span><br><span class="line">        &#x2F;&#x2F; Its a stack block.  Make a copy.</span><br><span class="line">        &#x2F;&#x2F; 申请内存空间，大小与aBlock一样</span><br><span class="line">        struct Block_layout *result &#x3D;</span><br><span class="line">            (struct Block_layout *)malloc(aBlock-&gt;descriptor-&gt;size);</span><br><span class="line">        if (!result) return NULL;</span><br><span class="line">        &#x2F;&#x2F; 将栈区的数据copy到堆区</span><br><span class="line">        memmove(result, aBlock, aBlock-&gt;descriptor-&gt;size); &#x2F;&#x2F; bitcopy first</span><br><span class="line">#if __has_feature(ptrauth_calls)</span><br><span class="line">        &#x2F;&#x2F; Resign the invoke pointer as it uses address authentication.</span><br><span class="line">        &#x2F;&#x2F; 设置invoke，这样堆上的block调用才会与栈上一致</span><br><span class="line">        result-&gt;invoke &#x3D; aBlock-&gt;invoke;</span><br><span class="line">#endif</span><br><span class="line">        &#x2F;&#x2F; reset refcount</span><br><span class="line">        &#x2F;&#x2F; 重置refcount</span><br><span class="line">        result-&gt;flags &amp;&#x3D; ~(BLOCK_REFCOUNT_MASK|BLOCK_DEALLOCATING);    &#x2F;&#x2F; XXX not needed</span><br><span class="line">        &#x2F;&#x2F; 设置flags</span><br><span class="line">        result-&gt;flags |&#x3D; BLOCK_NEEDS_FREE | 2;  &#x2F;&#x2F; logical refcount 1</span><br><span class="line">        _Block_call_copy_helper(result, aBlock);</span><br><span class="line">        &#x2F;&#x2F; Set isa last so memory analysis tools see a fully-initialized object.</span><br><span class="line">        &#x2F;&#x2F; 设置isa的为malloc block</span><br><span class="line">        result-&gt;isa &#x3D; _NSConcreteMallocBlock;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 处理引用计数</span><br><span class="line">static int32_t latching_incr_int(volatile int32_t *where) &#123;</span><br><span class="line">    while (1) &#123;</span><br><span class="line">        int32_t old_value &#x3D; *where;</span><br><span class="line">        if ((old_value &amp; BLOCK_REFCOUNT_MASK) &#x3D;&#x3D; BLOCK_REFCOUNT_MASK) &#123;</span><br><span class="line">            return BLOCK_REFCOUNT_MASK;</span><br><span class="line">        &#125;</span><br><span class="line">        if (OSAtomicCompareAndSwapInt(old_value, old_value+2, where)) &#123;</span><br><span class="line">            return old_value+2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>block copy主要做了以下操作：</p><ul><li>malloc block处理引用计数，直接返回</li><li>global block不做任何处理</li><li>stack block<ol><li>申请内存空间</li><li>将栈区的数据拷贝到堆区</li><li>设置isa指向malloc block</li></ol></li></ul><h2 id="Block-byref"><a href="#Block-byref" class="headerlink" title="Block_byref"></a>Block_byref</h2><p>还记得上面的引用<code>__block</code>变量的block，clang编译之后的样子吗？改用NSString变量之后，又是另一种风味。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char * argv[]) &#123;</span><br><span class="line">    &#x2F;* @autoreleasepool *&#x2F; &#123; __AtAutoreleasePool __autoreleasepool; </span><br><span class="line">        __attribute__((__blocks__(byref))) __Block_byref_name_0 name &#x3D; &#123;</span><br><span class="line">            (void*)0,</span><br><span class="line">            (__Block_byref_name_0 *)&amp;name,</span><br><span class="line">            33554432,</span><br><span class="line">            sizeof(__Block_byref_name_0),</span><br><span class="line">            __Block_byref_id_object_copy_131,</span><br><span class="line">            __Block_byref_id_object_dispose_131,</span><br><span class="line">            ((NSString * _Nonnull (*)(id, SEL, NSString * _Nonnull, ...))(void *)objc_msgSend)((id)objc_getClass(&quot;NSString&quot;), sel_registerName(&quot;stringWithFormat:&quot;), (NSString *)&amp;__NSConstantStringImpl__var_folders_nw_tqjtztpn1yq6w0_wmgdvn_vc0000gn_T_main_41740c_mi_0, (NSString *)&amp;__NSConstantStringImpl__var_folders_nw_tqjtztpn1yq6w0_wmgdvn_vc0000gn_T_main_41740c_mi_1)</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        void(*myBlock)(void) &#x3D; ((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_name_0 *)&amp;name, 570425344));</span><br><span class="line">        ((void (*)(__block_impl *))((__block_impl *)myBlock)-&gt;FuncPtr)((__block_impl *)myBlock);</span><br><span class="line"></span><br><span class="line">        return UIApplicationMain(argc, argv, __null, NSStringFromClass(((Class (*)(id, SEL))(void *)objc_msgSend)((id)objc_getClass(&quot;AppDelegate&quot;), sel_registerName(&quot;class&quot;))));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct __Block_byref_name_0 &#123;</span><br><span class="line">    void *__isa;                                        &#x2F;&#x2F; 8</span><br><span class="line">    __Block_byref_name_0 *__forwarding;                 &#x2F;&#x2F; 8</span><br><span class="line">    int __flags;                                        &#x2F;&#x2F; 4</span><br><span class="line">    int __size;                                         &#x2F;&#x2F; 4</span><br><span class="line">    void (*__Block_byref_id_object_copy)(void*, void*); &#x2F;&#x2F; 8</span><br><span class="line">    void (*__Block_byref_id_object_dispose)(void*);     &#x2F;&#x2F; 8</span><br><span class="line">    NSString *name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>block修饰的name对象被转化成了一个</strong>Block_byref_name_0的结构体，在源码中也有一个<code>Block_byref</code>与之对应。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">struct Block_byref &#123;</span><br><span class="line">    void *isa;</span><br><span class="line">    struct Block_byref *forwarding;</span><br><span class="line">    volatile int32_t flags; &#x2F;&#x2F; contains ref count</span><br><span class="line">    uint32_t size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 可选变量</span><br><span class="line">struct Block_byref_2 &#123;</span><br><span class="line">    &#x2F;&#x2F; requires BLOCK_BYREF_HAS_COPY_DISPOSE</span><br><span class="line">    BlockByrefKeepFunction byref_keep;</span><br><span class="line">    BlockByrefDestroyFunction byref_destroy;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 可选变量</span><br><span class="line">struct Block_byref_3 &#123;</span><br><span class="line">    &#x2F;&#x2F; requires BLOCK_BYREF_LAYOUT_EXTENDED</span><br><span class="line">    const char *layout;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们把<code>__Block_byref_name_0</code>和<code>Block_byref</code>放在一起比较一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__Block_byref_name_0                -&gt;  Block_byref</span><br><span class="line">(void*)0,                           -&gt;  isa</span><br><span class="line">(__Block_byref_name_0 *)&amp;name,      -&gt;  forwarding</span><br><span class="line">33554432,                           -&gt;  flags</span><br><span class="line">sizeof(__Block_byref_name_0),       -&gt;  size</span><br><span class="line">__Block_byref_id_object_copy_131,   -&gt;  byref_kep</span><br><span class="line">__Block_byref_id_object_dispose_131,-&gt;  byref_destroy</span><br></pre></td></tr></table></figure><p>在上面的章节中，有一个点没有说，这里再重新说一下，这个外界的变量是怎么被拷贝进block里头的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void(*myBlock)(void) &#x3D; ((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_name_0 *)&amp;name, 570425344));</span><br></pre></td></tr></table></figure><p>在block声明的时候，还记得吧，其中有<code>__main_block_desc_0_DATA</code>这个参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static struct __main_block_desc_0 &#123;</span><br><span class="line">  size_t reserved;</span><br><span class="line">  size_t Block_size;</span><br><span class="line">  void (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);</span><br><span class="line">  void (*dispose)(struct __main_block_impl_0*);</span><br><span class="line">&#125; __main_block_desc_0_DATA &#x3D; &#123; 0, sizeof(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0&#125;;</span><br></pre></td></tr></table></figure><p><code>__main_block_desc_0_DATA</code>的生成也是通过方法调用来产生的，而变量的拷贝就是发生在这里<code>__main_block_copy_0</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static void __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) &#123;</span><br><span class="line">    _Block_object_assign((void*)&amp;dst-&gt;name, (void*)src-&gt;name, 8&#x2F;*BLOCK_FIELD_IS_BYREF*&#x2F;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来看看<code>_Block_object_assign</code>是怎么实现的，在源码里头：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;_Block_object_assign有三个参数，第三个参数与下面的枚举值相对应。</span><br><span class="line">enum &#123;</span><br><span class="line">    BLOCK_FIELD_IS_OBJECT  &#x3D;  3,  &#x2F;&#x2F; 截获的是对象 __attribute__((NSObject)), block, ...</span><br><span class="line">    BLOCK_FIELD_IS_BLOCK   &#x3D;  7,  &#x2F;&#x2F; 截获的是block变量（不是block的参数）</span><br><span class="line">    BLOCK_FIELD_IS_BYREF    &#x3D;  8,  &#x2F;&#x2F; 截获的是__block修饰的对象</span><br><span class="line">    BLOCK_FIELD_IS_WEAK     &#x3D; 16,  &#x2F;&#x2F; 截获的是__weak修饰的对象</span><br><span class="line">    BLOCK_BYREF_CALLER     &#x3D; 128, &#x2F;&#x2F; called from __block (byref) copy&#x2F;dispose support routines.</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 根据传入的对象的类型</span><br><span class="line">void _Block_object_assign(void *destArg, const void *object, const int flags) &#123;</span><br><span class="line">    const void **dest &#x3D; (const void **)destArg;</span><br><span class="line">    switch (os_assumes(flags &amp; BLOCK_ALL_COPY_DISPOSE_FLAGS)) &#123;</span><br><span class="line">        &#x2F;&#x2F; 对象类型</span><br><span class="line">        case BLOCK_FIELD_IS_OBJECT:</span><br><span class="line">            &#x2F;&#x2F; retatin count +1，</span><br><span class="line">            _Block_retain_object(object);</span><br><span class="line">            &#x2F;&#x2F; 持有object，多了一次强引用</span><br><span class="line">            *dest &#x3D; object;</span><br><span class="line">            break;</span><br><span class="line">        &#x2F;&#x2F; block</span><br><span class="line">        case BLOCK_FIELD_IS_BLOCK:</span><br><span class="line">            &#x2F;&#x2F; 把block从栈上拷贝到堆上，详情看上方_Block_copy的分析，只是参数变化</span><br><span class="line">            *dest &#x3D; _Block_copy(object);</span><br><span class="line">            break;</span><br><span class="line">        </span><br><span class="line">        case BLOCK_FIELD_IS_BYREF | BLOCK_FIELD_IS_WEAK:</span><br><span class="line">        &#x2F;&#x2F; __block修饰的变量</span><br><span class="line">        case BLOCK_FIELD_IS_BYREF:</span><br><span class="line">            *dest &#x3D; _Block_byref_copy(object);</span><br><span class="line">            break;</span><br><span class="line">        </span><br><span class="line">        case BLOCK_BYREF_CALLER | BLOCK_FIELD_IS_OBJECT:</span><br><span class="line">        case BLOCK_BYREF_CALLER | BLOCK_FIELD_IS_BLOCK:</span><br><span class="line">            *dest &#x3D; object;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case BLOCK_BYREF_CALLER | BLOCK_FIELD_IS_OBJECT | BLOCK_FIELD_IS_WEAK:</span><br><span class="line">        case BLOCK_BYREF_CALLER | BLOCK_FIELD_IS_BLOCK  | BLOCK_FIELD_IS_WEAK:</span><br><span class="line">            *dest &#x3D; object;</span><br><span class="line">            break;</span><br><span class="line">        </span><br><span class="line">        default:</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="block修饰的变量拷贝"><a href="#block修饰的变量拷贝" class="headerlink" title="__block修饰的变量拷贝"></a>__block修饰的变量拷贝</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">static struct Block_byref *_Block_byref_copy(const void *arg) &#123;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; Block_byref  结构体</span><br><span class="line">    struct Block_byref *src &#x3D; (struct Block_byref *)arg;</span><br><span class="line"></span><br><span class="line">    if ((src-&gt;forwarding-&gt;flags &amp; BLOCK_REFCOUNT_MASK) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        &#x2F;&#x2F; src points to stack</span><br><span class="line">        &#x2F;&#x2F; 创建新值，申请内存空间</span><br><span class="line">        struct Block_byref *copy &#x3D; (struct Block_byref *)malloc(src-&gt;size);</span><br><span class="line">        copy-&gt;isa &#x3D; NULL;</span><br><span class="line">        &#x2F;&#x2F; byref value 4 is logical refcount of 2: one for caller, one for stack</span><br><span class="line">        &#x2F;&#x2F; 设置flags</span><br><span class="line">        copy-&gt;flags &#x3D; src-&gt;flags | BLOCK_BYREF_NEEDS_FREE | 4;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; copy的forwarding指向自己，自己在堆里</span><br><span class="line">        copy-&gt;forwarding &#x3D; copy; &#x2F;&#x2F; patch heap copy to point to itself</span><br><span class="line">        &#x2F;&#x2F; src是老值，指向的也是自己。指向的是堆，所以block内部改变，外部也会改变</span><br><span class="line">        src-&gt;forwarding &#x3D; copy;  &#x2F;&#x2F; patch stack to point to heap copy</span><br><span class="line">        </span><br><span class="line">        copy-&gt;size &#x3D; src-&gt;size;</span><br><span class="line"></span><br><span class="line">        if (src-&gt;flags &amp; BLOCK_BYREF_HAS_COPY_DISPOSE) &#123;</span><br><span class="line">            &#x2F;&#x2F; Trust copy helper to copy everything of interest</span><br><span class="line">            &#x2F;&#x2F; If more than one field shows up in a byref block this is wrong XXX</span><br><span class="line">            &#x2F;&#x2F; 通过内存偏移，获取Block_byref_2</span><br><span class="line">            struct Block_byref_2 *src2 &#x3D; (struct Block_byref_2 *)(src+1);</span><br><span class="line">            struct Block_byref_2 *copy2 &#x3D; (struct Block_byref_2 *)(copy+1);</span><br><span class="line">            &#x2F;&#x2F; 存值</span><br><span class="line">            copy2-&gt;byref_keep &#x3D; src2-&gt;byref_keep;</span><br><span class="line">            copy2-&gt;byref_destroy &#x3D; src2-&gt;byref_destroy;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 这里会判断，有没有Block_byref_3，有的话也是通过内存地址偏移来获取</span><br><span class="line">            if (src-&gt;flags &amp; BLOCK_BYREF_LAYOUT_EXTENDED) &#123;</span><br><span class="line">                struct Block_byref_3 *src3 &#x3D; (struct Block_byref_3 *)(src2+1);</span><br><span class="line">                struct Block_byref_3 *copy3 &#x3D; (struct Block_byref_3*)(copy2+1);</span><br><span class="line">                copy3-&gt;layout &#x3D; src3-&gt;layout;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 执行拷贝__Block_byref_id_object_copy</span><br><span class="line">            (*src2-&gt;byref_keep)(copy, src);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            &#x2F;&#x2F; Bitwise copy.</span><br><span class="line">            &#x2F;&#x2F; This copy includes Block_byref_3, if any.</span><br><span class="line">            memmove(copy+1, src+1, src-&gt;size - sizeof(*src));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; already copied to heap</span><br><span class="line">    else if ((src-&gt;forwarding-&gt;flags &amp; BLOCK_BYREF_NEEDS_FREE) &#x3D;&#x3D; BLOCK_BYREF_NEEDS_FREE) &#123;</span><br><span class="line">        latching_incr_int(&amp;src-&gt;forwarding-&gt;flags);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return src-&gt;forwarding;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在新生成的结构体<code>__Block_byref_name_0</code>中，还有一个名为<code>__Block_byref_id_object_copy_131</code>的方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static void __Block_byref_id_object_copy_131(void *dst, void *src) &#123;</span><br><span class="line"> _Block_object_assign((char*)dst + 40, *(void * *) ((char*)src + 40), 131);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是根据地址便宜来获取name的值，这里偏移的是40个字节。看一下<code>__Block_byref_name_0</code>中的变量，name上边的所有变量加起来所占的内存是40个字节。所以这里是对name做了一次拷贝。</p><p>对于<code>__block</code>修饰的变量可以在block内部可以修改，主要是因为：</p><ol><li>block从栈区，拷贝到堆区</li><li><strong>block修饰的变量<code>name</code>，会生成一个新的结构体`</strong>Block_byref_name_0`，拷贝到blcok内部</li><li>对元类的值进行拷贝，并修改原来值的指向（指向为block内部值）</li></ol><h3 id="block释放"><a href="#block释放" class="headerlink" title="block释放"></a>block释放</h3><p><code>__main_block_desc_0_DATA</code>中还有另外一个参数<code>__main_block_dispose_0</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static void __main_block_dispose_0(struct __main_block_impl_0*src) &#123;</span><br><span class="line">    _Block_object_dispose((void*)src-&gt;lg_name, 8&#x2F;*BLOCK_FIELD_IS_BYREF*&#x2F;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看一下<code>_Block_object_dispose</code>是怎么释放的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">void _Block_object_dispose(const void *object, const int flags) &#123;</span><br><span class="line">    switch (os_assumes(flags &amp; BLOCK_ALL_COPY_DISPOSE_FLAGS)) &#123;</span><br><span class="line">        case BLOCK_FIELD_IS_BYREF | BLOCK_FIELD_IS_WEAK:</span><br><span class="line">        &#x2F;&#x2F; 如果是__block修饰的，使用_Block_byref_release</span><br><span class="line">        case BLOCK_FIELD_IS_BYREF:</span><br><span class="line">            &#x2F;&#x2F; get rid of the __block data structure held in a Block</span><br><span class="line">            _Block_byref_release(object);</span><br><span class="line">        break;</span><br><span class="line">        &#x2F;&#x2F; block</span><br><span class="line">        case BLOCK_FIELD_IS_BLOCK:</span><br><span class="line">            _Block_release(object);</span><br><span class="line">        break;</span><br><span class="line">      &#x2F;&#x2F; 对象类型的变量</span><br><span class="line">      case BLOCK_FIELD_IS_OBJECT:</span><br><span class="line">            &#x2F;&#x2F; 调用系统方法，不用处理</span><br><span class="line">            _Block_release_object(object);</span><br><span class="line">        break;</span><br><span class="line">      case BLOCK_BYREF_CALLER | BLOCK_FIELD_IS_OBJECT:</span><br><span class="line">      case BLOCK_BYREF_CALLER | BLOCK_FIELD_IS_BLOCK:</span><br><span class="line">      case BLOCK_BYREF_CALLER | BLOCK_FIELD_IS_OBJECT | BLOCK_FIELD_IS_WEAK:</span><br><span class="line">      case BLOCK_BYREF_CALLER | BLOCK_FIELD_IS_BLOCK  | BLOCK_FIELD_IS_WEAK:</span><br><span class="line">        break;</span><br><span class="line">      default:</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_Block_byref_release</code>的释放，消耗新创建的Block_byref结构体。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">static void _Block_byref_release(const void *arg) &#123;</span><br><span class="line">    struct Block_byref *byref &#x3D; (struct Block_byref *)arg;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; dereference the forwarding pointer since the compiler isn&#39;t doing this anymore (ever?)</span><br><span class="line">    byref &#x3D; byref-&gt;forwarding;</span><br><span class="line">    </span><br><span class="line">    if (byref-&gt;flags &amp; BLOCK_BYREF_NEEDS_FREE) &#123;</span><br><span class="line">        int32_t refcount &#x3D; byref-&gt;flags &amp; BLOCK_REFCOUNT_MASK;</span><br><span class="line">        os_assert(refcount);</span><br><span class="line">        if (latching_decr_int_should_deallocate(&amp;byref-&gt;flags)) &#123;</span><br><span class="line">            if (byref-&gt;flags &amp; BLOCK_BYREF_HAS_COPY_DISPOSE) &#123;</span><br><span class="line">                struct Block_byref_2 *byref2 &#x3D; (struct Block_byref_2 *)(byref+1);</span><br><span class="line">                (*byref2-&gt;byref_destroy)(byref);</span><br><span class="line">            &#125;</span><br><span class="line">            free(byref);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>block的释放</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void _Block_release(const void *arg) &#123;</span><br><span class="line">    struct Block_layout *aBlock &#x3D; (struct Block_layout *)arg;</span><br><span class="line">    if (!aBlock) return;</span><br><span class="line">    &#x2F;&#x2F; 全局block不用释放</span><br><span class="line">    if (aBlock-&gt;flags &amp; BLOCK_IS_GLOBAL) return;</span><br><span class="line">    &#x2F;&#x2F; 还有引用计数则没办法释放</span><br><span class="line">    if (! (aBlock-&gt;flags &amp; BLOCK_NEEDS_FREE)) return;</span><br><span class="line">    </span><br><span class="line">    if (latching_decr_int_should_deallocate(&amp;aBlock-&gt;flags)) &#123;</span><br><span class="line">        _Block_call_dispose_helper(aBlock);</span><br><span class="line">        _Block_destructInstance(aBlock);</span><br><span class="line">        free(aBlock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>block的分类：global block、stack block，malloc block</li><li>block的的内部实现</li><li>block调用外部变量</li><li>__block修饰的变量</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Block的类型&quot;&gt;&lt;a href=&quot;#Block的类型&quot; class=&quot;headerlink&quot; title=&quot;Block的类型&quot;&gt;&lt;/a&gt;Block的类型&lt;/h1&gt;&lt;p&gt;Block分为 Malloc Block、 Stack Block、Global Block
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
      <category term="block" scheme="http://liujiaboy.github.io/tags/block/"/>
    
  </entry>
  
  <entry>
    <title>应用重签名</title>
    <link href="http://liujiaboy.github.io/2021/05/21/%E9%80%86%E5%90%91/nx-3-%E5%BA%94%E7%94%A8%E9%87%8D%E7%AD%BE%E5%90%8D/"/>
    <id>http://liujiaboy.github.io/2021/05/21/%E9%80%86%E5%90%91/nx-3-%E5%BA%94%E7%94%A8%E9%87%8D%E7%AD%BE%E5%90%8D/</id>
    <published>2021-05-21T07:42:58.000Z</published>
    <updated>2021-05-31T02:29:59.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="应用重签名"><a href="#应用重签名" class="headerlink" title="应用重签名"></a>应用重签名</h1><h2 id="codesign-命令"><a href="#codesign-命令" class="headerlink" title="codesign 命令"></a>codesign 命令</h2><p>Xcode提供了签名工具<code>codesign</code>，我们可以通过几个命令iu可以完成重签名。</p><ul><li><code>codesign -vv -d [WeChat.app]</code> 查看签名</li><li><code>$ security find-identity -v -p codesigning</code> 查看钥匙串力可以签名的证书</li><li><code>$ Codesign –fs [证书串] [filename]</code> 强制替换签名</li><li><code>$ Chmod +x [filename]</code> 给文件添加可执行权限权限</li><li><code>$ security cms -D -i ../embedded.mobileprovision</code> 查看描述文件</li><li><code>$ codesign -fs [证书串] --no-strict --entitlements=权限文件.plist APP包</code></li><li><code>$ Zip –ry [file] [outfile] 将file压缩为outfile</code></li><li><code>$ otool -l [WeChat]</code> 查看mach-O(可执行)文件， <code>cryptid</code>等于0说明是砸壳之后的（没有加密），等于1说明是加密的</li><li><code>$ otool -l WeChat &gt; ~/Desktop/123.txt</code> 把文件导出到123.txt中</li></ul><h2 id="codesign-签名步奏"><a href="#codesign-签名步奏" class="headerlink" title="codesign 签名步奏"></a>codesign 签名步奏</h2><p>首先我们需要拿到砸壳之后的<code>.ipa</code>文件，然后对这个文件解压缩，在<code>Payload</code>文件夹下看到对应的app文件。</p><h3 id="查看签名"><a href="#查看签名" class="headerlink" title="查看签名"></a>查看签名</h3><p> <code>$ codesign -vv -d WeChat.app</code> </p><p> 如果没有重签名，使用的证书还是微信自己的证书。</p><h3 id="查看本地钥匙串中可用的证书"><a href="#查看本地钥匙串中可用的证书" class="headerlink" title="查看本地钥匙串中可用的证书"></a>查看本地钥匙串中可用的证书</h3><p> <code>$ security find-identity -v -p codesigning</code></p><p> 会列出钥匙串中可用的证书。</p><h3 id="强制签名"><a href="#强制签名" class="headerlink" title="强制签名"></a>强制签名</h3><p>选中<code>WeChat.app</code>，显示包内容</p><p>app包中主要有3个文件需要处理，我们需要对这3个文件做重签名：</p><ol><li>是资源文件的签名</li><li>Mach-O文件的签名</li><li>Framework的签名</li></ol><p>但是内部的<code>PlugIns</code>文件夹中的插件，<code>watch</code>文件夹下的内容，使用免费的证书是无法签名的。可以删除掉。</p><p>然后我们先对Framework文件夹下的内容签名：</p><p><code>$ codesign -fs &quot;Apple Development: xxx&quot; andromeda.framework</code></p><p>所有的framework都要重签。</p><h3 id="创建新的描述文件"><a href="#创建新的描述文件" class="headerlink" title="创建新的描述文件"></a>创建新的描述文件</h3><ol><li>Xcode新建工程，命名为<code>WeChat</code>,选择对framework重签名使用的证书。然后在手机上运行一下。</li><li>在工程中选中<code>Products</code>,打开<code>WeChat.app</code>所在的文件夹。然后显示包内容，找到<code>embedded.mobileprovision</code>这个描述文件，复制到<code>WeChat.app</code>内。</li><li>添加了描述文件之后，还需要修改<code>info.plist</code>的bundle id，因为描述文件中是有bundle id信息的。</li></ol><h3 id="更改权限"><a href="#更改权限" class="headerlink" title="更改权限"></a>更改权限</h3><p>接下来我们看看<code>embedded.mobileprovision</code>的内容，因为我们需要拿到它的权限部分对<code>WeChat</code>重签名。</p><ol><li><code>$ security cms -D -i embedded.mobileprovision</code>查看<code>embedded.mobileprovision</code>的内容，找到<code>Entitlements</code>这个key对应的内容（注意拷贝时不需要key），复制到一个新的plist文件中，命名为<code>Entitlements</code>。</li><li>然后把这个<code>Entitlements.plist</code>文件拷贝到<code>Payload</code>文件夹下，与<code>WeChat.app</code>同级。</li><li><code>$ ls -l WeChat</code>查看Mach-O文件是否有可以执行权限，没有的话使用命令<code>$ chmod a+x WeChat</code>设置可执行权限。</li></ol><h3 id="app重签"><a href="#app重签" class="headerlink" title="app重签"></a>app重签</h3><p>对APP重签，其实就是对内部Mach-O重签。<br>退回到<code>Payload</code>文件夹下，对<code>WeChat.app</code>签名：</p><p><code>$ codesign -fs &quot;Apple Development: xxx&quot; --no-strict --entitlements=Entitlements.plist WeChat.app</code></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用Xcode - Window - Devices and Simulators，点击”+“，选择对应的app安装，安装完成之后，点击就能直接运行了。</p><blockquote><p>注意：别登录，容易被封号，我们只是完成了万里长征的第一步而已。</p></blockquote><p>这就是通过命令行使用<code>codesign</code>进行重签名的流程。</p><h1 id="Xcode重签名"><a href="#Xcode重签名" class="headerlink" title="Xcode重签名"></a>Xcode重签名</h1><p>我们对拿到的砸壳之后ipa文件进行解压缩，打开<code>Payload</code>文件夹：</p><ol><li>删除<code>PlugIns</code>、<code>Waatch</code>文件夹。</li><li>使用命令行对Framework重签名。</li><li>创建并运行一个空项目工程，项目名字需要与重签的<code>xx.app</code>文件名一致。并运行到手机上。</li><li>修改xx.app内部的info.plist文件下的bundle id，与新工程一致。</li><li>在工程下选择<code>Products</code>，打开<code>xx.app</code>所在的文件夹，把第4步修改后的app复制过来，直接替换<code>xx.app</code>。</li><li>直接运行。</li></ol><h1 id="codesign-与-Xcode签名比较"><a href="#codesign-与-Xcode签名比较" class="headerlink" title="codesign 与 Xcode签名比较"></a>codesign 与 Xcode签名比较</h1><p>与<code>codesign</code>签名相比，直接使用Xcode重签名少了好几步：</p><ol><li>省略了添加描述文件</li><li>省略了添加描述文件的权限</li><li>省略了通过权限重签app</li></ol><h1 id="Shell-重签"><a href="#Shell-重签" class="headerlink" title="Shell 重签"></a>Shell 重签</h1><p>shell是一种特殊的交互式工具，它为用户提供了启动程序、管理文件系统中文件以及运行在系统上的进程的途径。<br>Shell一般是指命令行工具。它允许你输入文本命令，然后解释命令，并在内核中执行。<br>Shell脚本，也就是用各类命令预先放入到一个文本文件中，方便一次性执行的一个脚本文件。</p><blockquote><p>iTerm 切换bash和zsh的<br><code>$ chsh -s /bin/bash</code><br><code>$ chsh -s /bin/zsh</code></p></blockquote><h2 id="文件类型与权限"><a href="#文件类型与权限" class="headerlink" title="文件类型与权限"></a>文件类型与权限</h2><p>可以通过<code>$ls -l</code>命令查看权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drwxr-xr-x  5  Alan  staff      160    10 19 2015  Public</span><br><span class="line">[文件权限]  连接 所有者 所属组     文件大小  最后修改时间 文件名称</span><br></pre></td></tr></table></figure><p>d：文件类型 表示目录。-表示 文件<br>前3位 rwx：文件所有者（user）的权限<br>中3位 r-x：这一组其他用户（group）的权限<br>后3为 r-x：非本组的用户（other）的权限，</p><table><thead><tr><th align="center">缩写</th><th>释义</th><th>二进制</th><th>十进制</th></tr></thead><tbody><tr><td align="center">r</td><td>read 读</td><td>0100</td><td>4</td></tr><tr><td align="center">w</td><td>write 写</td><td>0010</td><td>2</td></tr><tr><td align="center">x</td><td>execut 可执行</td><td>0001</td><td>1</td></tr></tbody></table><p>我们经常会用的一个命令 <code>$chmod 755 filename</code>来改变file的权限</p><p>755表示的就是权限，分别为user、group、other的权限。<br>7： 4 + 2 + 1 = r + w + x<br>5： 4 + 1     = r + x</p><p>也可以使用符号类型来表示：</p><p><code>$ chmod [u、g、o、a][+(加入)、-(除去)、=(设置)] [r、w、x] 文件名称</code><br>u：user<br>g：group<br>0：other<br>a：all</p><p>例如 <code>$ chmod a+x 123.txt</code> 表示所有人都有可执行权限。</p><h2 id="shell重签名"><a href="#shell重签名" class="headerlink" title="shell重签名"></a>shell重签名</h2><p>就是在Xcode中，运行时执行shell脚本，自动帮我们处理签名的过程。在写shell脚本的时候，有以下几个步奏：</p><ol><li>解压ipa文件到Temp文件夹下</li><li>将解压出来的app拷贝到工程下</li><li>删除PlugIns和Watch相关的文件</li><li>更新info.plist文件中bundle id</li><li>给mach-o文件执行权限</li><li>重签名framework</li><li>替换签名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"># $&#123;SRCROOT&#125; 它是工程文件所在的目录</span><br><span class="line">TEMP_PATH&#x3D;&quot;$&#123;SRCROOT&#125;&#x2F;Temp&quot;</span><br><span class="line">#资源文件夹，我们提前在工程目录下新建一个APP文件夹，里面放ipa包</span><br><span class="line">ASSETS_PATH&#x3D;&quot;$&#123;SRCROOT&#125;&#x2F;APP&quot;</span><br><span class="line">#目标ipa包路径</span><br><span class="line">TARGET_IPA_PATH&#x3D;&quot;$&#123;ASSETS_PATH&#125;&#x2F;*.ipa&quot;</span><br><span class="line">#清空Temp文件夹</span><br><span class="line">rm -rf &quot;$&#123;SRCROOT&#125;&#x2F;Temp&quot;</span><br><span class="line">mkdir -p &quot;$&#123;SRCROOT&#125;&#x2F;Temp&quot;</span><br><span class="line"></span><br><span class="line">#----------------------------------------</span><br><span class="line"># 1. 解压IPA到Temp下</span><br><span class="line">unzip -oqq &quot;$TARGET_IPA_PATH&quot; -d &quot;$TEMP_PATH&quot;</span><br><span class="line"># 拿到解压的临时的APP的路径</span><br><span class="line">TEMP_APP_PATH&#x3D;$(set -- &quot;$TEMP_PATH&#x2F;Payload&#x2F;&quot;*.app;echo &quot;$1&quot;)</span><br><span class="line"># echo &quot;路径是:$TEMP_APP_PATH&quot;</span><br><span class="line"></span><br><span class="line">#----------------------------------------</span><br><span class="line"># 2. 将解压出来的.app拷贝进入工程下</span><br><span class="line"># BUILT_PRODUCTS_DIR 工程生成的APP包的路径</span><br><span class="line"># TARGET_NAME target名称</span><br><span class="line">TARGET_APP_PATH&#x3D;&quot;$BUILT_PRODUCTS_DIR&#x2F;$TARGET_NAME.app&quot;</span><br><span class="line">echo &quot;app路径:$TARGET_APP_PATH&quot;</span><br><span class="line"></span><br><span class="line">rm -rf &quot;$TARGET_APP_PATH&quot;</span><br><span class="line">mkdir -p &quot;$TARGET_APP_PATH&quot;</span><br><span class="line">cp -rf &quot;$TEMP_APP_PATH&#x2F;&quot; &quot;$TARGET_APP_PATH&quot;</span><br><span class="line"></span><br><span class="line">#----------------------------------------</span><br><span class="line"># 3. 删除extension和WatchAPP.个人证书没法签名Extention</span><br><span class="line">rm -rf &quot;$TARGET_APP_PATH&#x2F;PlugIns&quot;</span><br><span class="line">rm -rf &quot;$TARGET_APP_PATH&#x2F;Watch&quot;</span><br><span class="line"></span><br><span class="line">#----------------------------------------</span><br><span class="line"># 4. 更新info.plist文件 CFBundleIdentifier</span><br><span class="line">#  设置:&quot;Set : KEY Value&quot; &quot;目标文件路径&quot;</span><br><span class="line"># PlistBuddy工具修改info.plist文件中的BundleID为工程的BundleID</span><br><span class="line">&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -c &quot;Set :CFBundleIdentifier $PRODUCT_BUNDLE_IDENTIFIER&quot; &quot;$TARGET_APP_PATH&#x2F;Info.plist&quot;</span><br><span class="line"></span><br><span class="line">#----------------------------------------</span><br><span class="line"># 5. 给MachO文件上执行权限</span><br><span class="line"># 拿到MachO文件的路径</span><br><span class="line">APP_BINARY&#x3D;&#96;plutil -convert xml1 -o - $TARGET_APP_PATH&#x2F;Info.plist|grep -A1 Exec|tail -n1|cut -f2 -d\&gt;|cut -f1 -d\&lt;&#96;</span><br><span class="line">#上可执行权限</span><br><span class="line">chmod +x &quot;$TARGET_APP_PATH&#x2F;$APP_BINARY&quot;</span><br><span class="line"></span><br><span class="line">#----------------------------------------</span><br><span class="line"># 6. 重签名第三方 FrameWorks</span><br><span class="line">TARGET_APP_FRAMEWORKS_PATH&#x3D;&quot;$TARGET_APP_PATH&#x2F;Frameworks&quot;</span><br><span class="line">if [ -d &quot;$TARGET_APP_FRAMEWORKS_PATH&quot; ];</span><br><span class="line">then</span><br><span class="line">for FRAMEWORK in &quot;$TARGET_APP_FRAMEWORKS_PATH&#x2F;&quot;*</span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">#签名 </span><br><span class="line">#--force --sign 替换签名</span><br><span class="line"># EXPANDED_CODE_SIGN_IDENTITY 当前工程的证书</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;codesign --force --sign &quot;$EXPANDED_CODE_SIGN_IDENTITY&quot; &quot;$FRAMEWORK&quot;</span><br><span class="line">done</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><blockquote><p>这里在第一次运行Xcode时，注意要先注释掉该shell脚本，运行一次之后再打开该shell脚本，重新运行。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>codesign重签名<ol><li>删除不能签名的文件：PlugIns(Extension)、Watch </li><li>重签名Framework</li><li>给Mach-O可执行权限（<code>chmod</code>命令）</li><li>修改info.plist文件中的bundle id</li><li>创建新工程运行，拷贝描述文件（该描述文件要在iOS系统中信任过）</li><li>利用描述文件中的权限文件签名整个APP包</li></ol></li><li>Xcode重签名<ol><li>删除不能签名的文件：PlugIns(Extension)、Watch </li><li>重签名Framework</li><li>给Mach-O文件可执行权限（<code>chmod</code>命令）</li><li>替换掉Xcode运行后产生的APP包</li></ol></li><li>Shell重签名<ul><li>shell切换</li><li>老版本的Mac系统默认是bash，新系统（Sierra之后）默认shell是zsh</li><li>zsh的环境变量在<code>~/.zshrc</code>中，bash的环境变量在<code>~/.bash_profile</code></li><li>用户权限 chmod<ul><li>数字 r:4 w:2 x:1 <code>chmod 751 filename</code></li><li>字符 u:创建者 g：组 o：其他 a：所有 <code>chmod a+x filename</code></li></ul></li></ul></li></ul><p>还是推荐使用shell脚本重签名，因为以上两种方式虽然可行，但是会很麻烦，稍有不慎则会出现意外。<br>第二种使用Xcode签名，无法控制顺序，虽然做了app包替换，但是在运行时，还是会替换info.plist，导致有一些app安装之后，运行会出现问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;应用重签名&quot;&gt;&lt;a href=&quot;#应用重签名&quot; class=&quot;headerlink&quot; title=&quot;应用重签名&quot;&gt;&lt;/a&gt;应用重签名&lt;/h1&gt;&lt;h2 id=&quot;codesign-命令&quot;&gt;&lt;a href=&quot;#codesign-命令&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="逆向" scheme="http://liujiaboy.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="应用签名" scheme="http://liujiaboy.github.io/tags/%E5%BA%94%E7%94%A8%E7%AD%BE%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>应用签名</title>
    <link href="http://liujiaboy.github.io/2021/05/20/%E9%80%86%E5%90%91/nx-2-%E5%BA%94%E7%94%A8%E7%AD%BE%E5%90%8D/"/>
    <id>http://liujiaboy.github.io/2021/05/20/%E9%80%86%E5%90%91/nx-2-%E5%BA%94%E7%94%A8%E7%AD%BE%E5%90%8D/</id>
    <published>2021-05-20T03:19:01.000Z</published>
    <updated>2021-05-31T02:29:59.128Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码签名"><a href="#代码签名" class="headerlink" title="代码签名"></a>代码签名</h1><p>代码签名是对<code>可执行文件或脚本</code>进行<code>数字签名</code>，用来确认软件在签名后未被修改或损坏的措施。和数字签名原理一样,只不过签名的数据是代码。</p><h2 id="简单的代码签名"><a href="#简单的代码签名" class="headerlink" title="简单的代码签名"></a>简单的代码签名</h2><p>在iOS出来之前，以前的主流操作系统(Mac/Windows)软件随便从哪里下载都能运行，系统安全存在隐患，盗版软件、病毒入侵、静默安装等等，那么苹果希望解决这样的问题，要保证每一个安装到 iOS 上的 APP 都是经过苹果官方允许的，为了保证都是经过苹果官方允许的，就有了<code>代码签名</code>。</p><p>如果要实现验证，其实最简单的方式就是通过苹果官方生成<code>非对称加密的一对公私钥</code>,在iOS的系统中内置一个<code>公钥</code>，<code>私钥</code>由苹果后台保存，我们传APP到AppStore时，苹果后台用私钥对APP数据进行签名，iOS系统下载这个APP后，用公钥验证这个签名，若签名正确，这个APP肯定是由苹果后台认证的，并且没有被修改过，也就达到了苹果的需求：保证安装的每一个APP都是经过苹果官方允许的。</p><p>如果我们iOS设备安装APP只从App Store这一个入口这件事就简单解决了，没有任何复杂的东西，一个数字签名搞定。</p><p>但是实际上iOS安装APP还有其他渠道。比如对于我们开发者而言,我们是需要在开发APP时直接真机调试，而且苹果还开放了企业内部分发的渠道，企业证书签名的APP也是需要顺利安装的。</p><p>苹果需要开放这些方式安装APP,这些需求就无法通过简单的代码签名来办到了。</p><h1 id="双重签名"><a href="#双重签名" class="headerlink" title="双重签名"></a>双重签名</h1><p>为了解决上述的问题，苹果采用了双层签名。</p><p>首先我们需要两个设备，一个iOS系统的设备，一个Mac系统的设备。iOS开发是在Mac环境下进行的，这也就是双层签名的基础。</p><ol><li>在Mac上生成非对称加密算法的公钥、私钥。我们称之为公钥M、私钥M。M=Mac</li><li>苹果自己有一套公钥、私钥，与简单签名中的逻辑一致，私钥在苹果后台，公钥在每一个iOS系统的设备中，称之为公钥A，私钥A，A=Apple</li><li>公钥M打包开发者的信息，上传到苹果后台（通过CSR请求文件申请证书）。苹果后台用私钥A去签名公钥M，得到一份包含了公钥M的Hash值（签名）以及开发者信息等。这个东西就是证书。然后下载到本地</li><li>在开发时，编译完一个APP，用本地的私钥M（p12文件），对这个APP进行签名，其实就是对Mach-O文件签名，同时步奏3得到的证书也一同打包，生成.ipa文件。</li><li>这个ipa文件也就是我们的APP，安装到手机时，手机上有公钥A，通过公钥A解密步奏3得到的证书，可以拿到公钥M。</li><li>然后再用公钥M验证步奏4对APP的签名。如果签名验证通过，则APP就是合法的。</li></ol><p>但是这样还是会有问题，我们只要有了证书，任何设备都可以安装，而且没有设备数限制。</p><h1 id="描述文件"><a href="#描述文件" class="headerlink" title="描述文件"></a>描述文件</h1><p>苹果为了解决上面的问题，就又加了限制，引入了描述文件。</p><ol><li>对开发者来说，只有添加了udid的设备才能安装。</li><li>只能安装某一个，或者某一类的APP。（指定了bundle id，或者是通配类型：com.apple.*）</li><li>还指定了APP的权限(Entitlements)，比如：iCloud、Push、后台运行等等权限，由xcode生成。</li></ol><p>苹果把这些内容，放在一个文件中，叫做描述文件（Provisioning Profile）。后缀名为mobileprovision</p><p>描述文件一般包括三样东西：证书、App ID、设备信息、权限信息。当我们在真机运行或者打包一个项目的时候，证书用来证明我们程序的安全性和合法性。</p><p>所以我们再来看看真正定双重签名。</p><h1 id="真正的双重签名、验证"><a href="#真正的双重签名、验证" class="headerlink" title="真正的双重签名、验证"></a>真正的双重签名、验证</h1><ol><li>在Mac上生成非对称加密算法的公钥、私钥。我们称之为公钥M、私钥M。M=Mac</li><li>苹果自己有一套公钥、私钥，与简单签名中的逻辑一致，私钥在苹果后台，公钥在每一个iOS系统的设备中，称之为公钥A，私钥A，A=Apple</li><li>公钥M打包开发者的信息，上传到苹果后台（通过CSR请求文件申请证书）。苹果后台用私钥A去签名公钥M，得到一份包含了公钥M的Hash值（签名）以及开发者信息，这个东西就是证书（CRT。可以下载到本地，如果多开发者协同开发，需要把证书的密钥导出来，生成p12文件）。同时打包bundle id，设备的udid、APP权限等和证书一起生成描述文件。然后下载到本地。（多开发者协同开发，需要把对应的p12文件、描述文件一起给开发人员）</li><li>在开发时，选择对应的描述文件，用本地的私钥M（p12文件），对Mach-O文件签名，同时步奏3得到的描述文件也一同打包，生成.ipa文件。<br> 权限文件为<code>embedded.mobileprovision</code>(由xcode生成)，也在ipa内。包含了设备udid的数组、权限数组、app id、有效时间等信息</li><li>这个ipa文件也就是我们的APP，安装到手机时，通过公钥A解密步奏3得到的证书，可以拿到公钥M。</li><li>然后再用公钥M验证步奏4对APP的签名。如果签名验证通过，则APP就是合法的。</li></ol><p><img src="%E5%8F%8C%E9%87%8D%E7%AD%BE%E5%90%8D-%E9%AA%8C%E8%AF%81.jpg" alt=""></p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ul><li>苹果的双重签名验证流程</li><li>生成的证书，需要导出p12文件和描述文件一起发给其他开发人员。</li></ul><p>关于证书相关的配置这里推荐一篇来自知乎的文章，<a href="https://zhuanlan.zhihu.com/p/69162456" target="_blank" rel="noopener">iOS证书配置</a>。写的比较详细了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;代码签名&quot;&gt;&lt;a href=&quot;#代码签名&quot; class=&quot;headerlink&quot; title=&quot;代码签名&quot;&gt;&lt;/a&gt;代码签名&lt;/h1&gt;&lt;p&gt;代码签名是对&lt;code&gt;可执行文件或脚本&lt;/code&gt;进行&lt;code&gt;数字签名&lt;/code&gt;，用来确认软件在签名后未被修改或
      
    
    </summary>
    
    
      <category term="逆向" scheme="http://liujiaboy.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="应用签名" scheme="http://liujiaboy.github.io/tags/%E5%BA%94%E7%94%A8%E7%AD%BE%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>锁的原理-2</title>
    <link href="http://liujiaboy.github.io/2021/05/19/OC%E5%8E%9F%E7%90%86/%E9%94%81%E7%9A%84%E5%8E%9F%E7%90%86-2/"/>
    <id>http://liujiaboy.github.io/2021/05/19/OC%E5%8E%9F%E7%90%86/%E9%94%81%E7%9A%84%E5%8E%9F%E7%90%86-2/</id>
    <published>2021-05-19T14:01:16.000Z</published>
    <updated>2021-05-24T02:16:11.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NSLock"><a href="#NSLock" class="headerlink" title="NSLock"></a>NSLock</h1><p>老规矩，直接上代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSLock *lock &#x3D; [[NSLock alloc] init];</span><br><span class="line">[lock lock];</span><br></pre></td></tr></table></figure><p>之所以这么写，就是为了找到NSLock所在的底层库，我们在<code>[lock lock]</code>这一行打个断点，然后使用符号断点<code>symbolic breakpoint</code>添加一个<code>lock</code>的符号，全靠盲猜。因为使用符合断点是最有效的方法，有时候汇编也不一定能进去。</p><p><img src="foundation_lock.jpg" alt=""></p><p>很容易就找到了，这是在foundation框架中的，但是这个框架是没有开源的，怎么搞呢？</p><p>还有swift源码哈~莫慌</p><p>在<code>NSLock.swift</code>文件中可以找到<code>NSLock</code>的类，下方代码对其做了删减。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">open class NSLock: NSObject, NSLocking &#123;</span><br><span class="line">    internal var mutex &#x3D; _MutexPointer.allocate(capacity: 1)</span><br><span class="line">#if os(macOS) || os(iOS) || os(Windows)</span><br><span class="line">    private var timeoutCond &#x3D; _ConditionVariablePointer.allocate(capacity: 1)</span><br><span class="line">    private var timeoutMutex &#x3D; _MutexPointer.allocate(capacity: 1)</span><br><span class="line">#endif</span><br><span class="line">    &#x2F;&#x2F; init 初始化，内部是pthread_mutex_init，是个互斥锁</span><br><span class="line">    public override init() &#123;</span><br><span class="line">        pthread_mutex_init(mutex, nil)</span><br><span class="line">#if os(macOS) || os(iOS)</span><br><span class="line">        pthread_cond_init(timeoutCond, nil)</span><br><span class="line">        pthread_mutex_init(timeoutMutex, nil)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; dealloc，析构方法</span><br><span class="line">    deinit &#123;</span><br><span class="line">        pthread_mutex_destroy(mutex)</span><br><span class="line">        mutex.deinitialize(count: 1)</span><br><span class="line">        mutex.deallocate()</span><br><span class="line">#if os(macOS) || os(iOS) || os(Windows)</span><br><span class="line">        deallocateTimedLockData(cond: timeoutCond, mutex: timeoutMutex)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 加锁</span><br><span class="line">    open func lock() &#123;</span><br><span class="line">        pthread_mutex_lock(mutex)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 解锁</span><br><span class="line">    open func unlock() &#123;</span><br><span class="line">        pthread_mutex_unlock(mutex)</span><br><span class="line">#if os(macOS) || os(iOS)</span><br><span class="line">        &#x2F;&#x2F; Wakeup any threads waiting in lock(before:)</span><br><span class="line">        pthread_mutex_lock(timeoutMutex)</span><br><span class="line">        pthread_cond_broadcast(timeoutCond)</span><br><span class="line">        pthread_mutex_unlock(timeoutMutex)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; tryLock</span><br><span class="line">    open func &#96;try&#96;() -&gt; Bool &#123;</span><br><span class="line">        return pthread_mutex_trylock(mutex) &#x3D;&#x3D; 0</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;  lockBeforeDate</span><br><span class="line">    open func lock(before limit: Date) -&gt; Bool &#123;</span><br><span class="line">        if pthread_mutex_trylock(mutex) &#x3D;&#x3D; 0 &#123;</span><br><span class="line">            return true</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">#if os(macOS) || os(iOS) || os(Windows)</span><br><span class="line">        return timedLock(mutex: mutex, endTime: limit, using: timeoutCond, with: timeoutMutex)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    open var name: String?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些方法在iOS中都可以找到，我们通过源码可以看到内部的实现逻辑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@interface NSLock : NSObject &lt;NSLocking&gt; &#123;</span><br><span class="line">@private</span><br><span class="line">    void *_priv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)tryLock;</span><br><span class="line">- (BOOL)lockBeforeDate:(NSDate *)limit;</span><br><span class="line"></span><br><span class="line">@property (nullable, copy) NSString *name API_AVAILABLE(macos(10.5), ios(2.0), watchos(2.0), tvos(9.0));</span><br></pre></td></tr></table></figure><p>NSLock内部调用的就是<code>pthread</code>的互斥锁。</p><p>首先我们运行一下下面对的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">NSLock *lock &#x3D; [[NSLock alloc] init];</span><br><span class="line">NSRecursiveLock *recursiveLock &#x3D; [[NSRecursiveLock alloc] init];</span><br><span class="line">for (int i &#x3D; 0; i &lt; 100; i ++) &#123;</span><br><span class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">        &#x2F;&#x2F; 1. lock位置 1</span><br><span class="line">        &#x2F;&#x2F;[lock lock];</span><br><span class="line">        &#x2F;&#x2F;[recursiveLock lock];</span><br><span class="line">        &#x2F;&#x2F; 这里定义了一个block</span><br><span class="line">        static void(^testMethod)(int value);</span><br><span class="line">        testMethod &#x3D; ^(int value) &#123;</span><br><span class="line">            &#x2F;&#x2F; 2. lock位置 2</span><br><span class="line">            &#x2F;&#x2F;[lock lock];</span><br><span class="line">            &#x2F;&#x2F;[recursiveLock lock];</span><br><span class="line">            if (value &gt; 0) &#123;</span><br><span class="line">                NSLog(@&quot;i &#x3D; %d, current value &#x3D; %d&quot;, i, value);</span><br><span class="line">                &#x2F;&#x2F; block内部调用block，形成了嵌套-递归</span><br><span class="line">                testMethod(value - 1);</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;[lock unlock];</span><br><span class="line">            &#x2F;&#x2F;[recursiveLock unlock];</span><br><span class="line">        &#125;;</span><br><span class="line">        testMethod(10);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我虽然把锁都写出来了。但是一开始的情况下，我们不加锁运行一下，看是怎么打印的。</p><p><img src="lock-1.jpg" alt=""></p><p>打印出来的就是一堆无序的数字。</p><p>然后我们使用NSLock，把1处的lock打开，底部unlock也需要打开，再执行一下。</p><p>诶~~ 怎么还发生崩溃了呢？就是因为内部发生了递归调用，这个锁已经玩不了了。<br>那我们该用递归锁试一下，我们使用<code>NSRecursiveLock</code>再运行一下，把1处对应的lock打开。</p><p><img src="lock-2.jpg" alt=""></p><p>这次没问题了哈~ 为啥呢？</p><h1 id="NSRecursiveLock"><a href="#NSRecursiveLock" class="headerlink" title="NSRecursiveLock"></a>NSRecursiveLock</h1><p>我们看一下NSRecursiveLock的源码是啥？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">open class NSRecursiveLock: NSObject, NSLocking &#123;</span><br><span class="line">    internal var mutex &#x3D; _RecursiveMutexPointer.allocate(capacity: 1)</span><br><span class="line">#if os(macOS) || os(iOS) || os(Windows)</span><br><span class="line">    private var timeoutCond &#x3D; _ConditionVariablePointer.allocate(capacity: 1)</span><br><span class="line">    private var timeoutMutex &#x3D; _MutexPointer.allocate(capacity: 1)</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    public override init() &#123;</span><br><span class="line">        super.init()</span><br><span class="line">        var attrib &#x3D; pthread_mutexattr_t()</span><br><span class="line"></span><br><span class="line">        withUnsafeMutablePointer(to: &amp;attrib) &#123; attrs in</span><br><span class="line">            pthread_mutexattr_init(attrs)</span><br><span class="line">            pthread_mutexattr_settype(attrs, Int32(PTHREAD_MUTEX_RECURSIVE))</span><br><span class="line">            pthread_mutex_init(mutex, attrs)</span><br><span class="line">        &#125;</span><br><span class="line">#if os(macOS) || os(iOS)</span><br><span class="line">        pthread_cond_init(timeoutCond, nil)</span><br><span class="line">        pthread_mutex_init(timeoutMutex, nil)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    deinit &#123;</span><br><span class="line">        pthread_mutex_destroy(mutex)</span><br><span class="line">        </span><br><span class="line">        mutex.deinitialize(count: 1)</span><br><span class="line">        mutex.deallocate()</span><br><span class="line">#if os(macOS) || os(iOS) || os(Windows)</span><br><span class="line">        deallocateTimedLockData(cond: timeoutCond, mutex: timeoutMutex)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    open func lock() &#123;</span><br><span class="line">        pthread_mutex_lock(mutex)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    open func unlock() &#123;</span><br><span class="line">        pthread_mutex_unlock(mutex)</span><br><span class="line">#if os(macOS) || os(iOS)</span><br><span class="line">        &#x2F;&#x2F; Wakeup any threads waiting in lock(before:)</span><br><span class="line">        pthread_mutex_lock(timeoutMutex)</span><br><span class="line">        pthread_cond_broadcast(timeoutCond)</span><br><span class="line">        pthread_mutex_unlock(timeoutMutex)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    open func &#96;try&#96;() -&gt; Bool &#123;</span><br><span class="line">        return pthread_mutex_trylock(mutex) &#x3D;&#x3D; 0</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    open func lock(before limit: Date) -&gt; Bool &#123;</span><br><span class="line">        if pthread_mutex_trylock(mutex) &#x3D;&#x3D; 0 &#123;</span><br><span class="line">            return true</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">#if os(macOS) || os(iOS) || os(Windows)</span><br><span class="line">        return timedLock(mutex: mutex, endTime: limit, using: timeoutCond, with: timeoutMutex)</span><br><span class="line">#else</span><br><span class="line">        guard var endTime &#x3D; timeSpecFrom(date: limit) else &#123;</span><br><span class="line">            return false</span><br><span class="line">        &#125;</span><br><span class="line">        return pthread_mutex_timedlock(mutex, &amp;endTime) &#x3D;&#x3D; 0</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    open var name: String?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯哼？？？怎么跟NSLock中的源码没有什么区别？在<code>init()</code>中有略微的不同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public override init() &#123;</span><br><span class="line">    super.init()</span><br><span class="line">    var attrib &#x3D; pthread_mutexattr_t()</span><br><span class="line"></span><br><span class="line">    withUnsafeMutablePointer(to: &amp;attrib) &#123; attrs in</span><br><span class="line">        pthread_mutexattr_init(attrs)</span><br><span class="line">        &#x2F;&#x2F; 设置互斥锁的类型 RECURSIVE（递归）</span><br><span class="line">        pthread_mutexattr_settype(attrs, Int32(PTHREAD_MUTEX_RECURSIVE))</span><br><span class="line">        pthread_mutex_init(mutex, attrs)</span><br><span class="line">    &#125;</span><br><span class="line">#if os(macOS) || os(iOS)</span><br><span class="line">    pthread_cond_init(timeoutCond, nil)</span><br><span class="line">    pthread_mutex_init(timeoutMutex, nil)</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这下就清晰了，NSRecursiveLock在内部是一个互斥锁设置了递归的类型，只有这一点点的区别，就导致上方的代码运行出现那么大的区别。</p><h3 id="lock的位置"><a href="#lock的位置" class="headerlink" title="lock的位置"></a>lock的位置</h3><p>我们继续看上方的代码，把lock的位置放在2.的位置。分别打开NSLock和NSRecursiveLock看看有什么不同：</p><ol><li><p>打开NSLock</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2021-05-20 00:05:11.816871+0800 LockDemo[10150:520495] i &#x3D; 0, current value &#x3D; 10</span><br></pre></td></tr></table></figure><p> 只有一条输出？</p><p> 因为<code>NSLock</code>只是一个互斥锁，执行了<code>lock</code>操作之后，就必须等待<code>unlock</code>才能继续执行，否则就一直等待。</p></li><li><p>打开NSRecursiveLock</p><p> <img src="lock-3.jpg" alt=""></p><p> 竟然发生了crash，但是current value的值是有序的，i的值却是无序的，这是个啥情况？</p><p> 也就是说，递归锁我用了，但是递归执行中，线程与线程直接，递归没有直接的联系，也就是递归锁在多线程中跑偏了~造成了锁内部发生了错乱，导致了crash。</p></li></ol><p>所以啊，别总乱加锁。那么有人可能会说，我直接在调用的时候加锁不就可以了吗，还很省事，不用担心发生crash。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[lock lock];</span><br><span class="line">testMethod(10);</span><br><span class="line">[lock unlock];</span><br></pre></td></tr></table></figure><p>肯定不行啊，这样只是控制了，递归调用不会出现问题，但是i的值呢？</p><p><img src="lock-4.jpg" alt=""></p><p>不管你这这里使用NSLock或NSRecursiveLock都是一样的效果。所以，这种情况，我们经常会使用<code>@synchronized (self)</code>，不用管什么时候加锁和什么时候解锁，也不用担心会发生等待、崩溃。而且性能上，并没有差多少。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">testMethod &#x3D; ^(int value) &#123;</span><br><span class="line">    @synchronized (self) &#123;</span><br><span class="line">        if (value &gt; 0) &#123;</span><br><span class="line">            NSLog(@&quot;i &#x3D; %d, current value &#x3D; %d&quot;, i, value);</span><br><span class="line">            testMethod(value - 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="NSCondition-条件变量"><a href="#NSCondition-条件变量" class="headerlink" title="NSCondition 条件变量"></a>NSCondition 条件变量</h1><p><code>NSCondition</code>的对象实际上作为一个锁和一个线程检查器：锁主要为了当检测条件时保护数据源，执行条件引发的任务；线程检查器主要是根据条件决定是否继续运行线程，即线程是否被阻塞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@interface NSCondition : NSObject &lt;NSLocking&gt; &#123;</span><br><span class="line">&#x2F;&#x2F; 让当前线程处于等待状态</span><br><span class="line">- (void)wait;</span><br><span class="line">&#x2F;&#x2F; 在时间到达之前让当前线程一直等待</span><br><span class="line">- (BOOL)waitUntilDate:(NSDate *)limit;</span><br><span class="line">&#x2F;** </span><br><span class="line"> * CPU发送信号，唤醒等待条件的一个线程，可以执行。可以多次调用，唤醒多个线程。</span><br><span class="line"> * 没有线程等待，则什么也不处理。只有在被锁的情况下才可以调用</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (void)signal;</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 唤醒等待的所有线程，如果没有等待，则什么也不做。只有在被锁的情况下才可以调用</span><br><span class="line"> *&#x2F; </span><br><span class="line">- (void)broadcast;</span><br><span class="line"></span><br><span class="line">@property (nullable, copy) NSString *name;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 一般用于多线程同时访问、修改同一个数据源，保证在同一 时间内数据源只被访问、修改一次，其他线程的命令需要在lock外等待，只到unlock ，才可访问</span><br><span class="line">- (void)lock;</span><br><span class="line">&#x2F;&#x2F; 与lock同时使用。</span><br><span class="line">- (void)unlock;</span><br></pre></td></tr></table></figure><p>接下来我们看代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">- (void)conditionTest &#123;</span><br><span class="line">    self.ticketCount &#x3D; 0;</span><br><span class="line">    for (int i &#x3D; 0; i &lt; 100; i++) &#123;</span><br><span class="line">        dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">            [self addTicket];</span><br><span class="line">        &#125;);</span><br><span class="line">        dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">            [self saleTicket];</span><br><span class="line">        &#125;);</span><br><span class="line">        dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">            [self saleTicket];</span><br><span class="line">        &#125;);</span><br><span class="line">        dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">            [self addTicket];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)addTicket &#123;</span><br><span class="line">    self.ticketCount +&#x3D; 1;</span><br><span class="line">    NSLog(@&quot;有票了 %ld&quot;, self.ticketCount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)saleTicket &#123;</span><br><span class="line">    self.ticketCount -&#x3D; 1;</span><br><span class="line">    NSLog(@&quot;卖了一张 %ld&quot;, self.ticketCount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下代码。</p><p><img src="NSCondition-1.jpg" alt=""></p><p>都有可能卖超了。怎么解决这个问题，虽然上面的锁能解决，但是我们使用NSCondition来处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">- (void)addTicket &#123;</span><br><span class="line">    &#x2F;&#x2F; 加锁</span><br><span class="line">    [self.condition lock];</span><br><span class="line">    self.ticketCount +&#x3D; 1;</span><br><span class="line">    NSLog(@&quot;有票了 count &#x3D; %ld&quot;, self.ticketCount);</span><br><span class="line">    &#x2F;&#x2F; 通知，有票了，等待的线程可以执行了</span><br><span class="line">    [self.condition signal];</span><br><span class="line">    &#x2F;&#x2F; 解锁</span><br><span class="line">    [self.condition unlock];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)saleTicket &#123;</span><br><span class="line">    &#x2F;&#x2F; 加锁</span><br><span class="line">    [self.condition lock];</span><br><span class="line">    if (self.ticketCount &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        NSLog(@&quot;wait...没有票了 count &#x3D; 0&quot;);</span><br><span class="line">        &#x2F;&#x2F; 没有票，就等待，不执行，等到有票了再执行</span><br><span class="line">        [self.condition wait];</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 有票了，就执行了</span><br><span class="line">    self.ticketCount -&#x3D; 1;</span><br><span class="line">    NSLog(@&quot;卖了一张 count &#x3D; %ld&quot;, self.ticketCount);</span><br><span class="line">    [self.condition unlock];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下，看看结果</p><p><img src="NSCondition-2.jpg" alt=""></p><p>很是完美，<code>NSCondition</code>条件变量是很少使用的，因为用起来比较麻烦。其主要的点就是在什么时候执行<code>wait</code>、什么时候发送<code>signal</code>。</p><p>看了代码的运用，我们看看内部是怎么实现的。</p><h2 id="NSCondition-内部实现"><a href="#NSCondition-内部实现" class="headerlink" title="NSCondition 内部实现"></a>NSCondition 内部实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">open class NSCondition: NSObject, NSLocking &#123;</span><br><span class="line">    internal var mutex &#x3D; _MutexPointer.allocate(capacity: 1)</span><br><span class="line">    &#x2F;&#x2F; 条件</span><br><span class="line">    internal var cond &#x3D; _ConditionVariablePointer.allocate(capacity: 1)</span><br><span class="line"></span><br><span class="line">    public override init() &#123;</span><br><span class="line">#if os(Windows)</span><br><span class="line">        InitializeSRWLock(mutex)</span><br><span class="line">        InitializeConditionVariable(cond)</span><br><span class="line">#else</span><br><span class="line">        &#x2F;&#x2F; 内部封装了pthread 的互斥锁</span><br><span class="line">        pthread_mutex_init(mutex, nil)</span><br><span class="line">        pthread_cond_init(cond, nil)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    deinit &#123;</span><br><span class="line">#if os(Windows)</span><br><span class="line">        &#x2F;&#x2F; SRWLock do not need to be explicitly destroyed</span><br><span class="line">#else</span><br><span class="line">        pthread_mutex_destroy(mutex)</span><br><span class="line">        pthread_cond_destroy(cond)</span><br><span class="line">#endif</span><br><span class="line">        mutex.deinitialize(count: 1)</span><br><span class="line">        cond.deinitialize(count: 1)</span><br><span class="line">        mutex.deallocate()</span><br><span class="line">        cond.deallocate()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    open func lock() &#123;</span><br><span class="line">#if os(Windows)</span><br><span class="line">        AcquireSRWLockExclusive(mutex)</span><br><span class="line">#else</span><br><span class="line">        pthread_mutex_lock(mutex)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    open func unlock() &#123;</span><br><span class="line">#if os(Windows)</span><br><span class="line">        ReleaseSRWLockExclusive(mutex)</span><br><span class="line">#else</span><br><span class="line">        pthread_mutex_unlock(mutex)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 等待</span><br><span class="line">    open func wait() &#123;</span><br><span class="line">#if os(Windows)</span><br><span class="line">        SleepConditionVariableSRW(cond, mutex, WinSDK.INFINITE, 0)</span><br><span class="line">#else</span><br><span class="line">        pthread_cond_wait(cond, mutex)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    open func wait(until limit: Date) -&gt; Bool &#123;</span><br><span class="line">#if os(Windows)</span><br><span class="line">        return SleepConditionVariableSRW(cond, mutex, timeoutFrom(date: limit), 0)</span><br><span class="line">#else</span><br><span class="line">        guard var timeout &#x3D; timeSpecFrom(date: limit) else &#123;</span><br><span class="line">            return false</span><br><span class="line">        &#125;</span><br><span class="line">        return pthread_cond_timedwait(cond, mutex, &amp;timeout) &#x3D;&#x3D; 0</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 发送信号</span><br><span class="line">    open func signal() &#123;</span><br><span class="line">#if os(Windows)</span><br><span class="line">        WakeConditionVariable(cond)</span><br><span class="line">#else</span><br><span class="line">        pthread_cond_signal(cond)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 唤醒所有条件</span><br><span class="line">    open func broadcast() &#123;</span><br><span class="line">#if os(Windows)</span><br><span class="line">        WakeAllConditionVariable(cond)</span><br><span class="line">#else</span><br><span class="line">        &#x2F;&#x2F; 根据window的释义，唤醒所有条件锁</span><br><span class="line">        pthread_cond_broadcast(cond)</span><br><span class="line">#endif</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    open var name: String?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NSCondition内部封装的是一个pthread的互斥锁。</p><h1 id="NSConditionLock-条件锁"><a href="#NSConditionLock-条件锁" class="headerlink" title="NSConditionLock 条件锁"></a>NSConditionLock 条件锁</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 初始化当前的条件</span><br><span class="line">- (instancetype)initWithCondition:(NSInteger)condition;</span><br><span class="line">&#x2F;&#x2F; 只读，当前的条件</span><br><span class="line">@property (readonly) NSInteger condition;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 当前线程加锁，如果当前条件与参数一致，则执行，否则等待，直到有对应的条件被解锁。</span><br><span class="line">- (void)lockWhenCondition:(NSInteger)condition;</span><br><span class="line">&#x2F;&#x2F; 解锁，然后把条件传尽来，如果有等待的线程，并且条件与condition相同则执行，没有不处理。</span><br><span class="line">- (void)unlockWithCondition:(NSInteger)condition;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 加锁，没有条件，可以的话直接执行</span><br><span class="line">- (void)lock;</span><br><span class="line">&#x2F;&#x2F; 解锁</span><br><span class="line">- (void)unlock;</span><br></pre></td></tr></table></figure><p>接下来，看一下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- (void)conditonLockTest &#123;</span><br><span class="line">    NSConditionLock *conditionLock &#x3D; [[NSConditionLock alloc] initWithCondition:2];</span><br><span class="line">    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^&#123;</span><br><span class="line">&#x2F;&#x2F;        [conditionLock lockWhenCondition:1];</span><br><span class="line">        NSLog(@&quot;1&quot;);</span><br><span class="line">&#x2F;&#x2F;         [conditionLock unlockWithCondition:0];</span><br><span class="line">    &#125;);</span><br><span class="line">    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, 0), ^&#123;</span><br><span class="line">&#x2F;&#x2F;        [conditionLock lockWhenCondition:2];</span><br><span class="line">        NSLog(@&quot;2&quot;);</span><br><span class="line">&#x2F;&#x2F;        [conditionLock unlockWithCondition:1];</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">&#x2F;&#x2F;       [conditionLock lock];</span><br><span class="line">       NSLog(@&quot;3&quot;);</span><br><span class="line">&#x2F;&#x2F;       [conditionLock unlock];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先不使用<code>NSConditionLock</code>，跑一下代码看看，输出情况：</p><p>根据之前GCD全局队列的内容，该输出可能很随意，每次输出都可能不一样。那接下来把注释的代码打开，在有锁的情况下，再跑一次。</p><p>这次的输出结果为：3-2-1，也有可能是2-3-1。<br>因为初始的<code>NSConditionLock</code>的条件是2，而且是全局并发队列，所以2和3都有可能先执行，但是1肯定是最后执行。因为在2执行完毕之后，才解锁，并把条件该成了1。这个时候才通知条件为1的锁执行。</p><p>条件锁有点类似信号量。</p><h2 id="NSConditionLock-源码："><a href="#NSConditionLock-源码：" class="headerlink" title="NSConditionLock 源码："></a>NSConditionLock 源码：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">open class NSConditionLock : NSObject, NSLocking &#123;</span><br><span class="line">    &#x2F;&#x2F; 内部封装了一个NSCondition</span><br><span class="line">    internal var _cond &#x3D; NSCondition()</span><br><span class="line">    &#x2F;&#x2F; int类型的数据，当做锁的条件</span><br><span class="line">    internal var _value: Int</span><br><span class="line">    internal var _thread: _swift_CFThreadRef?</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 默认init操作，condition &#x3D;&#x3D; 0</span><br><span class="line">    public convenience override init() &#123;</span><br><span class="line">        self.init(condition: 0)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public init(condition: Int) &#123;</span><br><span class="line">        _value &#x3D; condition</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 加锁</span><br><span class="line">    open func lock() &#123;</span><br><span class="line">        let _ &#x3D; lock(before: Date.distantFuture)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 解锁，直接_thread&#x3D;nil，并且唤醒其他线程</span><br><span class="line">    open func unlock() &#123;</span><br><span class="line">        _cond.lock()</span><br><span class="line">#if os(Windows)</span><br><span class="line">        _thread &#x3D; INVALID_HANDLE_VALUE</span><br><span class="line">#else</span><br><span class="line">        _thread &#x3D; nil</span><br><span class="line">#endif</span><br><span class="line">        _cond.broadcast()</span><br><span class="line">        _cond.unlock()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 可读的condition</span><br><span class="line">    open var condition: Int &#123;</span><br><span class="line">        return _value</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 加锁，并且当条件满足时执行，</span><br><span class="line">    open func lock(whenCondition condition: Int) &#123;</span><br><span class="line">        &#x2F;&#x2F; 这里详细说明</span><br><span class="line">        let _ &#x3D; lock(whenCondition: condition, before: Date.distantFuture)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    open func &#96;try&#96;() -&gt; Bool &#123;</span><br><span class="line">        return lock(before: Date.distantPast)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    open func tryLock(whenCondition condition: Int) -&gt; Bool &#123;</span><br><span class="line">        return lock(whenCondition: condition, before: Date.distantPast)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 解锁，并且设置条件</span><br><span class="line">    open func unlock(withCondition condition: Int) &#123;</span><br><span class="line">        _cond.lock()</span><br><span class="line">#if os(Windows)</span><br><span class="line">        _thread &#x3D; INVALID_HANDLE_VALUE</span><br><span class="line">#else</span><br><span class="line">        _thread &#x3D; nil</span><br><span class="line">#endif</span><br><span class="line">        &#x2F;&#x2F; 设置条件锁的条件，并且执行等待的条件锁</span><br><span class="line">        _value &#x3D; condition</span><br><span class="line">        _cond.broadcast()</span><br><span class="line">        _cond.unlock()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    open func lock(before limit: Date) -&gt; Bool &#123;</span><br><span class="line">        _cond.lock()</span><br><span class="line">        while _thread !&#x3D; nil &#123;</span><br><span class="line">            if !_cond.wait(until: limit) &#123;</span><br><span class="line">                _cond.unlock()</span><br><span class="line">                return false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">#if os(Windows)</span><br><span class="line">        _thread &#x3D; GetCurrentThread()</span><br><span class="line">#else</span><br><span class="line">        _thread &#x3D; pthread_self()</span><br><span class="line">#endif</span><br><span class="line">        _cond.unlock()</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; </span><br><span class="line">    open func lock(whenCondition condition: Int, before limit: Date) -&gt; Bool &#123;</span><br><span class="line">        &#x2F;&#x2F; NSCondition 加锁</span><br><span class="line">        _cond.lock()</span><br><span class="line">        &#x2F;&#x2F; 这里是一个while循环，当条件不满足时，就一直循环下去，除非不是等待状态。</span><br><span class="line">        while _thread !&#x3D; nil || _value !&#x3D; condition &#123;</span><br><span class="line">            if !_cond.wait(until: limit) &#123;</span><br><span class="line">                _cond.unlock()</span><br><span class="line">                return false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 当条件满足，直接跳出while循环，向下执行。</span><br><span class="line">#if os(Windows)</span><br><span class="line">        _thread &#x3D; GetCurrentThread()</span><br><span class="line">#else</span><br><span class="line">        _thread &#x3D; pthread_self()</span><br><span class="line">#endif</span><br><span class="line">        _cond.unlock()</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    open var name: String?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NSConditionLock内部封装了NSCondtion，使用起来比<code>NSCondtion</code>更加方便。这个也是一个互斥锁。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="lock-cmp.jpg" alt=""></p><ul><li>@synchronized(obj)<ul><li>objc_sync_enter加锁、objc_sync_exit解锁</li><li>查找obj的流程：当前链表查找 - 线程池中查找 - hash表中查找</li><li>不要乱用obj</li></ul></li><li>NSLock - pthread的互斥锁<ul><li>在递归调用中会发生等待</li></ul></li><li>NSRecursiveLock - 递归锁，封装的也是互斥锁，内部原理与NSLock一致，只是设置了递归的类型。<ul><li>注意递归锁，在多线程中会发生crash</li></ul></li><li>NSCondtion - 互斥锁<ul><li>注意wait和signal调用时机</li></ul></li><li>NSConditionLock - 互斥锁<ul><li>内部封装了NSCondtion</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;NSLock&quot;&gt;&lt;a href=&quot;#NSLock&quot; class=&quot;headerlink&quot; title=&quot;NSLock&quot;&gt;&lt;/a&gt;NSLock&lt;/h1&gt;&lt;p&gt;老规矩，直接上代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>锁的原理</title>
    <link href="http://liujiaboy.github.io/2021/05/16/OC%E5%8E%9F%E7%90%86/%E9%94%81%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>http://liujiaboy.github.io/2021/05/16/OC%E5%8E%9F%E7%90%86/%E9%94%81%E7%9A%84%E5%8E%9F%E7%90%86/</id>
    <published>2021-05-16T15:45:44.000Z</published>
    <updated>2021-05-24T02:16:11.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h1><h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><p>线程反复检查锁变量是否可用。由于线程在这一过程中保持执行，因此是一种<code>忙等待</code>。一旦获取了自旋锁，线程会<code>一直保持该锁</code>，直至显式释放自旋锁。</p><p>自旋锁避免了进程上下文的调度开销，因此对于线程只会阻塞很短时间的场合是有效的。在iOS中，声明属性，默认修饰符atomic，原子性操作自带一把自旋锁。</p><ul><li>OSSpinLock （已经不安全，不在使用）</li><li>atomic</li></ul><h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><p>是一种用于<code>多线程</code>编程中，防止两条线程同时对<code>同一</code>公共资源(比如全局变量)进行读写的机制。该目的通过将代码切片成一个一个的临界区而达成</p><p>这里属于互斥锁的有:</p><ul><li>NSLock</li><li>NSRecursiveLock</li><li>@synchronized</li><li>pthread_mutex </li><li>NSCondition</li><li>NSCondtionLock</li></ul><h2 id="自旋锁与互斥锁的区别"><a href="#自旋锁与互斥锁的区别" class="headerlink" title="自旋锁与互斥锁的区别"></a>自旋锁与互斥锁的区别</h2><ol><li>原理：<ol><li>自旋锁：线程一直处于 加锁 - 解锁 - 忙等，消耗CPU资源较高。</li><li>互斥锁：线程处于 加锁 - 解锁 - 休眠（等待被唤醒）</li></ol></li><li>如果共享数据已有其他线程加锁：<ul><li>自旋锁：死循环的方式等待，一旦被访问的资源被解锁，则立即执行。</li><li>互斥锁：线程会进入休眠状态，等待解锁。</li></ul></li><li>使用自旋锁应及时释放自旋锁，否则等待中的自旋锁会浪费CPU资源。</li></ol><h2 id="条件锁"><a href="#条件锁" class="headerlink" title="条件锁"></a>条件锁</h2><p>就是<code>条件变量</code>，当进程的某些资源要求不满足时就进入休眠，也就是锁住了。当资源被分配到了，条件锁打开，进程继续运行。</p><ul><li>NSCondition</li><li>NSConditionLock</li></ul><h2 id="递归锁"><a href="#递归锁" class="headerlink" title="递归锁"></a>递归锁</h2><p>就是同一个线程可以加锁N次而<code>不会引发死锁</code>。递归锁是特殊的互斥锁，一种带有<code>递归性质的互斥锁</code>。</p><ul><li>NSRecursiveLock</li><li>pthread_mutex(recursive)</li></ul><h2 id="信号量-semaphore"><a href="#信号量-semaphore" class="headerlink" title="信号量(semaphore)"></a>信号量(semaphore)</h2><p>是一种更高级的同步机制，互斥锁可以说是semaphore在仅取值0/1时的特例。信号量可以有更多的取值空间，用来实现更加复杂的同步，而不单单是线程间互斥。它是一个互斥锁。</p><ul><li>dispatch_semaphore</li></ul><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>基本的锁包括两大类：自旋锁和互斥锁，其它锁都是在这两种的封装。</p><h1 id="synchronized-底层原理"><a href="#synchronized-底层原理" class="headerlink" title="@synchronized 底层原理"></a>@synchronized 底层原理</h1><p>我们把如下代码放在<code>main.m</code>文件中执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@synchronized (appDelegateClassName) &#123;</span><br><span class="line">    &#x2F;&#x2F; 进行读写操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过xcrun的命令生成main.cpp文件之后，才看文件可以到@synchronized的内部逻辑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">id _sync_obj &#x3D; (id)appDelegateClassName;</span><br><span class="line">objc_sync_enter(_sync_obj);</span><br><span class="line">try &#123;</span><br><span class="line">    struct _SYNC_EXIT &#123; _SYNC_EXIT(id arg) : sync_exit(arg) &#123;&#125;</span><br><span class="line">        ~_SYNC_EXIT() &#123;</span><br><span class="line">            objc_sync_exit(sync_exit);</span><br><span class="line">        &#125;</span><br><span class="line">        id sync_exit;</span><br><span class="line">    &#125;</span><br><span class="line">    _sync_exit(_sync_obj);</span><br><span class="line"></span><br><span class="line">&#125; catch (id e) &#123;</span><br><span class="line">    _rethrow &#x3D; e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有两个操作，看着像是我们要找的重点内容<code>objc_sync_enter</code>和<code>objc_sync_exit</code>。</p><p>为了以防万一，我们再汇编模式下debug一下代码。<br>在汇编模式下，同样发现了这两处代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">libobjc.A.dylib&#96;objc_sync_enter:</span><br><span class="line"></span><br><span class="line">libobjc.A.dylib&#96;objc_sync_exit:</span><br></pre></td></tr></table></figure><p>并且这两处代码在libobjc.A.dylib中，这是个啥，感觉跟runtime的源码有点关系。是的，就是在runtime的源码中。接下来分析一下源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F; Begin synchronizing on &#39;obj&#39;. </span><br><span class="line">&#x2F;&#x2F; Allocates recursive mutex associated with &#39;obj&#39; if needed.</span><br><span class="line">&#x2F;&#x2F; Returns OBJC_SYNC_SUCCESS once lock is acquired.  </span><br><span class="line">int objc_sync_enter(id obj)</span><br><span class="line">&#123;</span><br><span class="line">    int result &#x3D; OBJC_SYNC_SUCCESS;</span><br><span class="line">    &#x2F;&#x2F; 1. obj有值</span><br><span class="line">    if (obj) &#123;</span><br><span class="line">        &#x2F;&#x2F; 2. 生成SyncData类型的data，这是重点，注意参数ACQUIRE</span><br><span class="line">        SyncData* data &#x3D; id2data(obj, ACQUIRE);</span><br><span class="line">        ASSERT(data);</span><br><span class="line">        &#x2F;&#x2F; 3. 加互斥锁</span><br><span class="line">        data-&gt;mutex.lock();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; 4.</span><br><span class="line">        &#x2F;&#x2F; @synchronized(nil) does nothing</span><br><span class="line">        if (DebugNilSync) &#123;</span><br><span class="line">            _objc_inform(&quot;NIL SYNC DEBUG: @synchronized(nil); set a breakpoint on objc_sync_nil to debug&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        objc_sync_nil();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们一步步分析源码：</p><ol><li>obj就是<code>@synchronized (self)</code>传进来的参数。有值的情况下会执行 2. 没有值则执行 4.</li><li><code>SyncData</code>是一个结构体</li><li>加锁</li><li>执行<code>objc_sync_nil();</code>直接返回</li></ol><p>我们先看一下<code>objc_sync_exit</code>的内部结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; End synchronizing on &#39;obj&#39;. </span><br><span class="line">&#x2F;&#x2F; Returns OBJC_SYNC_SUCCESS or OBJC_SYNC_NOT_OWNING_THREAD_ERROR</span><br><span class="line">int objc_sync_exit(id obj)</span><br><span class="line">&#123;</span><br><span class="line">    int result &#x3D; OBJC_SYNC_SUCCESS;</span><br><span class="line">    &#x2F;&#x2F; 1. 判断是否有obj</span><br><span class="line">    if (obj) &#123;</span><br><span class="line">        &#x2F;&#x2F; 获取data，注意传的值的参数是RELEASE</span><br><span class="line">        SyncData* data &#x3D; id2data(obj, RELEASE); </span><br><span class="line">        if (!data) &#123;</span><br><span class="line">            result &#x3D; OBJC_SYNC_NOT_OWNING_THREAD_ERROR;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            &#x2F;&#x2F; 有值的情况下，就进行解锁</span><br><span class="line">            bool okay &#x3D; data-&gt;mutex.tryUnlock();</span><br><span class="line">            if (!okay) &#123;</span><br><span class="line">                result &#x3D; OBJC_SYNC_NOT_OWNING_THREAD_ERROR;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; @synchronized(nil) does nothing</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现<code>objc_sync_exit</code>和<code>objc_sync_enter</code>的内部大同小异。主要的内容都是在<code>id2data</code>函数内部。</p><p>接下来，我们重点看一下这个函数：</p><p><img src="id2data.jpg" alt=""></p><p>这个函数太大了，先把一些代码逻辑隐藏掉了，接着一步一步分析：</p><h2 id="SyncData-链表"><a href="#SyncData-链表" class="headerlink" title="SyncData 链表"></a>SyncData 链表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef struct alignas(CacheLineSize) SyncData &#123;</span><br><span class="line">    struct SyncData* nextData;  &#x2F;&#x2F; 指向下一个值，</span><br><span class="line">    DisguisedPtr&lt;objc_object&gt; object;</span><br><span class="line">    int32_t threadCount;  &#x2F;&#x2F; number of THREADS using this block</span><br><span class="line">    recursive_mutex_t mutex;</span><br><span class="line">&#125; SyncData;</span><br></pre></td></tr></table></figure><ol><li><code>nextData</code>指向下一个值，类似与链表结构。</li><li>object：hash map的关联对象，就是<code>@synchronized (self)</code>中self这个参数。</li><li>threadCount：有多少个线程执行了这个block</li><li>mutex：这是一个递归锁，递归锁是互斥锁的一种</li></ol><h2 id="SyncList"><a href="#SyncList" class="headerlink" title="SyncList"></a>SyncList</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spinlock_t *lockp &#x3D; &amp;LOCK_FOR_OBJ(object);</span><br><span class="line">SyncData **listp &#x3D; &amp;LIST_FOR_OBJ(object);</span><br></pre></td></tr></table></figure><p>首先出现的就是spinlock_t类型的锁，这是一个自旋锁，通过<code>LOCK_FOR_OBJ(object)</code>来获取。<br><code>SyncData指针类型</code>的数据，通过LIST_FOR_OBJ获取。都是通过<code>SyncList</code>获取的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">struct SyncList &#123;</span><br><span class="line">    SyncData *data;</span><br><span class="line">    spinlock_t lock;</span><br><span class="line"></span><br><span class="line">    constexpr SyncList() : data(nil), lock(fork_unsafe_lock) &#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Use multiple parallel lists to decrease contention among unrelated objects.</span><br><span class="line">#define LOCK_FOR_OBJ(obj) sDataLists[obj].lock</span><br><span class="line">#define LIST_FOR_OBJ(obj) sDataLists[obj].data</span><br><span class="line">static StripedMap&lt;SyncList&gt; sDataLists;</span><br></pre></td></tr></table></figure><p><code>SyncList</code>是一个结构体类型，内部有一个链表，<code>spinlock_t</code>是一个自旋锁。它存放的是一个总表。</p><p><code>tls</code>：是一个线程缓存的表，通过set和get方法获取对应key的值。</p><ul><li>SYNC_DATA_DIRECT_KEY： 数据data对应的key</li><li>SYNC_COUNT_DIRECT_KEY：锁的个数对应的key</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">typedef struct SyncCache &#123;</span><br><span class="line">    unsigned int allocated;</span><br><span class="line">    unsigned int used;</span><br><span class="line">    SyncCacheItem list[0];</span><br><span class="line">&#125; SyncCache;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">    SyncData *data;</span><br><span class="line">    unsigned int lockCount;  &#x2F;&#x2F; number of times THIS THREAD locked this block</span><br><span class="line">&#125; SyncCacheItem;</span><br></pre></td></tr></table></figure><p><code>SyncCache</code>也是一个结构体，主要作用是存储线程，内部有一个list数组，存储不同的线程。<code>list[0]</code>存放的是当前线程的SyncData链表。</p><h2 id="第一步-有data"><a href="#第一步-有data" class="headerlink" title="第一步 有data"></a>第一步 有data</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Check per-thread single-entry fast cache for matching object</span><br><span class="line">bool fastCacheOccupied &#x3D; NO;</span><br><span class="line">&#x2F;&#x2F; 1. 通过get方法，从tls缓存表中获取data</span><br><span class="line">SyncData *data &#x3D; (SyncData *)tls_get_direct(SYNC_DATA_DIRECT_KEY);</span><br><span class="line">if (data) &#123;</span><br><span class="line">    &#x2F;&#x2F; 快速缓存查找 为YES</span><br><span class="line">    fastCacheOccupied &#x3D; YES;</span><br><span class="line">    &#x2F;&#x2F; 如果缓存中获取的data-&gt;object等于@synchronized(object)，说明之前有使用过object</span><br><span class="line">    if (data-&gt;object &#x3D;&#x3D; object) &#123;</span><br><span class="line">        &#x2F;&#x2F; Found a match in fast cache.</span><br><span class="line">        &#x2F;&#x2F; 有几个锁，也就是有几次执行synchronized</span><br><span class="line">        uintptr_t lockCount;    </span><br><span class="line"></span><br><span class="line">        result &#x3D; data;</span><br><span class="line">        &#x2F;&#x2F; 在快速缓存中</span><br><span class="line">        lockCount &#x3D; (uintptr_t)tls_get_direct(SYNC_COUNT_DIRECT_KEY);</span><br><span class="line">        &#x2F;&#x2F; 表中中data，但是对应的线程数和锁的个数都小于0，说明获取的data有问题</span><br><span class="line">        if (result-&gt;threadCount &lt;&#x3D; 0  ||  lockCount &lt;&#x3D; 0) &#123;</span><br><span class="line">            _objc_fatal(&quot;id2data fastcache is buggy&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 还记得上层方法enter、exit调用这个方法传的参数吗？</span><br><span class="line">        switch(why) &#123;</span><br><span class="line">        case ACQUIRE: &#123;</span><br><span class="line">            &#x2F;&#x2F; enter -- 锁的个数+1</span><br><span class="line">            lockCount++;</span><br><span class="line">            &#x2F;&#x2F; 然后通过set方法存的tls表中</span><br><span class="line">            tls_set_direct(SYNC_COUNT_DIRECT_KEY, (void*)lockCount);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        case RELEASE:</span><br><span class="line">            &#x2F;&#x2F; exit -- 锁的个数-1</span><br><span class="line">            lockCount--;</span><br><span class="line">            &#x2F;&#x2F; 存放到tls表中</span><br><span class="line">            tls_set_direct(SYNC_COUNT_DIRECT_KEY, (void*)lockCount);</span><br><span class="line">            if (lockCount &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                &#x2F;&#x2F; 锁的个数等于 0 ，直接从表中移除</span><br><span class="line">                &#x2F;&#x2F; remove from fast cache</span><br><span class="line">                tls_set_direct(SYNC_DATA_DIRECT_KEY, NULL);</span><br><span class="line">                &#x2F;&#x2F; atomic because may collide with concurrent ACQUIRE</span><br><span class="line">                OSAtomicDecrement32Barrier(&amp;result-&gt;threadCount);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        case CHECK:</span><br><span class="line">            &#x2F;&#x2F; do nothing</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二步-cache"><a href="#第二步-cache" class="headerlink" title="第二步 cache"></a>第二步 cache</h2><p>SyncCache还有印象吗？内部list[0]存放的是当前的SyncData</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Check per-thread cache of already-owned locks for matching object</span><br><span class="line">&#x2F;&#x2F; 从线程的缓存池里捞数据，先看看这个函数，</span><br><span class="line">SyncCache *cache &#x3D; fetch_cache(NO);</span><br><span class="line">if (cache) &#123;</span><br><span class="line">    unsigned int i;</span><br><span class="line">    for (i &#x3D; 0; i &lt; cache-&gt;used; i++) &#123;</span><br><span class="line">        &#x2F;&#x2F; list存放的是SyncCacheItem的数组，判断每一个item中对应的object是不是我们使用@synchronized传的参数。</span><br><span class="line">        SyncCacheItem *item &#x3D; &amp;cache-&gt;list[i];</span><br><span class="line">        if (item-&gt;data-&gt;object !&#x3D; object) continue;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Found a match. 恰好在线程的缓存池中找到了</span><br><span class="line">        result &#x3D; item-&gt;data;</span><br><span class="line">        &#x2F;&#x2F; 判断错误</span><br><span class="line">        if (result-&gt;threadCount &lt;&#x3D; 0  ||  item-&gt;lockCount &lt;&#x3D; 0) &#123;</span><br><span class="line">            _objc_fatal(&quot;id2data cache is buggy&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 这是直接在线程池中的数据做的操作</span><br><span class="line">        switch(why) &#123;</span><br><span class="line">        case ACQUIRE:</span><br><span class="line">            item-&gt;lockCount++;</span><br><span class="line">            break;</span><br><span class="line">        case RELEASE:</span><br><span class="line">            item-&gt;lockCount--;</span><br><span class="line">            if (item-&gt;lockCount &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                &#x2F;&#x2F; remove from per-thread cache</span><br><span class="line">                &#x2F;&#x2F; 直接从线程池中移除</span><br><span class="line">                cache-&gt;list[i] &#x3D; cache-&gt;list[--cache-&gt;used];</span><br><span class="line">                &#x2F;&#x2F; atomic because may collide with concurrent ACQUIRE</span><br><span class="line">                OSAtomicDecrement32Barrier(&amp;result-&gt;threadCount);</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        case CHECK:</span><br><span class="line">            &#x2F;&#x2F; do nothing</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 找到了就返回</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fetch-cache-函数"><a href="#fetch-cache-函数" class="headerlink" title="fetch_cache 函数"></a>fetch_cache 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">static SyncCache *fetch_cache(bool create)</span><br><span class="line">&#123;</span><br><span class="line">    _objc_pthread_data *data;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 这个函数有解释，而且一目了然，没有从线程缓存池中拿到数据，并且参数create&#x3D;&#x3D;NO，然后null，如果参数是YES，则创建一个。所以这里没有找到的话返回的是null，这个函数的主要作用就是获取cache</span><br><span class="line">    data &#x3D; _objc_fetch_pthread_data(create);</span><br><span class="line">    if (!data) return NULL;</span><br><span class="line"></span><br><span class="line">    if (!data-&gt;syncCache) &#123;</span><br><span class="line">        if (!create) &#123;</span><br><span class="line">            return NULL;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            int count &#x3D; 4;</span><br><span class="line">            data-&gt;syncCache &#x3D; (SyncCache *)</span><br><span class="line">                calloc(1, sizeof(SyncCache) + count*sizeof(SyncCacheItem));</span><br><span class="line">            data-&gt;syncCache-&gt;allocated &#x3D; count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Make sure there&#39;s at least one open slot in the list.</span><br><span class="line">    if (data-&gt;syncCache-&gt;allocated &#x3D;&#x3D; data-&gt;syncCache-&gt;used) &#123;</span><br><span class="line">        data-&gt;syncCache-&gt;allocated *&#x3D; 2;</span><br><span class="line">        data-&gt;syncCache &#x3D; (SyncCache *)</span><br><span class="line">            realloc(data-&gt;syncCache, sizeof(SyncCache) </span><br><span class="line">                    + data-&gt;syncCache-&gt;allocated * sizeof(SyncCacheItem));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return data-&gt;syncCache;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先看一下<code>_objc_fetch_pthread_data</code>，这个方法已经说的很清楚了，有注释，代码都不用看。</p><p>其主要目的是从tls表中获取通过key获取<code>_objc_pthread_data</code>（结构体），内部有一个<code>SyncCache</code>，我们的最终目的也就是通过这个<code>SyncCache</code>中的list获取我们<code>@synchronized(object)</code>中object对应的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;***********************************************************************</span><br><span class="line">* _objc_fetch_pthread_data</span><br><span class="line">* Fetch objc&#39;s pthread data for this thread.</span><br><span class="line">* If the data doesn&#39;t exist yet and create is NO, return NULL.</span><br><span class="line">* If the data doesn&#39;t exist yet and create is YES, allocate and return it.</span><br><span class="line">**********************************************************************&#x2F;</span><br><span class="line">_objc_pthread_data *_objc_fetch_pthread_data(bool create)</span><br><span class="line">&#123;</span><br><span class="line">    _objc_pthread_data *data;</span><br><span class="line"></span><br><span class="line">    data &#x3D; (_objc_pthread_data *)tls_get(_objc_pthread_key);</span><br><span class="line">    if (!data  &amp;&amp;  create) &#123;</span><br><span class="line">        data &#x3D; (_objc_pthread_data *)</span><br><span class="line">            calloc(1, sizeof(_objc_pthread_data));</span><br><span class="line">        tls_set(_objc_pthread_key, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 首先执行的就上锁，这是一个自旋锁</span><br><span class="line">lockp-&gt;lock();</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    SyncData* p;</span><br><span class="line">    SyncData* firstUnused &#x3D; NULL;</span><br><span class="line">    &#x2F;&#x2F; 执行for循环，这里的目的就是一直在遍历SyncData这个链表，看其中是否有数据</span><br><span class="line">    for (p &#x3D; *listp; p !&#x3D; NULL; p &#x3D; p-&gt;nextData) &#123;</span><br><span class="line">        &#x2F;&#x2F; 有数据，正好是我们用的那个。直接执行done语句</span><br><span class="line">        if ( p-&gt;object &#x3D;&#x3D; object ) &#123;</span><br><span class="line">            result &#x3D; p;</span><br><span class="line">            &#x2F;&#x2F; atomic because may collide with concurrent RELEASE</span><br><span class="line">            OSAtomicIncrement32Barrier(&amp;result-&gt;threadCount);</span><br><span class="line">            goto done;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 没有发现，则直接赋值</span><br><span class="line">        if ( (firstUnused &#x3D;&#x3D; NULL) &amp;&amp; (p-&gt;threadCount &#x3D;&#x3D; 0) )</span><br><span class="line">            firstUnused &#x3D; p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; no SyncData currently associated with object</span><br><span class="line">    if ( (why &#x3D;&#x3D; RELEASE) || (why &#x3D;&#x3D; CHECK) )</span><br><span class="line">        goto done;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; an unused one was found, use it</span><br><span class="line">    if ( firstUnused !&#x3D; NULL ) &#123;</span><br><span class="line">        &#x2F;&#x2F; for循环中捞到的值赋给result</span><br><span class="line">        result &#x3D; firstUnused;</span><br><span class="line">        &#x2F;&#x2F; object指向@synchronized的参数</span><br><span class="line">        result-&gt;object &#x3D; (objc_object *)object;</span><br><span class="line">        &#x2F;&#x2F; 线程数是1</span><br><span class="line">        result-&gt;threadCount &#x3D; 1;</span><br><span class="line">        goto done;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 上面的流程也没有得到数据，哪就自己创建一个，并且加到线程池中。</span><br><span class="line">posix_memalign((void **)&amp;result, alignof(SyncData), sizeof(SyncData));</span><br><span class="line">result-&gt;object &#x3D; (objc_object *)object;</span><br><span class="line">result-&gt;threadCount &#x3D; 1;</span><br><span class="line">new (&amp;result-&gt;mutex) recursive_mutex_t(fork_unsafe_lock);</span><br><span class="line">result-&gt;nextData &#x3D; *listp;</span><br><span class="line">*listp &#x3D; result;</span><br></pre></td></tr></table></figure><p>我们接下来看done的操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">done:</span><br><span class="line">    &#x2F;&#x2F; 自旋锁解锁， 这个锁只在第三步有使用。因为这是一个耗时操作</span><br><span class="line">    lockp-&gt;unlock();</span><br><span class="line">    if (result) &#123;</span><br><span class="line">        &#x2F;&#x2F; Only new ACQUIRE should get here.</span><br><span class="line">        &#x2F;&#x2F; All RELEASE and CHECK and recursive ACQUIRE are </span><br><span class="line">        &#x2F;&#x2F; handled by the per-thread caches above.</span><br><span class="line">        if (why &#x3D;&#x3D; RELEASE) &#123;</span><br><span class="line">            &#x2F;&#x2F; 啥都没有呢，就释放，返回nil</span><br><span class="line">            &#x2F;&#x2F; Probably some thread is incorrectly exiting </span><br><span class="line">            &#x2F;&#x2F; while the object is held by another thread.</span><br><span class="line">            return nil;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 错误判断</span><br><span class="line">        if (why !&#x3D; ACQUIRE) _objc_fatal(&quot;id2data is buggy&quot;);</span><br><span class="line">        if (result-&gt;object !&#x3D; object) _objc_fatal(&quot;id2data is buggy&quot;);</span><br><span class="line"></span><br><span class="line">#if SUPPORT_DIRECT_THREAD_KEYS</span><br><span class="line">        &#x2F;&#x2F; 走了第一步就会变成YES。</span><br><span class="line">        if (!fastCacheOccupied) &#123;</span><br><span class="line">            &#x2F;&#x2F; Save in fast thread cache</span><br><span class="line">            &#x2F;&#x2F; 把SyncData、lockCount&#x3D;1锁的个数存到tls表中，快速查找的表</span><br><span class="line">            tls_set_direct(SYNC_DATA_DIRECT_KEY, result);</span><br><span class="line">            tls_set_direct(SYNC_COUNT_DIRECT_KEY, (void*)1);</span><br><span class="line">        &#125; else </span><br><span class="line">#endif</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; Save in thread cache</span><br><span class="line">            &#x2F;&#x2F; 存到线程池的表中</span><br><span class="line">            if (!cache) cache &#x3D; fetch_cache(YES);</span><br><span class="line">            cache-&gt;list[cache-&gt;used].data &#x3D; result;</span><br><span class="line">            cache-&gt;list[cache-&gt;used].lockCount &#x3D; 1;</span><br><span class="line">            cache-&gt;used++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 返回结果。</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="lock_find_data.jpg" alt=""></p><p>图上，左边就是线程list，每一个线程有一个链表。 先从当前的链表中查找，如果找到直接处理。没有找到则从线程中找到对应的链表再处理。</p><p>所以性能是最差的，内部有两个锁，一个自旋锁，一个递归锁，再加上快速查找，线程池缓存查找，等一系列操作，十分消耗性能，但是还是使用非常广泛，就是因为使用简单，不用自己加锁、解锁。</p><p>再看另外一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (int i &#x3D; 0; i &lt; 100000; i ++) &#123;</span><br><span class="line">    dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class="line">        self.mArray &#x3D; [NSMutableArray array];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的代码，是否会发生crash？</p><p>会发生crash，就是因为点属性是一个set方法，在set方法内部，会对旧值relase，新值retain，在某一个节点，就有可能release的次数过多，造成重复释放，发生了野指针，就发生了crash。</p><p>最简单的做法就是使用<code>@synchronized(self)</code>，那能不能锁<code>@synchronized(_mArray)</code>呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@synchronized (self) &#123;</span><br><span class="line">    self.mArray &#x3D; [NSMutableArray array];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案是不能，因为在运行的过程中，_mArray会有等于nil的情况，那还能锁住啥？</p><p><code>@synchronized (self)</code>锁的对象一定要有声明周期，是可以释放的，并且block中执行的变量最好与锁住的对象有关系，两人存在声明周期上的关联。</p><p>但是也不要乱用self，当在不同线程执行不同的block时，<code>@synchronized</code>的查找会更加耗时，因为链表的查找需要从头开始找。这个时候就需要使用其他的锁来处理了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p>锁的分类</p><ol><li>自旋锁 ：atomic</li><li>互斥锁 ：@synchronized，NSLock，pthread</li><li>条件锁 ：NSCondition，NSConditionLock</li><li>递归锁 ：NSRecursiveLock</li><li>信号量 ：dispatch_semaphore</li><li>主要分为两大类：自旋锁、互斥锁</li></ol></li><li><p>@synchronized底层原理</p><ol><li>通过objc_sync_enter加锁</li><li>通过objc_sync_exit解锁</li><li>内部有一个自旋锁、一个递归锁。自旋锁用于hash表中的查找，查找线程池。递归锁用于锁住的对象的操作。</li><li>查找分为3个步奏：<ol><li>通过当前链表查找，找到了直接返回</li><li>当前链表没有则通过线程池缓存查找，</li><li>在hash表中查找</li><li>锁住的对象最好与block执行的变量有关联关系，不要乱用self</li></ol></li></ol></li></ul><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="https://opensource.apple.com/tarballs/objc4/" target="_blank" rel="noopener">objc源码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;锁的分类&quot;&gt;&lt;a href=&quot;#锁的分类&quot; class=&quot;headerlink&quot; title=&quot;锁的分类&quot;&gt;&lt;/a&gt;锁的分类&lt;/h1&gt;&lt;h2 id=&quot;自旋锁&quot;&gt;&lt;a href=&quot;#自旋锁&quot; class=&quot;headerlink&quot; title=&quot;自旋锁&quot;&gt;&lt;/a&gt;自旋
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>GCD底层原理-3</title>
    <link href="http://liujiaboy.github.io/2021/05/16/OC%E5%8E%9F%E7%90%86/GCD-3/"/>
    <id>http://liujiaboy.github.io/2021/05/16/OC%E5%8E%9F%E7%90%86/GCD-3/</id>
    <published>2021-05-16T09:41:00.000Z</published>
    <updated>2021-05-17T02:21:40.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h1><p>先看代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">- (void)semaphore &#123;</span><br><span class="line">    &#x2F;&#x2F; 全局队列</span><br><span class="line">    dispatch_queue_t queue &#x3D; dispatch_get_global_queue(0, 0);</span><br><span class="line">    &#x2F;&#x2F; 初始化一个信号量可以并发执行2个任务</span><br><span class="line">    dispatch_semaphore_t sem &#x3D; dispatch_semaphore_create(2);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;任务1</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);</span><br><span class="line">        NSLog(@&quot;1 start..&quot;);</span><br><span class="line">        sleep(1);</span><br><span class="line">        NSLog(@&quot;1 end...&quot;);</span><br><span class="line">        dispatch_semaphore_signal(sem);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;任务2</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);</span><br><span class="line">        NSLog(@&quot;2 start..&quot;);</span><br><span class="line">        sleep(1);</span><br><span class="line">        NSLog(@&quot;2 end...&quot;);</span><br><span class="line">        dispatch_semaphore_signal(sem);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;任务3</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);</span><br><span class="line">        NSLog(@&quot;3 start..&quot;);</span><br><span class="line">        sleep(1);</span><br><span class="line">        NSLog(@&quot;3 end...&quot;);</span><br><span class="line">        dispatch_semaphore_signal(sem);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先运行一下这个demo，看输出的结果是什么样子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2021-05-16 17:38:16.018150+0800 GCDDemo[972:7272767] 1 start..</span><br><span class="line">2021-05-16 17:38:16.018154+0800 GCDDemo[972:7272769] 2 start..</span><br><span class="line">2021-05-16 17:38:17.027319+0800 GCDDemo[972:7272767] 1 end...</span><br><span class="line">2021-05-16 17:38:17.027332+0800 GCDDemo[972:7272769] 2 end...</span><br><span class="line">2021-05-16 17:38:17.027556+0800 GCDDemo[972:7272765] 3 start..</span><br><span class="line">2021-05-16 17:38:18.031174+0800 GCDDemo[972:7272765] 3 end...</span><br></pre></td></tr></table></figure><p>我们也需要看打印的时间点，先执行1、2 start，1s之后执行了1、2 end，紧接着执行3。</p><p>如果把信号量的初始值改成1呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2021-05-16 18:07:48.061949+0800 GCDDemo[1220:7292903] 1 start..</span><br><span class="line">2021-05-16 18:07:49.063438+0800 GCDDemo[1220:7292903] 1 end...</span><br><span class="line">2021-05-16 18:07:49.063639+0800 GCDDemo[1220:7292901] 2 start..</span><br><span class="line">2021-05-16 18:07:50.063905+0800 GCDDemo[1220:7292901] 2 end...</span><br><span class="line">2021-05-16 18:07:50.064202+0800 GCDDemo[1220:7292906] 3 start..</span><br><span class="line">2021-05-16 18:07:51.064940+0800 GCDDemo[1220:7292906] 3 end...</span><br></pre></td></tr></table></figure><p>结果就是先执行1，然后2，3每次间隔都是1s。</p><p>为什么能确定并发执行的个数呢？就是因为其中有两个语句，确定了最大的并发数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 执行-1操作</span><br><span class="line">dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);</span><br><span class="line">&#x2F;&#x2F; 执行+1操作</span><br><span class="line">dispatch_semaphore_signal(sem);</span><br></pre></td></tr></table></figure><p>分别看一下内部实现。</p><h2 id="dispatch-semaphore-create"><a href="#dispatch-semaphore-create" class="headerlink" title="dispatch_semaphore_create"></a>dispatch_semaphore_create</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">dispatch_semaphore_t</span><br><span class="line">dispatch_semaphore_create(intptr_t value)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_semaphore_t dsema;</span><br><span class="line">if (value &lt; 0) &#123;</span><br><span class="line">return DISPATCH_BAD_INPUT;</span><br><span class="line">&#125;</span><br><span class="line">   &#x2F;&#x2F; 初始化信号量结构体  </span><br><span class="line">dsema &#x3D; _dispatch_object_alloc(DISPATCH_VTABLE(semaphore),</span><br><span class="line">sizeof(struct dispatch_semaphore_s));</span><br><span class="line">dsema-&gt;do_next &#x3D; DISPATCH_OBJECT_LISTLESS;</span><br><span class="line">dsema-&gt;do_targetq &#x3D; _dispatch_get_default_queue(false);</span><br><span class="line">&#x2F;&#x2F; 用来保存初始化的最大并发数</span><br><span class="line">dsema-&gt;dsema_value &#x3D; value;</span><br><span class="line">_dispatch_sema4_init(&amp;dsema-&gt;dsema_sema, _DSEMA4_POLICY_FIFO);</span><br><span class="line">dsema-&gt;dsema_orig &#x3D; value;</span><br><span class="line">return dsema;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到了吧，最开始就已经有判断了，如果创建时的参数小于0，直接返回一个<code>DISPATCH_BAD_INPUT</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define DISPATCH_BAD_INPUT((void *_Nonnull)0)</span><br></pre></td></tr></table></figure><p>知道时啥了吗？就是一个野指针。</p><p>那我们接下来看<code>dispatch_semaphore_wait</code>函数。</p><h2 id="dispatch-semaphore-wait"><a href="#dispatch-semaphore-wait" class="headerlink" title="dispatch_semaphore_wait"></a>dispatch_semaphore_wait</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">intptr_t</span><br><span class="line">dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)</span><br><span class="line">&#123;</span><br><span class="line">long value &#x3D; os_atomic_dec2o(dsema, dsema_value, acquire);</span><br><span class="line">if (likely(value &gt;&#x3D; 0)) &#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">return _dispatch_semaphore_wait_slow(dsema, timeout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用了<code>os_atomic_dec2o</code>，但是有一个dec，猜测应该是减法操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#define os_atomic_dec2o(p, f, m) \</span><br><span class="line">os_atomic_sub2o(p, f, 1, m)</span><br><span class="line"></span><br><span class="line">#define os_atomic_sub2o(p, f, v, m) \</span><br><span class="line">os_atomic_sub(&amp;(p)-&gt;f, (v), m)</span><br><span class="line"></span><br><span class="line">#define os_atomic_sub(p, v, m) \</span><br><span class="line">_os_atomic_c11_op((p), (v), m, sub, -)</span><br><span class="line"></span><br><span class="line">#define _os_atomic_c11_op(p, v, m, o, op) \</span><br><span class="line">(&#123; _os_atomic_basetypeof(p) _v &#x3D; (v), _r &#x3D; \</span><br><span class="line">atomic_fetch_##o##_explicit(_os_atomic_c11_atomic(p), _v, \</span><br><span class="line">memory_order_##m); (__typeof__(_r))(_r op _v); &#125;)</span><br></pre></td></tr></table></figure><p>一层一层的宏定义，最后可以得出的函数是<code>atomic_fetch_sub_explicit</code>。<br>这是一个C语言的原子类型减的函数。也就是<code>dsema-&gt;dsema_value - 1</code>。</p><p>大于等于0都可以正常执行，否则发生等待。</p><h2 id="dispatch-semaphore-signal"><a href="#dispatch-semaphore-signal" class="headerlink" title="dispatch_semaphore_signal"></a>dispatch_semaphore_signal</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">intptr_t</span><br><span class="line">dispatch_semaphore_signal(dispatch_semaphore_t dsema)</span><br><span class="line">&#123;</span><br><span class="line">long value &#x3D; os_atomic_inc2o(dsema, dsema_value, release);</span><br><span class="line">if (likely(value &gt; 0)) &#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">if (unlikely(value &#x3D;&#x3D; LONG_MIN)) &#123;</span><br><span class="line">DISPATCH_CLIENT_CRASH(value,</span><br><span class="line">&quot;Unbalanced call to dispatch_semaphore_signal()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return _dispatch_semaphore_signal_slow(dsema);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dispatch_semaphore_signal</code>与<code>dispatch_semaphore_wait</code>正好相反，执行的是加法操作，每次加1。</p><p>这里的判断条件是<code>value &gt; 0</code>，都可以正常执行，也就是必须有1个才行，否则阻塞线程，一直处于等待状态。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>dispatch_semaphore_wait</code>和<code>dispatch_semaphore_signal</code>肯定是成对出现的。</p><h1 id="dispatch-group-调度组"><a href="#dispatch-group-调度组" class="headerlink" title="dispatch_group 调度组"></a>dispatch_group 调度组</h1><p>当我们在业务中，需要两个网络请求都返回之后，才能处理某一个业务逻辑时，调度组就能很好的发挥作用，而且用起来很简单。</p><p>先看一下简单的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">- (void)groupDemo &#123;</span><br><span class="line">    dispatch_group_t group &#x3D; dispatch_group_create();</span><br><span class="line">    dispatch_queue_t globle &#x3D; dispatch_get_global_queue(0, 0);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 1.</span><br><span class="line">    dispatch_group_enter(group);</span><br><span class="line">    dispatch_async(globle, ^&#123;</span><br><span class="line">        NSLog(@&quot;1 start ...&quot;);</span><br><span class="line">        sleep(3);</span><br><span class="line">        dispatch_group_leave(group);</span><br><span class="line">    &#125;);</span><br><span class="line">    &#x2F;&#x2F; 2.</span><br><span class="line">    dispatch_group_enter(group);</span><br><span class="line">    dispatch_async(globle, ^&#123;</span><br><span class="line">        NSLog(@&quot;2 start ...&quot;);</span><br><span class="line">        sleep(3);</span><br><span class="line">        dispatch_group_leave(group);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 3.</span><br><span class="line">    dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        NSLog(@&quot;3 ...&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们执行一下代码，发现3是最后执行的。</p><p>如果出现<code>dispatch_group_enter</code>比<code>dispatch_group_leave</code>多的情况呢？<br>不会发生crash。</p><p>如果出现<code>dispatch_group_leave</code>比<code>dispatch_group_enter</code>多的情况呢？<br>会发生crash。</p><p>这里需要注意的是：</p><ol><li><code>dispatch_group_enter</code>和<code>dispatch_group_leave</code>是成对出现的。<br> 不管执行的顺序如何，必须保证成对出现，否则不会触发<code>dispatch_group_notify</code>。</li><li><code>dispatch_group_notify</code>一般出现在最下边，有<code>dispatch_group_leave</code>就会触发，可以把3的代码放在最上边试一下。</li><li><code>dispatch_group_enter</code>和<code>dispatch_group_leave</code>可以使用<code>dispatch_group_async</code>来代替，减少代码量以及没有成对出现可能带来的问题。</li><li><code>dispatch_group_wait</code>设置超时时间，如果超时了任务还没有执行完成，则会直接触发<code>dispatch_group_notify</code>。</li></ol><p>这些代码可以试一下哈，我们接下来看内部实现原理。</p><h2 id="dispatch-group-create"><a href="#dispatch-group-create" class="headerlink" title="dispatch_group_create"></a>dispatch_group_create</h2><p>首先我们先看一下group的创建。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dispatch_group_t</span><br><span class="line">dispatch_group_create(void)</span><br><span class="line">&#123;</span><br><span class="line">return _dispatch_group_create_with_count(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用了<code>_dispatch_group_create_with_count</code>，参数是一个0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">static inline dispatch_group_t</span><br><span class="line">_dispatch_group_create_with_count(uint32_t n)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 1. 初始化dg，dispatch_group_s是一个结构体</span><br><span class="line">dispatch_group_t dg &#x3D; _dispatch_object_alloc(DISPATCH_VTABLE(group),</span><br><span class="line">sizeof(struct dispatch_group_s));</span><br><span class="line">&#x2F;&#x2F; 赋默认值</span><br><span class="line">dg-&gt;do_next &#x3D; DISPATCH_OBJECT_LISTLESS;</span><br><span class="line">dg-&gt;do_targetq &#x3D; _dispatch_get_default_queue(false);</span><br><span class="line">&#x2F;&#x2F; n &#x3D; 0，所以创建的时候永远不会执行这里。</span><br><span class="line">if (n) &#123;</span><br><span class="line">os_atomic_store2o(dg, dg_bits,</span><br><span class="line">(uint32_t)-n * DISPATCH_GROUP_VALUE_INTERVAL, relaxed);</span><br><span class="line">os_atomic_store2o(dg, do_ref_cnt, 1, relaxed); &#x2F;&#x2F; &lt;rdar:&#x2F;&#x2F;22318411&gt;</span><br><span class="line">&#125;</span><br><span class="line">return dg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建group还是很好理解的，接下来看<code>dispatch_group_enter</code></p><h2 id="dispatch-group-enter"><a href="#dispatch-group-enter" class="headerlink" title="dispatch_group_enter"></a>dispatch_group_enter</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">dispatch_group_enter(dispatch_group_t dg)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F; The value is decremented on a 32bits wide atomic so that the carry</span><br><span class="line">&#x2F;&#x2F; for the 0 -&gt; -1 transition is not propagated to the upper 32bits.</span><br><span class="line">&#x2F;&#x2F; dg-&gt;dg_bits的值从0 变成 -1</span><br><span class="line">uint32_t old_bits &#x3D; os_atomic_sub_orig2o(dg, dg_bits,</span><br><span class="line">DISPATCH_GROUP_VALUE_INTERVAL, acquire);</span><br><span class="line">uint32_t old_value &#x3D; old_bits &amp; DISPATCH_GROUP_VALUE_MASK;</span><br><span class="line">&#x2F;&#x2F; 等于0</span><br><span class="line">if (unlikely(old_value &#x3D;&#x3D; 0)) &#123;</span><br><span class="line">_dispatch_retain(dg); &#x2F;&#x2F; &lt;rdar:&#x2F;&#x2F;problem&#x2F;22318411&gt;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 我们上面执行了多个enter之后，没有发生crash，但是这里也有解释</span><br><span class="line">&#x2F;&#x2F; 超过一个最大值时也会发生crash</span><br><span class="line">if (unlikely(old_value &#x3D;&#x3D; DISPATCH_GROUP_VALUE_MAX)) &#123;</span><br><span class="line">DISPATCH_CLIENT_CRASH(old_bits,</span><br><span class="line">&quot;Too many nested calls to dispatch_group_enter()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>os_atomic_sub_orig2o</code>这个函数跟上面信号量的函数有点类似，并且已经给了注释：dg-&gt;dg_bits的值从0 变成 -1。</p><h2 id="dispatch-group-leave"><a href="#dispatch-group-leave" class="headerlink" title="dispatch_group_leave"></a>dispatch_group_leave</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">dispatch_group_leave(dispatch_group_t dg)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F; The value is incremented on a 64bits wide atomic so that the carry for</span><br><span class="line">&#x2F;&#x2F; the -1 -&gt; 0 transition increments the generation atomically.</span><br><span class="line">&#x2F;&#x2F; dg_state从-1 -&gt; 0 </span><br><span class="line">uint64_t new_state, old_state &#x3D; os_atomic_add_orig2o(dg, dg_state,</span><br><span class="line">DISPATCH_GROUP_VALUE_INTERVAL, release);</span><br><span class="line">uint32_t old_value &#x3D; (uint32_t)(old_state &amp; DISPATCH_GROUP_VALUE_MASK);</span><br><span class="line"></span><br><span class="line">if (unlikely(old_value &#x3D;&#x3D; DISPATCH_GROUP_VALUE_1)) &#123;</span><br><span class="line">old_state +&#x3D; DISPATCH_GROUP_VALUE_INTERVAL;</span><br><span class="line">do &#123;</span><br><span class="line">new_state &#x3D; old_state;</span><br><span class="line">if ((old_state &amp; DISPATCH_GROUP_VALUE_MASK) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">new_state &amp;&#x3D; ~DISPATCH_GROUP_HAS_WAITERS;</span><br><span class="line">new_state &amp;&#x3D; ~DISPATCH_GROUP_HAS_NOTIFS;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">&#x2F;&#x2F; If the group was entered again since the atomic_add above,</span><br><span class="line">&#x2F;&#x2F; we can&#39;t clear the waiters bit anymore as we don&#39;t know for</span><br><span class="line">&#x2F;&#x2F; which generation the waiters are for</span><br><span class="line">new_state &amp;&#x3D; ~DISPATCH_GROUP_HAS_NOTIFS;</span><br><span class="line">&#125;</span><br><span class="line">if (old_state &#x3D;&#x3D; new_state) break;</span><br><span class="line">&#125; while (unlikely(!os_atomic_cmpxchgv2o(dg, dg_state,</span><br><span class="line">old_state, new_state, &amp;old_state, relaxed)));</span><br><span class="line">return _dispatch_group_wake(dg, old_state, true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; old_value</span><br><span class="line">if (unlikely(old_value &#x3D;&#x3D; 0)) &#123;</span><br><span class="line">DISPATCH_CLIENT_CRASH((uintptr_t)old_value,</span><br><span class="line">&quot;Unbalanced call to dispatch_group_leave()&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们一步一步的分析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uint64_t new_state, old_state &#x3D; os_atomic_add_orig2o(dg, dg_state,</span><br><span class="line">DISPATCH_GROUP_VALUE_INTERVAL, release);</span><br></pre></td></tr></table></figure><p>这里有注释，写了解释内容，从-1变成了0，所以：<br>old_state = -1, new_state = 0 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uint32_t old_value &#x3D; (uint32_t)(old_state &amp; DISPATCH_GROUP_VALUE_MASK);</span><br><span class="line"></span><br><span class="line">#define DISPATCH_GROUP_VALUE_MASK       0x00000000fffffffcULL</span><br></pre></td></tr></table></figure><p>old_value 是通过&amp;运算得来的， -1 = 0xfffffffff，是一个全是1的二进制数，所以&amp;运算之后old_value = DISPATCH_GROUP_VALUE_MASK。</p><p>如果再执行一次leave操作，那么old_state=0,然后经过&amp;运算，old_value=0，也就是最后会发生crash。所以enter和leave一定要成对出现。</p><p>接下来就到重点了，当enter和leave达到平衡时，就会触发<code>_dispatch_group_wake</code>函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">static void</span><br><span class="line">_dispatch_group_wake(dispatch_group_t dg, uint64_t dg_state, bool needs_release)</span><br><span class="line">&#123;</span><br><span class="line">uint16_t refs &#x3D; needs_release ? 1 : 0; &#x2F;&#x2F; &lt;rdar:&#x2F;&#x2F;problem&#x2F;22318411&gt;</span><br><span class="line">    &#x2F;&#x2F; &amp;运算 </span><br><span class="line">if (dg_state &amp; DISPATCH_GROUP_HAS_NOTIFS) &#123;</span><br><span class="line">dispatch_continuation_t dc, next_dc, tail;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Snapshot before anything is notified&#x2F;woken &lt;rdar:&#x2F;&#x2F;problem&#x2F;8554546&gt;</span><br><span class="line">dc &#x3D; os_mpsc_capture_snapshot(os_mpsc(dg, dg_notify), &amp;tail);</span><br><span class="line">do &#123;</span><br><span class="line">dispatch_queue_t dsn_queue &#x3D; (dispatch_queue_t)dc-&gt;dc_data;</span><br><span class="line">next_dc &#x3D; os_mpsc_pop_snapshot_head(dc, tail, do_next);</span><br><span class="line">&#x2F;&#x2F; 执行这个操作，在第一章中有介绍，执行dx_push操作。直到block执行完成</span><br><span class="line">_dispatch_continuation_async(dsn_queue, dc,</span><br><span class="line">_dispatch_qos_from_pp(dc-&gt;dc_priority), dc-&gt;dc_flags);</span><br><span class="line">_dispatch_release(dsn_queue);</span><br><span class="line">&#125; while ((dc &#x3D; next_dc));</span><br><span class="line"></span><br><span class="line">refs++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (dg_state &amp; DISPATCH_GROUP_HAS_WAITERS) &#123;</span><br><span class="line">_dispatch_wake_by_address(&amp;dg-&gt;dg_gen);</span><br><span class="line">&#125;</span><br><span class="line">   &#x2F;&#x2F; 释放</span><br><span class="line">if (refs) _dispatch_release_n(dg, refs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dispatch-group-notify"><a href="#dispatch-group-notify" class="headerlink" title="dispatch_group_notify"></a>dispatch_group_notify</h2><p>接下来我们看一下<code>dispatch_group_notify</code>操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">dispatch_group_notify(dispatch_group_t dg, dispatch_queue_t dq,</span><br><span class="line">dispatch_block_t db)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_continuation_t dsn &#x3D; _dispatch_continuation_alloc();</span><br><span class="line">_dispatch_continuation_init(dsn, dq, db, 0, DC_FLAG_CONSUME);</span><br><span class="line">_dispatch_group_notify(dg, dq, dsn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_dispatch_continuation_init</code> 内部是对属性赋值，保存dg(group)、dq(queue)、db(block)。在第一章有介绍。</p><p><code>_dispatch_group_notify</code>的函数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">static inline void</span><br><span class="line">_dispatch_group_notify(dispatch_group_t dg, dispatch_queue_t dq,</span><br><span class="line">dispatch_continuation_t dsn)</span><br><span class="line">&#123;</span><br><span class="line">uint64_t old_state, new_state;</span><br><span class="line">dispatch_continuation_t prev;</span><br><span class="line"></span><br><span class="line">dsn-&gt;dc_data &#x3D; dq;</span><br><span class="line">_dispatch_retain(dq);</span><br><span class="line"></span><br><span class="line">prev &#x3D; os_mpsc_push_update_tail(os_mpsc(dg, dg_notify), dsn, do_next);</span><br><span class="line">if (os_mpsc_push_was_empty(prev)) _dispatch_retain(dg);</span><br><span class="line">os_mpsc_push_update_prev(os_mpsc(dg, dg_notify), prev, dsn, do_next);</span><br><span class="line">if (os_mpsc_push_was_empty(prev)) &#123;</span><br><span class="line">os_atomic_rmw_loop2o(dg, dg_state, old_state, new_state, release, &#123;</span><br><span class="line">new_state &#x3D; old_state | DISPATCH_GROUP_HAS_NOTIFS;</span><br><span class="line">&#x2F;&#x2F; 重点哈~</span><br><span class="line">if ((uint32_t)old_state &#x3D;&#x3D; 0) &#123;</span><br><span class="line">os_atomic_rmw_loop_give_up(&#123;</span><br><span class="line">return _dispatch_group_wake(dg, new_state, false);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里会有一系列的判断，当old_value=0的时候，执行wake操作。</p><h2 id="dispatch-group-async"><a href="#dispatch-group-async" class="headerlink" title="dispatch_group_async"></a>dispatch_group_async</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">dispatch_group_async(dispatch_group_t dg, dispatch_queue_t dq,</span><br><span class="line">dispatch_block_t db)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_continuation_t dc &#x3D; _dispatch_continuation_alloc();</span><br><span class="line">uintptr_t dc_flags &#x3D; DC_FLAG_CONSUME | DC_FLAG_GROUP_ASYNC;</span><br><span class="line">dispatch_qos_t qos;</span><br><span class="line">  &#x2F;&#x2F; 任务包装器，存储block等信息</span><br><span class="line">qos &#x3D; _dispatch_continuation_init(dc, dq, db, 0, dc_flags);</span><br><span class="line">&#x2F;&#x2F; 重点_dispatch_continuation_group_async(dg, dq, dc, qos);</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>这里的重点代码是<code>_dispatch_continuation_group_async</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static inline void</span><br><span class="line">_dispatch_continuation_group_async(dispatch_group_t dg, dispatch_queue_t dq,</span><br><span class="line">dispatch_continuation_t dc, dispatch_qos_t qos)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_group_enter(dg);</span><br><span class="line">dc-&gt;dc_data &#x3D; dg;</span><br><span class="line">_dispatch_continuation_async(dq, dc, qos, dc-&gt;dc_flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到了吧，其内部有自动执行<code>dispatch_group_enter</code>操作。但是什么时候执行的leave呢？还记得上一章中介绍<code>_dispatch_continuation_invoke_inline</code>的时候吗？里头有一局代码是关于group的操作，我还专门写了注释。</p><p><code>_dispatch_continuation_async</code>是执行dx_push操作。</p><p><code>_dispatch_continuation_invoke_inline</code>在group的情况会值执行group相关的逻辑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">static inline void</span><br><span class="line">_dispatch_continuation_with_group_invoke(dispatch_continuation_t dc)</span><br><span class="line">&#123;</span><br><span class="line">struct dispatch_object_s *dou &#x3D; dc-&gt;dc_data;</span><br><span class="line">unsigned long type &#x3D; dx_type(dou);</span><br><span class="line">if (type &#x3D;&#x3D; DISPATCH_GROUP_TYPE) &#123;</span><br><span class="line">_dispatch_client_callout(dc-&gt;dc_ctxt, dc-&gt;dc_func);</span><br><span class="line">_dispatch_trace_item_complete(dc);</span><br><span class="line">dispatch_group_leave((dispatch_group_t)dou);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">DISPATCH_INTERNAL_CRASH(dx_type(dou), &quot;Unexpected object type&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯哼~这里也会执行<code>dispatch_group_leave</code>操作，这也就是dispatch_group_async可以代替enter和leave的原因。<br>下面的代码可以很好的解释<code>dispatch_group_async</code>的原理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_retain(group);</span><br><span class="line">dispatch_group_enter(group);</span><br><span class="line">dispatch_async(queue, ^&#123;</span><br><span class="line">block();</span><br><span class="line">dispatch_group_leave(group);</span><br><span class="line">dispatch_release(group);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="dispatch-source"><a href="#dispatch-source" class="headerlink" title="dispatch_source"></a>dispatch_source</h1><p><code>dispatch_source</code>是一个更为底层，直接与内核交互的东西，所以它执行起来会更快，效率更高。所以type类型是time的时候，准确率是最高的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">NSUInteger totalComplete &#x3D; 0</span><br><span class="line">&#x2F;&#x2F; 创建DISPATCH_SOURCE_TYPE_DATA_ADD类型的source，再主线程执行</span><br><span class="line">dispatch_source_t source &#x3D; dispatch_source_create(DISPATCH_SOURCE_TYPE_DATA_ADD, 0, 0, dispatch_get_main_queue());</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置block回调</span><br><span class="line">dispatch_source_set_event_handler(self.source, ^&#123;</span><br><span class="line">    &#x2F;&#x2F; 获取数据</span><br><span class="line">    NSUInteger value &#x3D; dispatch_source_get_data(self.source);</span><br><span class="line">    totalComplete +&#x3D; value;</span><br><span class="line">    NSLog(@&quot;进度: %.2f&quot;, totalComplete&#x2F;100.0);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 开始执行</span><br><span class="line">dispatch_resume(source);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 异步执行for</span><br><span class="line">for (int i&#x3D; 0; i&lt;100; i++) &#123;</span><br><span class="line">    dispatch_async(self.queue, ^&#123;</span><br><span class="line">        sleep(1);</span><br><span class="line">        &#x2F;&#x2F; merge数据，每次+1，每次merge就会触发dispatch_source_set_event_handler</span><br><span class="line">        dispatch_source_merge_data(self.source, 1);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(100 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    &#x2F;&#x2F; 停止</span><br><span class="line">    dispatch_suspend(_source);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面内容就是source相关的。不是很常用，了解一下。</p><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><ol><li>dispatch_semaphore信号量<ol><li><code>dispatch_semaphore_signal</code>与<code>dispatch_semaphore_wait</code>成对出现。</li><li><code>dispatch_semaphore_signal</code>是+1操作</li><li><code>dispatch_semaphore_wait</code>是-1操作</li></ol></li><li>dispatch_group调度组<ol><li>enter和leave是成对出现的，否则可能发生crash</li><li><code>dispatch_group_notify</code>一般放在最下边执行。</li><li><code>dispatch_group_async</code>可以替代enter和leave两个操作。</li><li><code>dispatch_group_wait</code>超时操作。</li></ol></li><li>source，每次执行merge操作就会执行block。</li></ol><p>以上就是GCD的相关内容了，写了3章，有不对的地方欢迎指正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;信号量&quot;&gt;&lt;a href=&quot;#信号量&quot; class=&quot;headerlink&quot; title=&quot;信号量&quot;&gt;&lt;/a&gt;信号量&lt;/h1&gt;&lt;p&gt;先看代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>对称加密</title>
    <link href="http://liujiaboy.github.io/2021/05/14/%E9%80%86%E5%90%91/mima-3-%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    <id>http://liujiaboy.github.io/2021/05/14/%E9%80%86%E5%90%91/mima-3-%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/</id>
    <published>2021-05-14T03:06:56.000Z</published>
    <updated>2021-05-31T02:29:59.122Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h1><p>明文通过密钥加密得到密文。密文通过密钥解密得到明文。</p><p>这类算法再加密和解密时使用相同的密钥，或是使用两个可以简单的互相推算的密钥。与公开密钥加密相比，要求双方获取相同的密钥是对称加密的主要缺点之一。</p><h2 id="DES-数据加密标准"><a href="#DES-数据加密标准" class="headerlink" title="DES - 数据加密标准"></a>DES - 数据加密标准</h2><blockquote><p>数据加密标准（Data Encryption Standard），简称DES。是一种对称密钥加密块密码算法。</p></blockquote><p>DES是一种典型的块密码。一种将明文分成若干个固定长度的小块，再通过一系列的加密生成同样长度的密文的算法。对DES而言，块长度为64位（8个字节）。</p><p>强度不够，现在使用较少。</p><h2 id="3DES-三重数据加密算法"><a href="#3DES-三重数据加密算法" class="headerlink" title="3DES - 三重数据加密算法"></a>3DES - 三重数据加密算法</h2><p>英文名称：Triple Data Encryption Algorithm，缩写为TDEA。也被称为3DES（Triple DES）。是一种对称密钥加密块密码，相当于是对每个数据块应用三次DES算法。</p><p>就是因为DES强度过低容易被暴利破解，3DES则是在DES的基础上演变过来的。采用3个密钥，即通过增加DES密钥长度来避免被暴利破解。</p><h2 id="AES-高级加密标准"><a href="#AES-高级加密标准" class="headerlink" title="AES - 高级加密标准"></a>AES - 高级加密标准</h2><p>AES（Advanced Encryption Standard）是用来代替DES的高级加密算法。AES的区块长度固定为128比特，密钥长度则可以是128，192或256比特。</p><h1 id="分组密码"><a href="#分组密码" class="headerlink" title="分组密码"></a>分组密码</h1><p>分组密码的数学模型是将明文消息编码表示后的数字（简称明文数字）序列，划分成长度为n的组（可看成长度为n的矢量），每组分别在密钥的控制下变换成等长的密文序列。</p><h2 id="ECB模式"><a href="#ECB模式" class="headerlink" title="ECB模式"></a>ECB模式</h2><p>ECB（Electronic Codebook，电码本）模式是分组密码的一种最基本的工作模式。在该模式下，待处理信息被分为大小合适的分组，然后分别对每一分组独立进行加密或解密处理。</p><p><img src="ECB.jpg" alt=""></p><h3 id="ECB的特点"><a href="#ECB的特点" class="headerlink" title="ECB的特点"></a>ECB的特点</h3><ol><li>是分组密码最基本的工作模式，操作简单，易于实现。</li><li>所有分组的加密方式一致，明文中重复内容会在密文中体现。不能很好的隐藏数据。</li></ol><h2 id="CBC模式"><a href="#CBC模式" class="headerlink" title="CBC模式"></a>CBC模式</h2><p>CBC指的是密码分组链接。</p><p>在CBC模式中，每个明文块先与前一个密文块进行异或后，再进行加密。在这种方法中，每个密文块都依赖于它前面的所有明文块。同时，为了保证每条消息的唯一性，在第一个块中需要使用初始化向量。</p><p><img src="CBC.jpg" alt=""></p><h3 id="CBC的特点"><a href="#CBC的特点" class="headerlink" title="CBC的特点"></a>CBC的特点</h3><ol><li>CBC是最常用的工作模式</li><li>CBC加密依赖分组的上下文，加密过程是串行的，无法并行化。</li><li>明文中微小的变动，会影响后续所有的密文块多改变。</li><li>其中一个分组丢失（错误），后续所有的都将作废</li></ol><p>CBC可以有效的保证密文的完整性，如果一个分组数据块丢失或改变，后续的数据都将无法正常解密。</p><h2 id="IV-初始化向量"><a href="#IV-初始化向量" class="headerlink" title="IV 初始化向量"></a>IV 初始化向量</h2><p>初始化向量（IV，Initialization Vector）是许多任务作模式中用于将加密随机化的一个位块，由此即使同样的明文被多次加密也会产生不同的密文，避免了较慢的重新产生密钥的过程。</p><p>在CBC模式下，同一密钥的情况下重用IV会导致泄露明文首个块的信息。</p><h1 id="终端命令"><a href="#终端命令" class="headerlink" title="终端命令"></a>终端命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> *  终端测试指令</span><br><span class="line"> *</span><br><span class="line"> *  DES(ECB)加密，key是必须的，</span><br><span class="line"> *  $ echo -n hello | openssl enc -des-ecb -K &#39;abc&#39; -nosalt | base64</span><br><span class="line"> *</span><br><span class="line"> *  DES(ECB)解密</span><br><span class="line"> *  $ echo -n P8TeEbkBDds&#x3D; | base64 -D | openssl enc -des-ecb -K &#39;abc&#39; -nosalt -d</span><br><span class="line"> *  DES(CBC)加密</span><br><span class="line"> *  $ echo -n hello | openssl enc -des-cbc -iv 12345678 -K &#39;abc&#39; -nosalt | base64</span><br><span class="line"> *  </span><br><span class="line"> *  DES(CBC)解密</span><br><span class="line"> *  $ echo -n fGkwzGbNomY&#x3D; | base64 -D | openssl enc -des-cbc -iv 12345678 -K &#39;abc&#39; -nosalt -d</span><br><span class="line"> *</span><br><span class="line"> *  ----------------------</span><br><span class="line"> * </span><br><span class="line"> *  AES(ECB)加密 密钥长度128，192或256比特</span><br><span class="line"> *  $ echo -n hello | openssl enc -aes-128-ecb -K &#39;abc&#39; -nosalt | base64</span><br><span class="line"> *</span><br><span class="line"> *  AES(ECB)解密</span><br><span class="line"> *  $ echo -n p+nWPDBu7iGX0ZXgw3jAXw&#x3D;&#x3D; | base64 -D | openssl enc -aes-128-ecb -K &#39;abc&#39; -nosalt -d</span><br><span class="line"> *  </span><br><span class="line"> *  AES(CBC)加密</span><br><span class="line"> *  $ echo -n hello | openssl enc -aes-128-cbc -iv 12345678 -K &#39;abc&#39; -nosalt | base64</span><br><span class="line"> *</span><br><span class="line"> *  AES(CBC)解密</span><br><span class="line"> *  $ echo -n jK4VTW&#x2F;k7P8PsmW16ztlCw&#x3D;&#x3D; | base64 -D | openssl enc -aes-128-cbc -iv 12345678 -K &#39;abc&#39; -nosalt -d</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure><p>加密过程是先加密，然后再base64编码。<br>解密过程是先base64解码。然后再解密。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%8A%A0%E5%AF%86%E6%A8%99%E6%BA%96" target="_blank" rel="noopener">DES-数据加密标准</a><br><a href="https://zh.wikipedia.org/wiki/3DES" target="_blank" rel="noopener">3DES</a><br><a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86" target="_blank" rel="noopener">AES - 高级加密标准</a><br><a href="https://zh.wikipedia.org/wiki/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">分组密码工作模式-ECB、CBC等</a><br><a href="https://baike.baidu.com/item/ECB%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">ECB模式-百度百科</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对称加密&quot;&gt;&lt;a href=&quot;#对称加密&quot; class=&quot;headerlink&quot; title=&quot;对称加密&quot;&gt;&lt;/a&gt;对称加密&lt;/h1&gt;&lt;p&gt;明文通过密钥加密得到密文。密文通过密钥解密得到明文。&lt;/p&gt;
&lt;p&gt;这类算法再加密和解密时使用相同的密钥，或是使用两个可以简
      
    
    </summary>
    
    
      <category term="逆向" scheme="http://liujiaboy.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="对称加密" scheme="http://liujiaboy.github.io/tags/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>GCD底层原理-2</title>
    <link href="http://liujiaboy.github.io/2021/05/12/OC%E5%8E%9F%E7%90%86/GCD-2/"/>
    <id>http://liujiaboy.github.io/2021/05/12/OC%E5%8E%9F%E7%90%86/GCD-2/</id>
    <published>2021-05-12T13:32:39.000Z</published>
    <updated>2021-05-17T02:21:40.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dispatch-async异步函数的调用"><a href="#dispatch-async异步函数的调用" class="headerlink" title="dispatch_async异步函数的调用"></a>dispatch_async异步函数的调用</h1><p>我们继续上一章的内容继续研究一下block的调用，在<code>NSlog</code>这里打一个断点，看看调用的函数栈。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dispatch_async(conque, ^&#123;</span><br><span class="line">    NSLog(@&quot;12334&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们运行代码，通过bt命令看一下调用栈：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(lldb) bt</span><br><span class="line">* thread #8, queue &#x3D; &#39;conque&#39;, stop reason &#x3D; breakpoint 2.1</span><br><span class="line">  * frame #0: 0x0000000103abd0d7 __29-[ViewController viewDidLoad]_block_invoke(.block_descriptor&#x3D;0x0000000103ac00e8) at ViewController.m:48:9</span><br><span class="line">    frame #1: 0x0000000103d2e7ec libdispatch.dylib&#96;_dispatch_call_block_and_release + 12</span><br><span class="line">    frame #2: 0x0000000103d2f9c8 libdispatch.dylib&#96;_dispatch_client_callout + 8</span><br><span class="line">    frame #3: 0x0000000103d32316 libdispatch.dylib&#96;_dispatch_continuation_pop + 557</span><br><span class="line">    frame #4: 0x0000000103d3171c libdispatch.dylib&#96;_dispatch_async_redirect_invoke + 779</span><br><span class="line">    frame #5: 0x0000000103d41508 libdispatch.dylib&#96;_dispatch_root_queue_drain + 351</span><br><span class="line">    frame #6: 0x0000000103d41e6d libdispatch.dylib&#96;_dispatch_worker_thread2 + 135</span><br><span class="line">    frame #7: 0x00007fff60c8e453 libsystem_pthread.dylib&#96;_pthread_wqthread + 244</span><br><span class="line">    frame #8: 0x00007fff60c8d467 libsystem_pthread.dylib&#96;start_wqthread + 15</span><br></pre></td></tr></table></figure><p>从下往上看哈~函数的调用竟然是通过与pthread交互之后发生的。然后到了<code>_dispatch_worker_thread2</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">static void</span><br><span class="line">_dispatch_worker_thread2(pthread_priority_t pp)</span><br><span class="line">&#123;</span><br><span class="line">bool overcommit &#x3D; pp &amp; _PTHREAD_PRIORITY_OVERCOMMIT_FLAG;</span><br><span class="line">dispatch_queue_global_t dq;</span><br><span class="line"></span><br><span class="line">pp &amp;&#x3D; _PTHREAD_PRIORITY_OVERCOMMIT_FLAG | ~_PTHREAD_PRIORITY_FLAGS_MASK;</span><br><span class="line">_dispatch_thread_setspecific(dispatch_priority_key, (void *)(uintptr_t)pp);</span><br><span class="line">dq &#x3D; _dispatch_get_root_queue(_dispatch_qos_from_pp(pp), overcommit);</span><br><span class="line"></span><br><span class="line">_dispatch_introspection_thread_add();</span><br><span class="line">_dispatch_trace_runtime_event(worker_unpark, dq, 0);</span><br><span class="line"></span><br><span class="line">int pending &#x3D; os_atomic_dec2o(dq, dgq_pending, relaxed);</span><br><span class="line">dispatch_assert(pending &gt;&#x3D; 0);</span><br><span class="line">_dispatch_root_queue_drain(dq, dq-&gt;dq_priority,</span><br><span class="line">DISPATCH_INVOKE_WORKER_DRAIN | DISPATCH_INVOKE_REDIRECTING_DRAIN);</span><br><span class="line">_dispatch_voucher_debug(&quot;root queue clear&quot;, NULL);</span><br><span class="line">_dispatch_reset_voucher(NULL, DISPATCH_THREAD_PARK);</span><br><span class="line">_dispatch_trace_runtime_event(worker_park, NULL, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据函数调用栈，来到<code>_dispatch_root_queue_drain</code>这个函数。函数内容做了删减。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">static void</span><br><span class="line">_dispatch_root_queue_drain(dispatch_queue_global_t dq,</span><br><span class="line">dispatch_priority_t pri, dispatch_invoke_flags_t flags)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">  &#x2F;&#x2F; 设置当前queue</span><br><span class="line">_dispatch_queue_set_current(dq);</span><br><span class="line">_dispatch_init_basepri(pri);</span><br><span class="line">_dispatch_adopt_wlh_anon();</span><br><span class="line"></span><br><span class="line">struct dispatch_object_s *item;</span><br><span class="line">bool reset &#x3D; false;</span><br><span class="line">dispatch_invoke_context_s dic &#x3D; &#123; &#125;;</span><br><span class="line">#if DISPATCH_COCOA_COMPAT</span><br><span class="line">_dispatch_last_resort_autorelease_pool_push(&amp;dic);</span><br><span class="line">#endif &#x2F;&#x2F; DISPATCH_COCOA_COMPAT</span><br><span class="line">_dispatch_queue_drain_init_narrowing_check_deadline(&amp;dic, pri);</span><br><span class="line">_dispatch_perfmon_start();</span><br><span class="line">while (likely(item &#x3D; _dispatch_root_queue_drain_one(dq))) &#123;</span><br><span class="line">if (reset) _dispatch_wqthread_override_reset();</span><br><span class="line">&#x2F;&#x2F; 函数重点</span><br><span class="line">_dispatch_continuation_pop_inline(item, &amp;dic, flags, dq);</span><br><span class="line">reset &#x3D; _dispatch_reset_basepri_override();</span><br><span class="line">if (unlikely(_dispatch_queue_drain_should_narrow(&amp;dic))) &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">_dispatch_reset_wlh();</span><br><span class="line">_dispatch_clear_basepri();</span><br><span class="line">&#x2F;&#x2F; 设置当前queue为NULL</span><br><span class="line">_dispatch_queue_set_current(NULL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数内一开始需要将当前队列调回来，然后执行block中的内容，完成之后，在把对列置空。block内部怎么调用，就在<code>_dispatch_continuation_pop_inline</code>里头。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">static inline void</span><br><span class="line">_dispatch_continuation_pop_inline(dispatch_object_t dou,</span><br><span class="line">dispatch_invoke_context_t dic, dispatch_invoke_flags_t flags,</span><br><span class="line">dispatch_queue_class_t dqu)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_pthread_root_queue_observer_hooks_t observer_hooks &#x3D;</span><br><span class="line">_dispatch_get_pthread_root_queue_observer_hooks();</span><br><span class="line">if (observer_hooks) observer_hooks-&gt;queue_will_execute(dqu._dq);</span><br><span class="line">flags &amp;&#x3D; _DISPATCH_INVOKE_PROPAGATE_MASK;</span><br><span class="line">if (_dispatch_object_has_vtable(dou)) &#123;</span><br><span class="line">dx_invoke(dou._dq, dic, flags);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">_dispatch_continuation_invoke_inline(dou, flags, dqu);</span><br><span class="line">&#125;</span><br><span class="line">if (observer_hooks) observer_hooks-&gt;queue_did_execute(dqu._dq);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们猜测有可能执行的是<code>_dispatch_continuation_invoke_inline</code>，因为其他的看着也不咋像那回事。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">static inline void</span><br><span class="line">_dispatch_continuation_invoke_inline(dispatch_object_t dou,</span><br><span class="line">dispatch_invoke_flags_t flags, dispatch_queue_class_t dqu)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_continuation_t dc &#x3D; dou._dc, dc1;</span><br><span class="line">dispatch_invoke_with_autoreleasepool(flags, &#123;</span><br><span class="line">uintptr_t dc_flags &#x3D; dc-&gt;dc_flags;</span><br><span class="line">_dispatch_continuation_voucher_adopt(dc, dc_flags);</span><br><span class="line">if (!(dc_flags &amp; DC_FLAG_NO_INTROSPECTION)) &#123;</span><br><span class="line">_dispatch_trace_item_pop(dqu, dou);</span><br><span class="line">&#125;</span><br><span class="line">if (dc_flags &amp; DC_FLAG_CONSUME) &#123;</span><br><span class="line">dc1 &#x3D; _dispatch_continuation_free_cacheonly(dc);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">dc1 &#x3D; NULL;</span><br><span class="line">&#125;</span><br><span class="line">if (unlikely(dc_flags &amp; DC_FLAG_GROUP_ASYNC)) &#123;</span><br><span class="line">  &#x2F;&#x2F; 这个可能跟group有关</span><br><span class="line">_dispatch_continuation_with_group_invoke(dc);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  &#x2F;&#x2F; 应该会执行这个</span><br><span class="line">_dispatch_client_callout(dc-&gt;dc_ctxt, dc-&gt;dc_func);</span><br><span class="line">_dispatch_trace_item_complete(dc);</span><br><span class="line">&#125;</span><br><span class="line">if (unlikely(dc1)) &#123;</span><br><span class="line">_dispatch_continuation_free_to_cache_limit(dc1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">_dispatch_perfmon_workitem_inc();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dispatch_invoke_with_autoreleasepool</code>这里有一个<code>autoreleasepool</code>，源码内部对自动释放池的操作还是很严谨的。</p><p>这里先看看<code>_dispatch_client_callout</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">_dispatch_client_callout(void *ctxt, dispatch_function_t f)</span><br><span class="line">&#123;</span><br><span class="line">_dispatch_get_tsd_base();</span><br><span class="line">void *u &#x3D; _dispatch_get_unwind_tsd();</span><br><span class="line">&#x2F;&#x2F; 执行这里</span><br><span class="line">if (likely(!u)) return f(ctxt);</span><br><span class="line">_dispatch_set_unwind_tsd(NULL);</span><br><span class="line">f(ctxt);</span><br><span class="line">_dispatch_free_unwind_tsd();</span><br><span class="line">_dispatch_set_unwind_tsd(u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到了木有啊，f还记得是啥吗？回到上一章的这个<code>_dispatch_continuation_init</code>的函数中，有解释哦，f就等于<code>_dispatch_call_block_and_release</code>。</p><p>我们再回过头看看打印的函数调用栈，最后执行的不就是<code>_dispatch_call_block_and_release</code>吗？前面的dispatch_asyn内部实现对block进行保存，这里进行调用。</p><p>到此为止整个异步函数的调用就结束了。</p><p>结合上一章的<code>dispatch_async</code>的内容，我们可以通过汇编添加<code>symbolic breakpoint</code>进行判断，我们所分析的函数执行步奏是否正确，在不知道执行流程的情况下，添加断点可以让我们比较清楚的知道其内部是怎么执行的。这里就不去操作了哈~</p><h1 id="dispatch-once"><a href="#dispatch-once" class="headerlink" title="dispatch_once"></a>dispatch_once</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static dispatch_once_t onceToken;</span><br><span class="line">dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">    NSLog(@&quot;once ...&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们使用dispatch_once都是这么写，经常用于创建单利或者只执行一次的代码。接下来看看其内部实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#define dispatch_once _dispatch_once</span><br><span class="line"></span><br><span class="line">void</span><br><span class="line">_dispatch_once(dispatch_once_t *predicate,</span><br><span class="line">DISPATCH_NOESCAPE dispatch_block_t block)</span><br><span class="line">&#123;</span><br><span class="line">if (DISPATCH_EXPECT(*predicate, ~0l) !&#x3D; ~0l) &#123;</span><br><span class="line">  &#x2F;&#x2F; 调用这个</span><br><span class="line">    dispatch_once(predicate, block);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">   &#x2F;&#x2F; 栅栏函数</span><br><span class="line">   dispatch_compiler_barrier();</span><br><span class="line">&#125;</span><br><span class="line">DISPATCH_COMPILER_CAN_ASSUME(*predicate &#x3D;&#x3D; ~0l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个函数内部会通过条件判断执行栅栏函数还是，调用dispatch_once;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@param val</span><br><span class="line">A pointer to a dispatch_once_t that is used to test whether the block has completed or not.</span><br><span class="line"></span><br><span class="line">@param block</span><br><span class="line">The block to execute once.</span><br><span class="line"></span><br><span class="line">void</span><br><span class="line">dispatch_once(dispatch_once_t *val, dispatch_block_t block)</span><br><span class="line">&#123;</span><br><span class="line">    dispatch_once_f(val, block, _dispatch_Block_invoke(block));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有两个相关参数的介绍，</p><ol><li>val：是一个指针，用来判断block执行完成与否。</li><li>block：只执行一次的block块</li></ol><p>之后就到了<code>dispatch_once_f</code>方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">dispatch_once_f(dispatch_once_t *val, void *ctxt, dispatch_function_t func)</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; 1. dispatch_once_gate_t结构体</span><br><span class="line">  dispatch_once_gate_t l &#x3D; (dispatch_once_gate_t)val;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2.真机的情况下，是arm64，DISPATCH_ONCE_INLINE_FASTPATH &#x3D; 0，</span><br><span class="line">&#x2F;&#x2F; DISPATCH_ONCE_USE_QUIESCENT_COUNTER &#x3D; 0</span><br><span class="line">#if !DISPATCH_ONCE_INLINE_FASTPATH || DISPATCH_ONCE_USE_QUIESCENT_COUNTER</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; 3. 所以执行这里，进行原子类型的加载，就是判断是否执行过</span><br><span class="line">uintptr_t v &#x3D; os_atomic_load(&amp;l-&gt;dgo_once, acquire);</span><br><span class="line">if (likely(v &#x3D;&#x3D; DLOCK_ONCE_DONE)) &#123;</span><br><span class="line">   return;    </span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 4. 不会执行</span><br><span class="line">#if DISPATCH_ONCE_USE_QUIESCENT_COUNTER</span><br><span class="line">if (likely(DISPATCH_ONCE_IS_GEN(v))) &#123;</span><br><span class="line">return _dispatch_once_mark_done_if_quiesced(l, v);</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br><span class="line">#endif</span><br><span class="line">  &#x2F;&#x2F; 5. 条件判断是否执行，</span><br><span class="line">if (_dispatch_once_gate_tryenter(l)) &#123;</span><br><span class="line">   &#x2F;&#x2F; 6.</span><br><span class="line">return _dispatch_once_callout(l, ctxt, func);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 7. 等待</span><br><span class="line">return _dispatch_once_wait(l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们分析一下这个代码：</p><ol><li><p><code>dispatch_once_gate_t</code>是一个结构体，内部有两个变量<code>dispatch_gate_s dgo_gate</code>是一个锁，<code>uintptr_t dgo_once</code>是否执行过。</p></li><li><p>arm64判断。</p></li><li><p>原子类型的加载，判断当前block块是否执行过，已经执行则return。</p></li><li><p>arm64下DISPATCH_ONCE_USE_QUIESCENT_COUNTER=0</p></li><li><p>条件判断，是否执行过，其内部实现如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static inline bool</span><br><span class="line">_dispatch_once_gate_tryenter(dispatch_once_gate_t l)</span><br><span class="line">&#123;</span><br><span class="line">return os_atomic_cmpxchg(&amp;l-&gt;dgo_once, DLOCK_ONCE_UNLOCKED,</span><br><span class="line">(uintptr_t)_dispatch_lock_value_for_self(), relaxed);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 通过<code>os_atomic_cmpxchg</code>函数比较，在这个锁<code>_dispatch_lock_value_for_self</code>下判断<code>&amp;l-&gt;dgo_once, DLOCK_ONCE_UNLOCKED</code>是否相同。不相同执行6.<code>_dispatch_once_callout</code>，否则执行7.</p></li><li><p><code>_dispatch_once_callout</code>这个函数内部调用的是<code>_dispatch_client_callout</code>之前已经讲过，就是执行block的内容。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">static void</span><br><span class="line">_dispatch_once_callout(dispatch_once_gate_t l, void *ctxt,</span><br><span class="line">dispatch_function_t func)</span><br><span class="line">&#123;</span><br><span class="line"> &#x2F;&#x2F; 执行block</span><br><span class="line">_dispatch_client_callout(ctxt, func);</span><br><span class="line">&#x2F;&#x2F; &amp;l-&gt;dgo_once赋值，标记已执行</span><br><span class="line">_dispatch_once_gate_broadcast(l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 接下来看一下是如何标记的：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">static inline void</span><br><span class="line">_dispatch_once_gate_broadcast(dispatch_once_gate_t l)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F; 首先获取self的一个锁</span><br><span class="line">dispatch_lock value_self &#x3D; _dispatch_lock_value_for_self();</span><br><span class="line">uintptr_t v;</span><br><span class="line">&#x2F;&#x2F; arm64下不会执行这个</span><br><span class="line">#if DISPATCH_ONCE_USE_QUIESCENT_COUNTER</span><br><span class="line">v &#x3D; _dispatch_once_mark_quiescing(l);</span><br><span class="line">#else</span><br><span class="line">&#x2F;&#x2F; 执行这里</span><br><span class="line">v &#x3D; _dispatch_once_mark_done(l);</span><br><span class="line">#endif</span><br><span class="line">&#x2F;&#x2F; 判断锁是不是自己，是就return</span><br><span class="line">if (likely((dispatch_lock)v &#x3D;&#x3D; value_self)) return;</span><br><span class="line">_dispatch_gate_broadcast_slow(&amp;l-&gt;dgo_gate, (dispatch_lock)v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 我们在看一下<code>_dispatch_once_mark_done</code>内部实现：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static inline uintptr_t</span><br><span class="line">_dispatch_once_mark_done(dispatch_once_gate_t dgo)</span><br><span class="line">&#123;</span><br><span class="line">return os_atomic_xchg(&amp;dgo-&gt;dgo_once, DLOCK_ONCE_DONE, release);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 用这个函数<code>os_atomic_xchg</code>去改变<code>dgo_once</code>的值。</p></li><li><p><code>_dispatch_once_wait</code>函数内部是一个<code>for (;;)</code>的死循环，会一直等待<code>dispatch_once</code>的执行，执行完成之后<code>os_atomic_rmw_loop_give_up(return)</code>，不在阻塞线程。</p></li></ol><p>这就是<code>dispatch_once</code>的整个流程。使用了一个<code>dgo_once</code>变量来标记是否执行过:</p><ol><li>没有执行则去执行block，并标记<code>dgo_once</code></li><li>执行过，直接返回</li><li>正在执行，则等待block执行完成。</li></ol><h1 id="栅栏函数"><a href="#栅栏函数" class="headerlink" title="栅栏函数"></a>栅栏函数</h1><p>先看栅栏函数的代码演示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- (void)barrierDemo &#123;</span><br><span class="line">    &#x2F;&#x2F; 创建一个并发队列</span><br><span class="line">    dispatch_queue_t concurrentQueue &#x3D; dispatch_queue_create(&quot;concurrent&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F;    dispatch_queue_t concurrentQueue &#x3D; dispatch_get_global_queue(0, 0);</span><br><span class="line">    </span><br><span class="line">    &#x2F;* 1. 异步函数 *&#x2F;</span><br><span class="line">    dispatch_async(concurrentQueue, ^&#123;</span><br><span class="line">        NSLog(@&quot;1&quot;);</span><br><span class="line">        &#x2F;&#x2F;sleep(3); &#x2F;&#x2F; ①</span><br><span class="line">    &#125;);</span><br><span class="line">    &#x2F;* 2. 栅栏函数 *&#x2F; &#x2F;&#x2F; - ②dispatch_barrier_sync</span><br><span class="line">    dispatch_barrier_async(concurrentQueue, ^&#123;</span><br><span class="line">        NSLog(@&quot;2--%@--&quot;,[NSThread currentThread]);</span><br><span class="line">    &#125;);</span><br><span class="line">    &#x2F;* 3. 异步函数 *&#x2F;</span><br><span class="line">    dispatch_async(concurrentQueue, ^&#123;</span><br><span class="line">        NSLog(@&quot;3&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    NSLog(@&quot;4&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>看一下这个的打印顺序，<code>4-1-2-3</code>也有可能<code>1-4-2-3</code>，打算肯定是先2之后才3。</li><li>这时候把①的代码放开，执行sleep，看看打印顺序。<code>4-1-2-3</code>。2在1之后3s才打印</li><li>把②的代码进行替换，异步的栅栏函数，换成同步函数，看一下执行顺序：<code>1-2-4-3</code>。</li></ol><p>所以栅栏函数是拦截队列用的，会等待栅栏函数之前的任务执行完成。</p><ol><li>如果把创建的队列换成全局并发队列，会怎么样？可以试一下，这里会发生crash。因为全局队列是系统生成的，系统可能在别的地方也有调用，使用栅栏函数相当于拦截了系统函数，会出现不可控的问题。</li><li>如果是同步函数呢？同步函数本身就是按照队列中任务添加的顺序执行的。如果再加上栅栏函数，完全没有意义，反而会更耗性能。</li></ol><p>所以：栅栏函数只能用于自定义的并发队列。</p><h1 id="同步函数-dispatch-sync"><a href="#同步函数-dispatch-sync" class="headerlink" title="同步函数 dispatch_sync"></a>同步函数 dispatch_sync</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">dispatch_sync(dispatch_queue_t dq, dispatch_block_t work)</span><br><span class="line">&#123;</span><br><span class="line">uintptr_t dc_flags &#x3D; DC_FLAG_BLOCK;</span><br><span class="line">if (unlikely(_dispatch_block_has_private_data(work))) &#123;</span><br><span class="line">   &#x2F;&#x2F; 对私有数据的处理，最后还是会回到_dispatch_sync_f函数</span><br><span class="line">return _dispatch_sync_block_with_privdata(dq, work, dc_flags);</span><br><span class="line">&#125;</span><br><span class="line">_dispatch_sync_f(dq, work, _dispatch_Block_invoke(work), dc_flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个的重点就是<code>_dispatch_sync_f</code>函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static void</span><br><span class="line">_dispatch_sync_f(dispatch_queue_t dq, void *ctxt, dispatch_function_t func,</span><br><span class="line">uintptr_t dc_flags)</span><br><span class="line">&#123;</span><br><span class="line">_dispatch_sync_f_inline(dq, ctxt, func, dc_flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部没有做任何处理，只是调用了<code>_dispatch_sync_f_inline</code>函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">static inline void</span><br><span class="line">_dispatch_sync_f_inline(dispatch_queue_t dq, void *ctxt,</span><br><span class="line">dispatch_function_t func, uintptr_t dc_flags)</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; 串行队列的宽度等于1，</span><br><span class="line">if (likely(dq-&gt;dq_width &#x3D;&#x3D; 1)) &#123;</span><br><span class="line">   &#x2F;&#x2F; 所以就会执行这里。直接return</span><br><span class="line">return _dispatch_barrier_sync_f(dq, ctxt, func, dc_flags);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (unlikely(dx_metatype(dq) !&#x3D; _DISPATCH_LANE_TYPE)) &#123;</span><br><span class="line">DISPATCH_CLIENT_CRASH(0, &quot;Queue type doesn&#39;t support dispatch_sync&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch_lane_t dl &#x3D; upcast(dq)._dl;</span><br><span class="line">&#x2F;&#x2F; Global concurrent queues and queues bound to non-dispatch threads</span><br><span class="line">&#x2F;&#x2F; always fall into the slow case, see DISPATCH_ROOT_QUEUE_STATE_INIT_VALUE</span><br><span class="line">if (unlikely(!_dispatch_queue_try_reserve_sync_width(dl))) &#123;</span><br><span class="line">   &#x2F;&#x2F; 发生死锁的原因。</span><br><span class="line">return _dispatch_sync_f_slow(dl, ctxt, func, 0, dl, dc_flags);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (unlikely(dq-&gt;do_targetq-&gt;do_targetq)) &#123;</span><br><span class="line">return _dispatch_sync_recurse(dl, ctxt, func, dc_flags);</span><br><span class="line">&#125;</span><br><span class="line">_dispatch_introspection_sync_begin(dl);</span><br><span class="line">_dispatch_sync_invoke_and_complete(dl, ctxt, func DISPATCH_TRACE_ARG(</span><br><span class="line">_dispatch_trace_item_sync_push_pop(dq, ctxt, func, dc_flags)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这个<code>_dispatch_barrier_sync_f</code>函数，是不是感觉很眼熟，跟上面说的栅栏函数一样啊，我们接着看一下栅栏函数的内部实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">dispatch_barrier_sync(dispatch_queue_t dq, dispatch_block_t work)</span><br><span class="line">&#123;</span><br><span class="line">uintptr_t dc_flags &#x3D; DC_FLAG_BARRIER | DC_FLAG_BLOCK;</span><br><span class="line">if (unlikely(_dispatch_block_has_private_data(work))) &#123;</span><br><span class="line">return _dispatch_sync_block_with_privdata(dq, work, dc_flags);</span><br><span class="line">&#125;</span><br><span class="line">_dispatch_barrier_sync_f(dq, work, _dispatch_Block_invoke(work), dc_flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还真的是一模一样啊，同步函数内部竟然是一个同步栅栏函数。</p><p>我们再一步步的探索，<code>_dispatch_barrier_sync_f</code>内部调用的是<code>_dispatch_barrier_sync_f_inline</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">static inline void</span><br><span class="line">_dispatch_barrier_sync_f_inline(dispatch_queue_t dq, void *ctxt,</span><br><span class="line">dispatch_function_t func, uintptr_t dc_flags)</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; tid是一个mach_port类型，获取当前的mach_port，一般情况下，mach_port是和线程同时存在的，用来保活。</span><br><span class="line">dispatch_tid tid &#x3D; _dispatch_tid_self();</span><br><span class="line"></span><br><span class="line">if (unlikely(dx_metatype(dq) !&#x3D; _DISPATCH_LANE_TYPE)) &#123;</span><br><span class="line">DISPATCH_CLIENT_CRASH(0, &quot;Queue type doesn&#39;t support dispatch_sync&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch_lane_t dl &#x3D; upcast(dq)._dl;</span><br><span class="line">if (unlikely(!_dispatch_queue_try_acquire_barrier_sync(dl, tid))) &#123;</span><br><span class="line">   &#x2F;&#x2F; 这里也会发生死锁</span><br><span class="line">return _dispatch_sync_f_slow(dl, ctxt, func, DC_FLAG_BARRIER, dl,</span><br><span class="line">DC_FLAG_BARRIER | dc_flags);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (unlikely(dl-&gt;do_targetq-&gt;do_targetq)) &#123;</span><br><span class="line">return _dispatch_sync_recurse(dl, ctxt, func,</span><br><span class="line">DC_FLAG_BARRIER | dc_flags);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 对列内部进行排序</span><br><span class="line">_dispatch_introspection_sync_begin(dl);</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">_dispatch_lane_barrier_sync_invoke_and_complete(dl, ctxt, func</span><br><span class="line">DISPATCH_TRACE_ARG(_dispatch_trace_item_sync_push_pop(</span><br><span class="line">dq, ctxt, func, dc_flags | DC_FLAG_BARRIER)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着就到了block调用和调用完成的函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">static void</span><br><span class="line">_dispatch_lane_barrier_sync_invoke_and_complete(dispatch_lane_t dq,</span><br><span class="line">void *ctxt, dispatch_function_t func DISPATCH_TRACE_ARG(void *dc))</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; 这里执行block的内容，</span><br><span class="line">_dispatch_sync_function_invoke_inline(dq, ctxt, func);</span><br><span class="line">_dispatch_trace_item_complete(dc);</span><br><span class="line">if (unlikely(dq-&gt;dq_items_tail || dq-&gt;dq_width &gt; 1)) &#123;</span><br><span class="line">return _dispatch_lane_barrier_complete(dq, 0, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; block执行完成之后，对当前线程操作，因为同步操作会占用当前线程</span><br><span class="line">&#x2F;&#x2F; 执行完之后，需要后续的任务继续执行。</span><br><span class="line">const uint64_t fail_unlock_mask &#x3D; DISPATCH_QUEUE_SUSPEND_BITS_MASK |</span><br><span class="line">DISPATCH_QUEUE_ENQUEUED | DISPATCH_QUEUE_DIRTY |</span><br><span class="line">DISPATCH_QUEUE_RECEIVED_OVERRIDE |</span><br><span class="line">DISPATCH_QUEUE_RECEIVED_SYNC_WAIT;</span><br><span class="line">uint64_t old_state, new_state;</span><br><span class="line">dispatch_wakeup_flags_t flags &#x3D; 0;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; loop寻找当前线程，根据线程的状态释放当前任务的堵塞。不在阻塞当前线程</span><br><span class="line">os_atomic_rmw_loop2o(dq, dq_state, old_state, new_state, release, &#123;</span><br><span class="line">new_state  &#x3D; old_state - DISPATCH_QUEUE_SERIAL_DRAIN_OWNED;</span><br><span class="line">new_state &amp;&#x3D; ~DISPATCH_QUEUE_DRAIN_UNLOCK_MASK;</span><br><span class="line">new_state &amp;&#x3D; ~DISPATCH_QUEUE_MAX_QOS_MASK;</span><br><span class="line">if (unlikely(old_state &amp; fail_unlock_mask)) &#123;</span><br><span class="line">os_atomic_rmw_loop_give_up(&#123;</span><br><span class="line">return _dispatch_lane_barrier_complete(dq, 0, flags);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">if (_dq_state_is_base_wlh(old_state)) &#123;</span><br><span class="line">_dispatch_event_loop_assert_not_owned((dispatch_wlh_t)dq);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先看一下<code>_dispatch_sync_function_invoke_inline</code>函数的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">static inline void</span><br><span class="line">_dispatch_sync_function_invoke_inline(dispatch_queue_class_t dq, void *ctxt,</span><br><span class="line">dispatch_function_t func)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_thread_frame_s dtf;</span><br><span class="line">_dispatch_thread_frame_push(&amp;dtf, dq);</span><br><span class="line">_dispatch_client_callout(ctxt, func);</span><br><span class="line">_dispatch_perfmon_workitem_inc();</span><br><span class="line">_dispatch_thread_frame_pop(&amp;dtf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其主要目的是把当前任务添加（push）到线程中，然后执行<code>_dispatch_client_callout</code>(这个就不细说了)，执行完成之后pop出去。</p><p>这个就是同步函数为啥会阻塞当前线程的内部原理。接下来我们再看看死锁。</p><h2 id="同步死锁"><a href="#同步死锁" class="headerlink" title="同步死锁"></a>同步死锁</h2><p>我们再回到<code>_dispatch_sync_f_inline</code>函数，看看发生死锁的原因<code>_dispatch_sync_f_slow</code>。在同步函数内部和栅栏函数内部都会发生死锁。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">static void</span><br><span class="line">_dispatch_sync_f_slow(dispatch_queue_class_t top_dqu, void *ctxt,</span><br><span class="line">dispatch_function_t func, uintptr_t top_dc_flags,</span><br><span class="line">dispatch_queue_class_t dqu, uintptr_t dc_flags)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_queue_t top_dq &#x3D; top_dqu._dq;</span><br><span class="line">dispatch_queue_t dq &#x3D; dqu._dq;</span><br><span class="line">if (unlikely(!dq-&gt;do_targetq)) &#123;</span><br><span class="line">   &#x2F;&#x2F; 没有找到target执行invoke</span><br><span class="line">return _dispatch_sync_function_invoke(dq, ctxt, func);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 设置默认值</span><br><span class="line">pthread_priority_t pp &#x3D; _dispatch_get_priority();</span><br><span class="line">struct dispatch_sync_context_s dsc &#x3D; &#123;</span><br><span class="line">.dc_flags    &#x3D; DC_FLAG_SYNC_WAITER | dc_flags,</span><br><span class="line">.dc_func     &#x3D; _dispatch_async_and_wait_invoke,</span><br><span class="line">.dc_ctxt     &#x3D; &amp;dsc,</span><br><span class="line">.dc_other    &#x3D; top_dq,</span><br><span class="line">.dc_priority &#x3D; pp | _PTHREAD_PRIORITY_ENFORCE_FLAG,</span><br><span class="line">.dc_voucher  &#x3D; _voucher_get(),</span><br><span class="line">.dsc_func    &#x3D; func,</span><br><span class="line">.dsc_ctxt    &#x3D; ctxt,</span><br><span class="line">.dsc_waiter  &#x3D; _dispatch_tid_self(),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; push到队列中</span><br><span class="line">_dispatch_trace_item_push(top_dq, &amp;dsc);</span><br><span class="line">&#x2F;&#x2F; 等待当前线程，这里会一直等</span><br><span class="line">__DISPATCH_WAIT_FOR_QUEUE__(&amp;dsc, dq);</span><br><span class="line"></span><br><span class="line">if (dsc.dsc_func &#x3D;&#x3D; NULL) &#123;</span><br><span class="line">&#x2F;&#x2F; dsc_func being cleared means that the block ran on another thread ie.</span><br><span class="line">&#x2F;&#x2F; case (2) as listed in _dispatch_async_and_wait_f_slow.</span><br><span class="line">dispatch_queue_t stop_dq &#x3D; dsc.dc_other;</span><br><span class="line">return _dispatch_sync_complete_recurse(top_dq, stop_dq, top_dc_flags);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_dispatch_introspection_sync_begin(top_dq);</span><br><span class="line">_dispatch_trace_item_pop(top_dq, &amp;dsc);</span><br><span class="line">_dispatch_sync_invoke_and_complete_recurse(top_dq, ctxt, func,top_dc_flags</span><br><span class="line">DISPATCH_TRACE_ARG(&amp;dsc));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">static void</span><br><span class="line">__DISPATCH_WAIT_FOR_QUEUE__(dispatch_sync_context_t dsc, dispatch_queue_t dq)</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; 获取当前的状态</span><br><span class="line">uint64_t dq_state &#x3D; _dispatch_wait_prepare(dq);</span><br><span class="line">&#x2F;&#x2F; 判断状态是否是waiter</span><br><span class="line">if (unlikely(_dq_state_drain_locked_by(dq_state, dsc-&gt;dsc_waiter))) &#123;</span><br><span class="line">   &#x2F;&#x2F; 发生crash</span><br><span class="line">DISPATCH_CLIENT_CRASH((uintptr_t)dq_state,</span><br><span class="line">&quot;dispatch_sync called on queue &quot;</span><br><span class="line">&quot;already owned by current thread&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dsc-&gt;dsc_waiter</code>的值是在上一层函数通过<code>_dispatch_tid_self()</code>获取到的。然后判断是否是在等待，是的话则触发crash。</p><p>我们还用之前的例子来看一下死锁的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (void)textDemo4 &#123;</span><br><span class="line">    &#x2F;&#x2F; 串行队列</span><br><span class="line">    dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;queue&quot;, NULL);</span><br><span class="line">    NSLog(@&quot;1&quot;);</span><br><span class="line">    &#x2F;&#x2F; 异步函数</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        NSLog(@&quot;2&quot;);</span><br><span class="line">        &#x2F;&#x2F; 同步</span><br><span class="line">        dispatch_sync(queue, ^&#123;</span><br><span class="line">            NSLog(@&quot;3&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">        NSLog(@&quot;4&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    NSLog(@&quot;5&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下，发现就会crash，如果</p><p><img src="loop-demo.jpg" alt=""></p><p>可以看出最后的调用栈就是我们上面分析的<code>_dispatch_sync_f_slow</code> -&gt; <code>__DISPATCH_WAIT_FOR_QUEUE__</code>。</p><p>还用这张图来分析它的原因，虽然我们已经看到了其内部的实现原理。<br><img src="loop-queue.jpg" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>异步函数的调用逻辑原理</li><li>dispatch_once的原理：使用dgo_once标记是否执行过。</li><li>栅栏函数<ol><li>只用于自定义的并发函数</li></ol></li><li>dispatch_sync 同步函数<ol><li>内部是一个栅栏函数</li><li>死锁的原因：互相等待</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;dispatch-async异步函数的调用&quot;&gt;&lt;a href=&quot;#dispatch-async异步函数的调用&quot; class=&quot;headerlink&quot; title=&quot;dispatch_async异步函数的调用&quot;&gt;&lt;/a&gt;dispatch_async异步函数的调用&lt;/
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>GCD底层原理-1</title>
    <link href="http://liujiaboy.github.io/2021/05/10/OC%E5%8E%9F%E7%90%86/GCD-1/"/>
    <id>http://liujiaboy.github.io/2021/05/10/OC%E5%8E%9F%E7%90%86/GCD-1/</id>
    <published>2021-05-10T13:24:11.000Z</published>
    <updated>2021-05-17T02:21:40.554Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GCD简介"><a href="#GCD简介" class="headerlink" title="GCD简介"></a>GCD简介</h1><p>全称是 Grand Central Dispatch。底层为C语言，将任务添加到队列，并且指定执行任务的函数。GCD提供了非常强大的函数。</p><h2 id="GCD的优势"><a href="#GCD的优势" class="headerlink" title="GCD的优势"></a>GCD的优势</h2><ul><li>是苹果公司为多核的并行运算提出的解决方案</li><li>会自动利用更多的CPU内核(比如双核、四核)</li><li>会自动管理线程的生命周期(创建线程、调度任务、销毁线程) 程序员只需要告诉 GCD 想要执行什么任务，不需要编写任何线程管理代码</li></ul><h2 id="同步和异步函数"><a href="#同步和异步函数" class="headerlink" title="同步和异步函数"></a>同步和异步函数</h2><p>GCD使用block封装任务，任务的block没有参数也没有返回值。</p><p>任务的调度有同步和异步之分。</p><h3 id="同步dispatch-sync"><a href="#同步dispatch-sync" class="headerlink" title="同步dispatch_sync"></a>同步<code>dispatch_sync</code></h3><ol><li>必须等待当前语句执行完毕，才会执行下一条语句。</li><li>同步不会开启线程。</li><li>在当前线程执行block任务。</li></ol><h3 id="异步-dispatch-async"><a href="#异步-dispatch-async" class="headerlink" title="异步 dispatch_async"></a>异步 <code>dispatch_async</code></h3><ol><li>会开启新线程执行block任务</li><li>异步是多线程的代名词</li></ol><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列是一种数据结构，遵循先进先出的原则（FIFO）。分为串行队列和并发队列（并行）。</p><p>不管是串行还是并发队列，谁在队列的最前头谁先开始执行。但是执行的快慢与当前所需资源有关。</p><p><img src="queue.jpg" alt=""></p><p>串行等待上一个任务执行完成<br>并发不会等待上一个任务执行完成</p><h2 id="函数与队列"><a href="#函数与队列" class="headerlink" title="函数与队列"></a>函数与队列</h2><h3 id="同步函数-串行队列"><a href="#同步函数-串行队列" class="headerlink" title="同步函数 + 串行队列"></a>同步函数 + 串行队列</h3><ul><li>不会开启线程，在当前线程执行任务</li><li>执行完一个执行下一个，会产生堵塞</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建串行队列</span><br><span class="line">- (void)serialSyncTest&#123;</span><br><span class="line">    dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;queue1&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">    for (int i &#x3D; 0; i &lt; 20; i++) &#123;</span><br><span class="line">        &#x2F;&#x2F; a</span><br><span class="line">        dispatch_sync(queue, ^&#123;</span><br><span class="line">            &#x2F;&#x2F; b</span><br><span class="line">            NSLog(@&quot;i &#x3D; %d, thread &#x3D; %@&quot;,i,[NSThread currentThread]);</span><br><span class="line">        &#125;);</span><br><span class="line">        &#x2F;&#x2F; c</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会从0到19，按照a-b-c的顺序输出所有数据。根据打印的线程，发现就是主线程，并不会开启新线程。</p><h3 id="同步函数-并发队列"><a href="#同步函数-并发队列" class="headerlink" title="同步函数 + 并发队列"></a>同步函数 + 并发队列</h3><ul><li>不会开启线程，在当前线程执行任务</li><li>任务一个接着一个执行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (void)concurrentSyncTest&#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;1:创建并发队列</span><br><span class="line">    dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;queue2&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    for (int i &#x3D; 0; i&lt;20; i++) &#123;</span><br><span class="line">        dispatch_sync(queue, ^&#123;</span><br><span class="line">            NSLog(@&quot;i &#x3D; %d, thread &#x3D; %@&quot;,i,[NSThread currentThread]);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    NSLog(@&quot;hello queue&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步并发队列，会按照顺序执行，最后打印<code>hello queue</code>。</p><p>同步函数的情况下，不管是串行还是并发，都不会开启新线程，任务按步执行。</p><h3 id="异步函数-串行队列"><a href="#异步函数-串行队列" class="headerlink" title="异步函数 + 串行队列"></a>异步函数 + 串行队列</h3><ul><li>开启新线程</li><li>任务一个接一个执行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 异步串行</span><br><span class="line">- (void)serialAsyncTest&#123;</span><br><span class="line">    &#x2F;&#x2F;1:创建串行队列</span><br><span class="line">    dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;queue3&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">    for (int i &#x3D; 0; i&lt;20; i++) &#123;</span><br><span class="line">        &#x2F;&#x2F; a</span><br><span class="line">        dispatch_async(queue, ^&#123;</span><br><span class="line">            &#x2F;&#x2F; b</span><br><span class="line">            NSLog(@&quot;i &#x3D; %d，thread &#x3D; %@&quot;,i,[NSThread currentThread]);</span><br><span class="line">        &#125;);</span><br><span class="line">        &#x2F;&#x2F; c</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; d</span><br><span class="line">    NSLog(@&quot;hello queue&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于是异步串行队列，线程的创建会有耗时操作，在for循环中执行的顺序是a-c-b(a)，执行了a之后是c，在之后不一定是a还是b。</p><p>而d语句可能先执行，也可能后执行。</p><p>根据线程的打印情况，发现会开启新线程。</p><h3 id="异步函数-并发队列"><a href="#异步函数-并发队列" class="headerlink" title="异步函数 + 并发队列"></a>异步函数 + 并发队列</h3><ul><li>开启新线程，并开始执行</li><li>任务异步执行，没有顺序，与CPU调度有关</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (void)concurrentAsyncTest&#123;</span><br><span class="line">    &#x2F;&#x2F;1:创建并发队列</span><br><span class="line">    dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;queue4&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    for (int i &#x3D; 0; i&lt;20; i++) &#123;</span><br><span class="line">        dispatch_async(queue, ^&#123;</span><br><span class="line">            NSLog(@&quot;%d-%@&quot;,i,[NSThread currentThread]);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    NSLog(@&quot;hello queue&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会开启新的线程，执行没有顺序。</p><h2 id="函数队列的面试题"><a href="#函数队列的面试题" class="headerlink" title="函数队列的面试题"></a>函数队列的面试题</h2><h3 id="异步并发队列"><a href="#异步并发队列" class="headerlink" title="异步并发队列"></a>异步并发队列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (void)textDemo &#123;</span><br><span class="line">    dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;queue&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    NSLog(@&quot;1&quot;);</span><br><span class="line">    &#x2F;&#x2F; 耗时</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        NSLog(@&quot;2&quot;);</span><br><span class="line">        dispatch_async(queue, ^&#123;</span><br><span class="line">            NSLog(@&quot;3&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">        NSLog(@&quot;4&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    NSLog(@&quot;5&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个并行队列，内部是异步执行。当block内部有任务需要执行时，会产生耗时，所以就会先执行完成block外部的简单调用。而在block内部，是按照正常的流程执行的。</p><p>打印的结果是<code>1 5 2 4 3</code>。</p><h3 id="异步串行队列"><a href="#异步串行队列" class="headerlink" title="异步串行队列"></a>异步串行队列</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (void)textDemo1&#123;</span><br><span class="line">    &#x2F;&#x2F; 串行队列</span><br><span class="line">    dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;queue&quot;, NULL);</span><br><span class="line">    NSLog(@&quot;1&quot;);</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        NSLog(@&quot;2&quot;);</span><br><span class="line">        dispatch_async(queue, ^&#123;</span><br><span class="line">            NSLog(@&quot;3&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">        NSLog(@&quot;4&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    NSLog(@&quot;5&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要是block内部需要执行，则一定是耗时操作，所以先执行1，然后5，在异步串行队列内部，是与外部一样的道理，</p><p>结果是：1 5 2 4 3</p><h3 id="并发队列-异步同步嵌套"><a href="#并发队列-异步同步嵌套" class="headerlink" title="并发队列 异步同步嵌套"></a>并发队列 异步同步嵌套</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (void)textDemo3 &#123;</span><br><span class="line">    &#x2F;&#x2F; 并发队列</span><br><span class="line">    dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;queue&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    NSLog(@&quot;1&quot;);</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        NSLog(@&quot;2&quot;);</span><br><span class="line">        dispatch_sync(queue, ^&#123;</span><br><span class="line">            NSLog(@&quot;3&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">        NSLog(@&quot;4&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    NSLog(@&quot;5&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为 1 5 2 3 4<br>同步并发队列也不会开启新线程，一个一个执行。</p><h3 id="串行-异步同步嵌套"><a href="#串行-异步同步嵌套" class="headerlink" title="串行 异步同步嵌套"></a>串行 异步同步嵌套</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (void)textDemo4 &#123;</span><br><span class="line">    &#x2F;&#x2F; 串行队列</span><br><span class="line">    dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;queue&quot;, NULL);</span><br><span class="line">    NSLog(@&quot;1&quot;);</span><br><span class="line">    &#x2F;&#x2F; 异步函数</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        NSLog(@&quot;2&quot;);</span><br><span class="line">        &#x2F;&#x2F; 同步</span><br><span class="line">        dispatch_sync(queue, ^&#123;</span><br><span class="line">            NSLog(@&quot;3&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">        NSLog(@&quot;4&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">    NSLog(@&quot;5&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面已经有过异步串行、异步并行的例子了，只要异步函数内部有任务要执行，就属于耗时操作，会优先执行完毕外部的简单操作。所以先执行 1 5</p><p>在异步函数内部，继续串行执行。这时候会执行2，然后碰到了同步串行队列。而同步串行队列是需要等待外部执行完成之后才会执行，但是4也在等待同步函数的执行，造成了互相等待，发生了死锁。</p><p><img src="loop-queue.jpg" alt=""></p><p>这里即使把4注释掉，也同样会发生死锁。</p><p>所以结果为： 1 5 2 – 死锁</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我们一定要清楚，不管是异步还是同步，都是对与block块和其下一行代码来说的。在block内部不管当前是异步还是同步，串行还是并行，都是从上往下执行的。</p><p>另外并发和串行的区别：</p><ul><li>并发不会等待一个任务执行完成才执行。</li><li>串行会等待一个任务执行完毕才执行。</li></ul><p>同步和异步：<br>同步和异步是对当前线程而言的。</p><ul><li>异步函数下，不管是串行队列还是并行队列，都不影响block块之外的内存执。因为block内部是在新开启的线程中执行的。</li><li>同步函数下，并行队列不受影响，因为并行不需要等待上一个任务执行完成。如果是串行队列，那在当前线程下会发生死锁。</li></ul><h1 id="主队列-amp-全局队列"><a href="#主队列-amp-全局队列" class="headerlink" title="主队列 &amp; 全局队列"></a>主队列 &amp; 全局队列</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t serial &#x3D; dispatch_queue_create(&quot;serial&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">dispatch_queue_t conque &#x3D; dispatch_queue_create(&quot;conque&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">dispatch_queue_t mainQueue &#x3D; dispatch_get_main_queue();</span><br><span class="line">dispatch_queue_t globQueue &#x3D; dispatch_get_global_queue(0, 0);</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;%@\n%@\n%@\n%@&quot;,serial,conque,mainQueue,globQueue);</span><br></pre></td></tr></table></figure><p>打印一些这4个队列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;OS_dispatch_queue_serial: serial&gt;</span><br><span class="line">&lt;OS_dispatch_queue_concurrent: conque&gt;</span><br><span class="line">&lt;OS_dispatch_queue_main: com.apple.main-thread&gt;</span><br><span class="line">&lt;OS_dispatch_queue_global: com.apple.root.default-qos&gt;</span><br></pre></td></tr></table></figure><p>这里打印了4个队列，但是其实一共只有两个队列，就是串行队列和并发队列。</p><p>通过汇编手法，我们发现GCD的源码存在与<code>libdispatch.dylib</code>库中，我们就从这个库里看GCD的底层实现。</p><h2 id="主队列"><a href="#主队列" class="headerlink" title="主队列"></a>主队列</h2><p><code>dispatch_get_main_queue()</code>主队列专门用来在主线程上调度任务的<b>串行队列</b>，并不会开启新线程。</p><p>如果当前主线程正在执行任务，那么无论主队列中被添加了什么任务，都不会被调度执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t mainQueue &#x3D; dispatch_get_main_queue();</span><br></pre></td></tr></table></figure><p>我们通过源码查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">dispatch_queue_main_t</span><br><span class="line">dispatch_get_main_queue(void)</span><br><span class="line">&#123;</span><br><span class="line">return DISPATCH_GLOBAL_OBJECT(dispatch_queue_main_t, _dispatch_main_q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>dispatch_get_main_queue</code>的解释中，我们发现：主队列依赖于主线程<code>dispatch_main()</code>和<code>runloop</code>，并且主线程是在<code>main()</code>函数之前自动创建的（dyld的流程）。</p><p>先看看啥是<code>dispatch_queue_main_t</code></p><blockquote><p>A dispatch queue that is bound to the app’s main thread and executes tasks serially on that thread.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typedef NSObject&lt;OS_dispatch_queue_main&gt; *dispatch_queue_main_t;</span><br></pre></td></tr></table></figure><p>可以看出来<code>OS_dispatch_queue_main</code>是一个类。</p><p>那我们找一找<code>DISPATCH_GLOBAL_OBJECT</code>这个的实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define DISPATCH_GLOBAL_OBJECT(type, object) ((OS_OBJECT_BRIDGE type)&amp;(object))</span><br></pre></td></tr></table></figure><p>这是一个宏定义，内部使用的是一个type类型强转之后与object进行二进制的”&amp;“运算。</p><p>然后看看这两个参数：</p><p><code>dispatch_queue_main_t</code>：</p><blockquote><p>The type of the default queue that is bound to the main thread<br>从字面意思就是把默认线程绑定到主线程。</p></blockquote><p><code>_dispatch_main_q</code>：</p><blockquote><p>Returns the default queue that is bound to the main thread.<br>返回一个绑定了主线程的默认线程。接下来我们通过源码看一下<code>_dispatch_main_q</code>。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">struct dispatch_queue_static_s _dispatch_main_q &#x3D; &#123;</span><br><span class="line">DISPATCH_GLOBAL_OBJECT_HEADER(queue_main),</span><br><span class="line">#if !DISPATCH_USE_RESOLVERS</span><br><span class="line">.do_targetq &#x3D; _dispatch_get_default_queue(true),</span><br><span class="line">#endif</span><br><span class="line">.dq_state &#x3D; DISPATCH_QUEUE_STATE_INIT_VALUE(1) |</span><br><span class="line">DISPATCH_QUEUE_ROLE_BASE_ANON,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.main-thread&quot;,</span><br><span class="line">.dq_atomic_flags &#x3D; DQF_THREAD_BOUND | DQF_WIDTH(1),</span><br><span class="line">.dq_serialnum &#x3D; 1,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>_dispatch_main_q</code>是一个结构体：</p><p><code>dq_label</code>：使用的标签，上方代码中打印出来的东西。<br><code>dq_atomic_flags</code>：是一个flag，DQF_WIDTH(1)表示宽度，1只能通过1个<br><code>dq_serialnum</code>：串行数是1</p><p>知道了两个参数，我们直接使用”&amp;“运算看是否能得到我们想要的主线程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t mainQueue &#x3D; (OS_OBJECT_BRIDGE dispatch_queue_main_t)&amp;(_dispatch_main_q);</span><br></pre></td></tr></table></figure><p>得到的这个mainQueue与上方的点结果是一直到。</p><p>接下来我们得验证一下，<code>dispatch_get_main_queue</code>是在main函数之前执行的。在dyld的流程中，我们知道他会执行一个<code>libdispatch_init(void)</code>的操作。在它的内部源码中有如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">libdispatch_init(void)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F; ...</span><br><span class="line">&#x2F;&#x2F; line 7921</span><br><span class="line">#if DISPATCH_USE_RESOLVERS &#x2F;&#x2F; rdar:&#x2F;&#x2F;problem&#x2F;8541707</span><br><span class="line">_dispatch_main_q.do_targetq &#x3D; _dispatch_get_default_queue(true);</span><br><span class="line">#endif</span><br><span class="line">  &#x2F;&#x2F; 设置当前线程</span><br><span class="line">_dispatch_queue_set_current(&amp;_dispatch_main_q);</span><br><span class="line">&#x2F;&#x2F; 绑定线程</span><br><span class="line">_dispatch_queue_set_bound_thread(&amp;_dispatch_main_q);</span><br><span class="line">&#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第7758行代码，可以看到创建了<code>_dispatch_main_q</code>静态结构体，之后设置当前线程为为主线程，然后进行绑定。</p><h2 id="全局队列"><a href="#全局队列" class="headerlink" title="全局队列"></a>全局队列</h2><p><code>dispatch_get_global_queue(0,0)</code>，为了方便使用，苹果创建了全局队列，全局队列是一个<b>并发队列</b>。</p><p>在使用多线程开发时，如果对队列没有特殊需求，在执行异步任务时，可以直接使用全局队列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_global_t</span><br><span class="line">dispatch_get_global_queue(intptr_t identifier, uintptr_t flags);</span><br></pre></td></tr></table></figure><p>这里有两个参数：<br>第一个identifier：表示优先级，与QOS的优先级一一对应。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DISPATCH_QUEUE_PRIORITY_HIGH        &#x2F;&#x2F; 高</span><br><span class="line">DISPATCH_QUEUE_PRIORITY_DEFAULT     &#x2F;&#x2F; 默认</span><br><span class="line">DISPATCH_QUEUE_PRIORITY_LOW         &#x2F;&#x2F; 低</span><br><span class="line">DISPATCH_QUEUE_PRIORITY_BACKGROUND  &#x2F;&#x2F; BACKGROUND</span><br></pre></td></tr></table></figure><p>第二个参数是flag：<br>保留供将来使用的标志。始终将此参数指定为0。</p><p>接下来，查看一下源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_global_t</span><br><span class="line">dispatch_get_global_queue(long priority, unsigned long flags)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_assert(countof(_dispatch_root_queues) &#x3D;&#x3D;</span><br><span class="line">DISPATCH_ROOT_QUEUE_COUNT);</span><br><span class="line"></span><br><span class="line">if (flags &amp; ~(unsigned long)DISPATCH_QUEUE_OVERCOMMIT) &#123;</span><br><span class="line">return DISPATCH_BAD_INPUT;</span><br><span class="line">&#125;</span><br><span class="line">dispatch_qos_t qos &#x3D; _dispatch_qos_from_queue_priority(priority);</span><br><span class="line">#if !HAVE_PTHREAD_WORKQUEUE_QOS</span><br><span class="line">if (qos &#x3D;&#x3D; QOS_CLASS_MAINTENANCE) &#123;</span><br><span class="line">qos &#x3D; DISPATCH_QOS_BACKGROUND;</span><br><span class="line">&#125; else if (qos &#x3D;&#x3D; QOS_CLASS_USER_INTERACTIVE) &#123;</span><br><span class="line">qos &#x3D; DISPATCH_QOS_USER_INITIATED;</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br><span class="line">if (qos &#x3D;&#x3D; DISPATCH_QOS_UNSPECIFIED) &#123;</span><br><span class="line">return DISPATCH_BAD_INPUT;</span><br><span class="line">&#125;</span><br><span class="line">return _dispatch_get_root_queue(qos, flags &amp; DISPATCH_QUEUE_OVERCOMMIT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一坨东西其实都不用看，只需要看到最后<code>return _dispatch_get_root_queue()</code>是这么个东西。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static inline dispatch_queue_global_t</span><br><span class="line">_dispatch_get_root_queue(dispatch_qos_t qos, bool overcommit)</span><br><span class="line">&#123;</span><br><span class="line">if (unlikely(qos &lt; DISPATCH_QOS_MIN || qos &gt; DISPATCH_QOS_MAX)) &#123;</span><br><span class="line">DISPATCH_CLIENT_CRASH(qos, &quot;Corrupted priority&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return &amp;_dispatch_root_queues[2 * (qos - 1) + overcommit];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_dispatch_root_queues[]</code>应该就是一个数组，通过传进来的参数获取对应的queue。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">struct dispatch_queue_global_s _dispatch_root_queues[] &#x3D; &#123;</span><br><span class="line">&#x2F;&#x2F; ...</span><br><span class="line">  .dq_atomic_flags &#x3D; DQF_WIDTH(DISPATCH_QUEUE_WIDTH_POOL), \</span><br><span class="line">_DISPATCH_ROOT_QUEUE_ENTRY(MAINTENANCE, 0,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.root.maintenance-qos&quot;,</span><br><span class="line">.dq_serialnum &#x3D; 4,</span><br><span class="line">),</span><br><span class="line">_DISPATCH_ROOT_QUEUE_ENTRY(MAINTENANCE, DISPATCH_PRIORITY_FLAG_OVERCOMMIT,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.root.maintenance-qos.overcommit&quot;,</span><br><span class="line">.dq_serialnum &#x3D; 5,</span><br><span class="line">),</span><br><span class="line">_DISPATCH_ROOT_QUEUE_ENTRY(BACKGROUND, 0,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.root.background-qos&quot;,</span><br><span class="line">.dq_serialnum &#x3D; 6,</span><br><span class="line">),</span><br><span class="line">_DISPATCH_ROOT_QUEUE_ENTRY(BACKGROUND, DISPATCH_PRIORITY_FLAG_OVERCOMMIT,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.root.background-qos.overcommit&quot;,</span><br><span class="line">.dq_serialnum &#x3D; 7,</span><br><span class="line">),</span><br><span class="line">_DISPATCH_ROOT_QUEUE_ENTRY(UTILITY, 0,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.root.utility-qos&quot;,</span><br><span class="line">.dq_serialnum &#x3D; 8,</span><br><span class="line">),</span><br><span class="line">_DISPATCH_ROOT_QUEUE_ENTRY(UTILITY, DISPATCH_PRIORITY_FLAG_OVERCOMMIT,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.root.utility-qos.overcommit&quot;,</span><br><span class="line">.dq_serialnum &#x3D; 9,</span><br><span class="line">),</span><br><span class="line">_DISPATCH_ROOT_QUEUE_ENTRY(DEFAULT, DISPATCH_PRIORITY_FLAG_FALLBACK,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.root.default-qos&quot;,</span><br><span class="line">.dq_serialnum &#x3D; 10,</span><br><span class="line">),</span><br><span class="line">_DISPATCH_ROOT_QUEUE_ENTRY(DEFAULT,</span><br><span class="line">DISPATCH_PRIORITY_FLAG_FALLBACK | DISPATCH_PRIORITY_FLAG_OVERCOMMIT,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.root.default-qos.overcommit&quot;,</span><br><span class="line">.dq_serialnum &#x3D; 11,</span><br><span class="line">),</span><br><span class="line">_DISPATCH_ROOT_QUEUE_ENTRY(USER_INITIATED, 0,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.root.user-initiated-qos&quot;,</span><br><span class="line">.dq_serialnum &#x3D; 12,</span><br><span class="line">),</span><br><span class="line">_DISPATCH_ROOT_QUEUE_ENTRY(USER_INITIATED, DISPATCH_PRIORITY_FLAG_OVERCOMMIT,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.root.user-initiated-qos.overcommit&quot;,</span><br><span class="line">.dq_serialnum &#x3D; 13,</span><br><span class="line">),</span><br><span class="line">_DISPATCH_ROOT_QUEUE_ENTRY(USER_INTERACTIVE, 0,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.root.user-interactive-qos&quot;,</span><br><span class="line">.dq_serialnum &#x3D; 14,</span><br><span class="line">),</span><br><span class="line">_DISPATCH_ROOT_QUEUE_ENTRY(USER_INTERACTIVE, DISPATCH_PRIORITY_FLAG_OVERCOMMIT,</span><br><span class="line">.dq_label &#x3D; &quot;com.apple.root.user-interactive-qos.overcommit&quot;,</span><br><span class="line">.dq_serialnum &#x3D; 15,</span><br><span class="line">),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们看到了lable的内容，有我们刚才打印的那个<code>com.apple.root.default-qos</code>。会根据我们设置的优先级返回不同的全局队列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dq_atomic_flags &#x3D; DQF_WIDTH(DISPATCH_QUEUE_WIDTH_POOL)</span><br><span class="line"></span><br><span class="line">#define DISPATCH_QUEUE_WIDTH_FULL0x1000ull</span><br><span class="line">#define DISPATCH_QUEUE_WIDTH_POOL (DISPATCH_QUEUE_WIDTH_FULL - 1)</span><br></pre></td></tr></table></figure><p>dq_atomic_flags的值也就是    (0x1000 - 1) = 4095</p><h1 id="dispatch-queue-create-原理"><a href="#dispatch-queue-create-原理" class="headerlink" title="dispatch_queue_create 原理"></a>dispatch_queue_create 原理</h1><p>直奔主题，在源码中查看<code>dispatch_queue_create</code>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t</span><br><span class="line">dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)</span><br><span class="line">&#123;</span><br><span class="line">return _dispatch_lane_create_with_target(label, attr,</span><br><span class="line">DISPATCH_TARGET_QUEUE_DEFAULT, true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里传了两个参数，第一个是标签，表示创建的队列，第二个标识串行还是并发。</p><h2 id="串行：DISPATCH-QUEUE-SERIAL"><a href="#串行：DISPATCH-QUEUE-SERIAL" class="headerlink" title="串行：DISPATCH_QUEUE_SERIAL"></a>串行：DISPATCH_QUEUE_SERIAL</h2><p>我们看一下源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define DISPATCH_QUEUE_SERIAL NULL</span><br></pre></td></tr></table></figure><p>所以，通常情况下，我们在创建串行队列时，也会使用<code>NULL</code>来替换。</p><h2 id="并发：DISPATCH-QUEUE-CONCURRENT"><a href="#并发：DISPATCH-QUEUE-CONCURRENT" class="headerlink" title="并发：DISPATCH_QUEUE_CONCURRENT"></a>并发：DISPATCH_QUEUE_CONCURRENT</h2><p>我们看一下源码实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#define DISPATCH_QUEUE_CONCURRENT \</span><br><span class="line">DISPATCH_GLOBAL_OBJECT(dispatch_queue_attr_t, \</span><br><span class="line">_dispatch_queue_attr_concurrent)</span><br></pre></td></tr></table></figure><p>这里有一个<code>DISPATCH_GLOBAL_OBJECT()</code>函数，在主队列中已经介绍过了（通过&amp;运算）。</p><p><code>_dispatch_lane_create_with_target</code>这个函数中，我们发现很长很难懂，那我们就通过多年的编程经验，看它返回的时候一个什么东西，然后看这个是怎么创建的。下面的代码是经过删减的，有需要的自行查看源码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">static dispatch_queue_t</span><br><span class="line">_dispatch_lane_create_with_target(const char *label, dispatch_queue_attr_t dqa,</span><br><span class="line">dispatch_queue_t tq, bool legacy)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F; 1. 创建 dqai</span><br><span class="line">dispatch_queue_attr_info_t dqai &#x3D; _dispatch_queue_attr_to_info(dqa);</span><br><span class="line">&#x2F;&#x2F; ...</span><br><span class="line">&#x2F;&#x2F; 2. 创建vtable</span><br><span class="line">const void *vtable;</span><br><span class="line">dispatch_queue_flags_t dqf &#x3D; legacy ? DQF_MUTABLE : 0;</span><br><span class="line">if (dqai.dqai_concurrent) &#123;</span><br><span class="line">&#x2F;&#x2F; OS_dispatch_queue_concurrent</span><br><span class="line">vtable &#x3D; DISPATCH_VTABLE(queue_concurrent);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">vtable &#x3D; DISPATCH_VTABLE(queue_serial);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; ...</span><br><span class="line">&#x2F;&#x2F; 3. label赋值</span><br><span class="line">if (label) &#123;</span><br><span class="line">const char *tmp &#x3D; _dispatch_strdup_if_mutable(label);</span><br><span class="line">if (tmp !&#x3D; label) &#123;</span><br><span class="line">dqf |&#x3D; DQF_LABEL_NEEDS_FREE;</span><br><span class="line">label &#x3D; tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 4. dq alloc分配内存空间</span><br><span class="line">dispatch_lane_t dq &#x3D; _dispatch_object_alloc(vtable,</span><br><span class="line">sizeof(struct dispatch_lane_s)); </span><br><span class="line">&#x2F;&#x2F; 5. dq init操作</span><br><span class="line">_dispatch_queue_init(dq, dqf, dqai.dqai_concurrent ?</span><br><span class="line">DISPATCH_QUEUE_WIDTH_MAX : 1, DISPATCH_QUEUE_ROLE_INNER |</span><br><span class="line">(dqai.dqai_inactive ? DISPATCH_QUEUE_INACTIVE : 0)); &#x2F;&#x2F; init</span><br><span class="line">  &#x2F;&#x2F; 6. 对dq进行赋值</span><br><span class="line">dq-&gt;dq_label &#x3D; label;</span><br><span class="line">dq-&gt;dq_priority &#x3D; _dispatch_priority_make((dispatch_qos_t)dqai.dqai_qos,</span><br><span class="line">dqai.dqai_relpri);</span><br><span class="line">if (overcommit &#x3D;&#x3D; _dispatch_queue_attr_overcommit_enabled) &#123;</span><br><span class="line">dq-&gt;dq_priority |&#x3D; DISPATCH_PRIORITY_FLAG_OVERCOMMIT;</span><br><span class="line">&#125;</span><br><span class="line">if (!dqai.dqai_inactive) &#123;</span><br><span class="line">_dispatch_queue_priority_inherit_from_target(dq, tq);</span><br><span class="line">_dispatch_lane_inherit_wlh_from_target(dq, tq);</span><br><span class="line">&#125;</span><br><span class="line">_dispatch_retain(tq);</span><br><span class="line">dq-&gt;do_targetq &#x3D; tq;</span><br><span class="line">_dispatch_object_debug(dq, &quot;%s&quot;, __func__);</span><br><span class="line">return _dispatch_trace_queue_create(dq)._dq;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建dqai"><a href="#创建dqai" class="headerlink" title="创建dqai"></a>创建dqai</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_attr_info_t</span><br><span class="line">_dispatch_queue_attr_to_info(dispatch_queue_attr_t dqa)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_queue_attr_info_t dqai &#x3D; &#123; &#125;;</span><br><span class="line"></span><br><span class="line">if (!dqa) return dqai;</span><br><span class="line"></span><br><span class="line">#if DISPATCH_VARIANT_STATIC</span><br><span class="line">if (dqa &#x3D;&#x3D; &amp;_dispatch_queue_attr_concurrent) &#123; &#x2F;&#x2F; null 默认</span><br><span class="line">dqai.dqai_concurrent &#x3D; true;</span><br><span class="line">return dqai;</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">    return dqai;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还记得我们在创建队列时传的参数吗？第一个是label，第二个是串行还是并发。</p><p>这个dqai会判断当前是串行还是并发，并对<code>dqai.dqai_concurrent = true;</code>进行赋值。</p><h2 id="创建-vtable"><a href="#创建-vtable" class="headerlink" title="创建 vtable"></a>创建 vtable</h2><p><code>vtable</code>会根据当前是串行还是并发进行创建，我们一步一步的追寻<code>vtable</code>是什么。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#if OS_OBJECT_HAVE_OBJC2</span><br><span class="line">#define DISPATCH_VTABLE(name) DISPATCH_OBJC_CLASS(name)</span><br><span class="line">#define DISPATCH_OBJC_CLASS(name) (&amp;DISPATCH_CLASS_SYMBOL(name))</span><br><span class="line">#define DISPATCH_CLASS_SYMBOL(name) OS_dispatch_##name##_class</span><br><span class="line">#elif</span><br><span class="line">...</span><br><span class="line">#end</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (dqai.dqai_concurrent) &#123;</span><br><span class="line">&#x2F;&#x2F; OS_dispatch_queue_concurrent</span><br><span class="line">vtable &#x3D; DISPATCH_VTABLE(queue_concurrent);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">vtable &#x3D; DISPATCH_VTABLE(queue_serial);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过源码发现，<code>vtable</code>就是一个类。最后生成的就是<code>OS_dispatch_##name##_class</code>。</p><p><code>##name##</code>就是创建<code>vtable</code>时的参数，就会生成对应的<code>OS_dispatch_queue_serial_class</code>和<code>OS_dispatch_queue_concurrent_class</code>。</p><h2 id="label赋值"><a href="#label赋值" class="headerlink" title="label赋值"></a>label赋值</h2><p>这个就是创建时传入的那个label标签的内容。</p><h2 id="dq-alloc分配内存空间"><a href="#dq-alloc分配内存空间" class="headerlink" title="dq alloc分配内存空间"></a>dq alloc分配内存空间</h2><p>这里执行了alloc操作，开始分配内存空间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dispatch_lane_t dq &#x3D; _dispatch_object_alloc(vtable,</span><br><span class="line">sizeof(struct dispatch_lane_s)); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void *</span><br><span class="line">_dispatch_object_alloc(const void *vtable, size_t size)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F; 这个是在mac下执行</span><br><span class="line">#if OS_OBJECT_HAVE_OBJC1</span><br><span class="line">...</span><br><span class="line">#else</span><br><span class="line">&#x2F;&#x2F; 这里分配内存，isa指向</span><br><span class="line">return _os_object_alloc_realized(vtable, size);</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真正的alloc操作是在这里执行的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">inline _os_object_t</span><br><span class="line">_os_object_alloc_realized(const void *cls, size_t size)</span><br><span class="line">&#123;</span><br><span class="line">_os_object_t obj;</span><br><span class="line">dispatch_assert(size &gt;&#x3D; sizeof(struct _os_object_s));</span><br><span class="line">&#x2F;&#x2F; 开辟空间</span><br><span class="line">while (unlikely(!(obj &#x3D; calloc(1u, size)))) &#123;</span><br><span class="line">&#x2F;&#x2F; 执行的都是likely的操作，所以不会走这里，这里也没有意义，内部是sleep操作</span><br><span class="line">_dispatch_temporary_resource_shortage();</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; isa指向</span><br><span class="line">obj-&gt;os_obj_isa &#x3D; cls;</span><br><span class="line">return obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dq-init操作"><a href="#dq-init操作" class="headerlink" title="dq init操作"></a>dq init操作</h2><p>alloc之后，执行init操作。</p><p>初始化的时候会判断当前要生成并发还是串行队列，并发的话，个数是<code>DISPATCH_QUEUE_WIDTH_MAX</code>，串行是1，就是开辟的最大任务数。</p><h2 id="对dq进行赋值"><a href="#对dq进行赋值" class="headerlink" title="对dq进行赋值"></a>对dq进行赋值</h2><p>比如lable标签、overcommit，priority等赋值。同时绑定target。</p><h2 id="最后return"><a href="#最后return" class="headerlink" title="最后return"></a>最后return</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return _dispatch_trace_queue_create(dq)._dq;</span><br></pre></td></tr></table></figure><p>这里看源码都是最后返回的都是dq对应的数据。</p><h1 id="dispatch-async-源码"><a href="#dispatch-async-源码" class="headerlink" title="dispatch_async 源码"></a>dispatch_async 源码</h1><p>我们接下来看一下异步并发队列函数的源码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dispatch_async(conque, ^&#123;</span><br><span class="line">    NSLog(@&quot;12334&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">dispatch_async(dispatch_queue_t queue, dispatch_block_t block);</span><br><span class="line"></span><br><span class="line">void</span><br><span class="line">dispatch_async(dispatch_queue_t dq, dispatch_block_t work)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_continuation_t dc &#x3D; _dispatch_continuation_alloc();</span><br><span class="line">uintptr_t dc_flags &#x3D; DC_FLAG_CONSUME;</span><br><span class="line">dispatch_qos_t qos;</span><br><span class="line">  &#x2F;&#x2F; 任务包装器，只有这里有对work的操作</span><br><span class="line">qos &#x3D; _dispatch_continuation_init(dc, dq, work, 0, dc_flags);</span><br><span class="line">_dispatch_continuation_async(dq, dc, qos, dc-&gt;dc_flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dispatch_async()</code>函数内部会执行<code>_dispatch_continuation_init</code>，这个是函数中的重点。看一下源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">static inline dispatch_qos_t</span><br><span class="line">_dispatch_continuation_init(dispatch_continuation_t dc,</span><br><span class="line">dispatch_queue_class_t dqu, dispatch_block_t work,</span><br><span class="line">dispatch_block_flags_t flags, uintptr_t dc_flags)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F; 1. work就是外部的block，这里ctxt是对block的一个copy操作</span><br><span class="line">void *ctxt &#x3D; _dispatch_Block_copy(work);</span><br><span class="line"></span><br><span class="line">dc_flags |&#x3D; DC_FLAG_BLOCK | DC_FLAG_ALLOCATED;</span><br><span class="line">if (unlikely(_dispatch_block_has_private_data(work))) &#123;</span><br><span class="line">    &#x2F;&#x2F; dc_flags赋值</span><br><span class="line">dc-&gt;dc_flags &#x3D; dc_flags;</span><br><span class="line">&#x2F;&#x2F; block赋值到dc_ctxt中</span><br><span class="line">dc-&gt;dc_ctxt &#x3D; ctxt;</span><br><span class="line">&#x2F;&#x2F; will initialize all fields but requires dc_flags &amp; dc_ctxt to be set</span><br><span class="line">return _dispatch_continuation_init_slow(dc, dqu, flags);</span><br><span class="line">&#125;</span><br><span class="line">  &#x2F;&#x2F; 所以会走这里，func可以理解为work的方法名。</span><br><span class="line">dispatch_function_t func &#x3D; _dispatch_Block_invoke(work);</span><br><span class="line">if (dc_flags &amp; DC_FLAG_CONSUME) &#123;</span><br><span class="line">   &#x2F;&#x2F; 设置方法</span><br><span class="line">func &#x3D; _dispatch_call_block_and_release;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 这里又是重点内容</span><br><span class="line">return _dispatch_continuation_init_f(dc, dqu, ctxt, func, flags, dc_flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们进一步查看<code>_dispatch_continuation_init_f</code>源码，其内部主要是为了保存block</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">static inline dispatch_qos_t</span><br><span class="line">_dispatch_continuation_init_f(dispatch_continuation_t dc,</span><br><span class="line">dispatch_queue_class_t dqu, void *ctxt, dispatch_function_t f,</span><br><span class="line">dispatch_block_flags_t flags, uintptr_t dc_flags)</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; 默认优先级0</span><br><span class="line">pthread_priority_t pp &#x3D; 0;</span><br><span class="line">&#x2F;&#x2F; 设置dc_flags</span><br><span class="line">dc-&gt;dc_flags &#x3D; dc_flags | DC_FLAG_ALLOCATED;</span><br><span class="line">&#x2F;&#x2F; 设置方法</span><br><span class="line">dc-&gt;dc_func &#x3D; f;</span><br><span class="line">&#x2F;&#x2F; 方法实现。</span><br><span class="line">dc-&gt;dc_ctxt &#x3D; ctxt;</span><br><span class="line">&#x2F;&#x2F; 设置优先级</span><br><span class="line">if (!(flags &amp; DISPATCH_BLOCK_HAS_PRIORITY)) &#123;</span><br><span class="line">pp &#x3D; _dispatch_priority_propagate();</span><br><span class="line">&#125;</span><br><span class="line">_dispatch_continuation_voucher_set(dc, flags);</span><br><span class="line">&#x2F;&#x2F; 对block调用的优先级处理</span><br><span class="line">return _dispatch_continuation_priority_set(dc, dqu, pp, flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上内容呢，是<code>qos = _dispatch_continuation_init(dc, dq, work, 0, dc_flags);</code>的内部实现，接下来我们再看下一句代码<br><code>_dispatch_continuation_async</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">static inline void</span><br><span class="line">_dispatch_continuation_async(dispatch_queue_class_t dqu,</span><br><span class="line">dispatch_continuation_t dc, dispatch_qos_t qos, uintptr_t dc_flags)</span><br><span class="line">&#123;</span><br><span class="line">#if DISPATCH_INTROSPECTION</span><br><span class="line">if (!(dc_flags &amp; DC_FLAG_NO_INTROSPECTION)) &#123;</span><br><span class="line">_dispatch_trace_item_push(dqu, dc);</span><br><span class="line">&#125;</span><br><span class="line">#else</span><br><span class="line">(void)dc_flags;</span><br><span class="line">#endif</span><br><span class="line">return dx_push(dqu._dq, dc, qos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要执行的就是<code>dx_push</code>。我们全局搜了一下，它是一个宏。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define dx_push(x, y, z) dx_vtable(x)-&gt;dq_push(x, y, z)</span><br></pre></td></tr></table></figure><p>接下来，就有点迷茫了，<code>dq_push</code>是个什么鬼东西？全局搜一下。</p><p><img src="dq_push.jpg" alt=""></p><p>我们发现，dq_push的内容是根据当前类型赋值的，比如是串行，那就是一个<code>_dispatch_lane_push</code>，我们这里使用的并发队列，所以，应该执行的是<code>_dispatch_lane_concurrent_push</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">_dispatch_lane_concurrent_push(dispatch_lane_t dq, dispatch_object_t dou,</span><br><span class="line">dispatch_qos_t qos)</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; 一堆条件判断</span><br><span class="line">if (dq-&gt;dq_items_tail &#x3D;&#x3D; NULL &amp;&amp;</span><br><span class="line">!_dispatch_object_is_waiter(dou) &amp;&amp;</span><br><span class="line">!_dispatch_object_is_barrier(dou) &amp;&amp;</span><br><span class="line">_dispatch_queue_try_acquire_async(dq)) &#123;</span><br><span class="line">&#x2F;&#x2F; 我们先看看这个东西</span><br><span class="line">return _dispatch_continuation_redirect_push(dq, dou, qos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 最后会执行到这里。</span><br><span class="line">_dispatch_lane_push(dq, dou, qos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过一系列判断，执行到<code>_dispatch_continuation_redirect_push</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">static void</span><br><span class="line">_dispatch_continuation_redirect_push(dispatch_lane_t dl,</span><br><span class="line">dispatch_object_t dou, dispatch_qos_t qos)</span><br><span class="line">&#123;</span><br><span class="line">if (likely(!_dispatch_object_is_redirection(dou))) &#123;</span><br><span class="line">   &#x2F;&#x2F; 这里会生成_dc，内部就不细说了，主要是为了绑定block，target</span><br><span class="line">dou._dc &#x3D; _dispatch_async_redirect_wrap(dl, dou);</span><br><span class="line">&#125; else if (!dou._dc-&gt;dc_ctxt) &#123;</span><br><span class="line">   &#x2F;&#x2F; 如果没有实现，赋值一个</span><br><span class="line">dou._dc-&gt;dc_ctxt &#x3D; (void *)</span><br><span class="line">(uintptr_t)_dispatch_queue_autorelease_frequency(dl);</span><br><span class="line">&#125;</span><br><span class="line">   &#x2F;&#x2F; 这里指向target</span><br><span class="line">dispatch_queue_t dq &#x3D; dl-&gt;do_targetq;</span><br><span class="line">if (!qos) qos &#x3D; _dispatch_priority_qos(dq-&gt;dq_priority);</span><br><span class="line">&#x2F;&#x2F; 又来了一个dx_push</span><br><span class="line">dx_push(dq, dou, qos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里就有疑惑了，上一步刚执行了`dx_push·，怎么这里有来了一个？</p><p>其实就好比Person继承自NSObject，比如实现init方法，会通过isa指向父类，调用父类的方法，这里也是一样的，通过do_targetq指向父类，执行父类的方法。父类就是<code>_dispatch_root_queue_push</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">_dispatch_root_queue_push(dispatch_queue_global_t rq, dispatch_object_t dou,</span><br><span class="line">dispatch_qos_t qos)</span><br><span class="line">&#123;</span><br><span class="line">#if DISPATCH_USE_KEVENT_WORKQUEUE</span><br><span class="line">dispatch_deferred_items_t ddi &#x3D; _dispatch_deferred_items_get();</span><br><span class="line">&#x2F;&#x2F; 这里不是重点内容，不需要看</span><br><span class="line">if (unlikely(ddi &amp;&amp; ddi-&gt;ddi_can_stash)) &#123;...&#125;</span><br><span class="line">#endif</span><br><span class="line">#if HAVE_PTHREAD_WORKQUEUE_QOS</span><br><span class="line">if (_dispatch_root_queue_push_needs_override(rq, qos)) &#123;</span><br><span class="line">return _dispatch_root_queue_push_override(rq, dou, qos);</span><br><span class="line">&#125;</span><br><span class="line">#else</span><br><span class="line">(void)qos;</span><br><span class="line">#endif</span><br><span class="line">_dispatch_root_queue_push_inline(rq, dou, dou, 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点也就是在<code>_dispatch_root_queue_push_inline</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">static inline void</span><br><span class="line">_dispatch_root_queue_push_inline(dispatch_queue_global_t dq,</span><br><span class="line">dispatch_object_t _head, dispatch_object_t _tail, int n)</span><br><span class="line">&#123;</span><br><span class="line">struct dispatch_object_s *hd &#x3D; _head._do, *tl &#x3D; _tail._do;</span><br><span class="line">if (unlikely(os_mpsc_push_list(os_mpsc(dq, dq_items), hd, tl, do_next))) &#123;</span><br><span class="line">return _dispatch_root_queue_poke(dq, n, 0);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个函数内部执行<code>_dispatch_root_queue_poke</code>，这个函数内部其实也就是一个<code>_dispatch_root_queue_poke_slow</code>方法。是整个dispatch中相当重要的一环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">static void</span><br><span class="line">_dispatch_root_queue_poke_slow(dispatch_queue_global_t dq, int n, int floor) &#123;</span><br><span class="line">...</span><br><span class="line">&#x2F;&#x2F; 这里执行跟类queue的初始化，内部是一个dispatch_once，只会初始化一次。单利，下一章介绍</span><br><span class="line">_dispatch_root_queues_init();</span><br><span class="line">...</span><br><span class="line">&#x2F;&#x2F; 如果是Global类型的函数，直接返回了。</span><br><span class="line">if (dx_type(dq) &#x3D;&#x3D; DISPATCH_QUEUE_GLOBAL_ROOT_TYPE)</span><br><span class="line">#endif</span><br><span class="line">&#123;</span><br><span class="line">_dispatch_root_queue_debug(&quot;requesting new worker thread for global &quot;</span><br><span class="line">&quot;queue: %p&quot;, dq);</span><br><span class="line">r &#x3D; _pthread_workqueue_addthreads(remaining,</span><br><span class="line">_dispatch_priority_to_pp_prefer_fallback(dq-&gt;dq_priority));</span><br><span class="line">(void)dispatch_assume_zero(r);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#x2F;&#x2F; 这中间省略的代码是判断remaining数，也就是需要创建的线程数。</span><br><span class="line">do &#123;</span><br><span class="line">_dispatch_retain(dq); &#x2F;&#x2F; released in _dispatch_worker_thread</span><br><span class="line">&#x2F;&#x2F; 循环创建线程</span><br><span class="line">while ((r &#x3D; pthread_create(pthr, attr, _dispatch_worker_thread, dq))) &#123;</span><br><span class="line">if (r !&#x3D; EAGAIN) &#123;</span><br><span class="line">(void)dispatch_assume_zero(r);</span><br><span class="line">&#125;</span><br><span class="line">_dispatch_temporary_resource_shortage();</span><br><span class="line">&#125;</span><br><span class="line">&#125; while (--remaining);</span><br><span class="line">...</span><br><span class="line">&#125; while (!os_atomic_cmpxchgv2o(dq, dgq_thread_pool_size, t_count,</span><br><span class="line">t_count - remaining, &amp;t_count, acquire));</span><br></pre></td></tr></table></figure><p>这个是GCD内部相当重点的一个点，首先进行root_queues的初始化，然后创建线程来执行任务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_dispatch_root_queues_init();</span><br><span class="line"></span><br><span class="line">_dispatch_root_queues_init(void)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_once_f(&amp;_dispatch_root_queues_pred, NULL,</span><br><span class="line">_dispatch_root_queues_init_once);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化函数内部调用的<code>dispatch_once_f</code>，只会执行一次，这一内容，下一章会有介绍。<code>_dispatch_root_queues_init_once</code>重点要看的是这个内部是个啥。</p><p><code>_dispatch_root_queues_init_once</code>的内部实现代码就不放出来了，太长了，主要的作用就是创建与线程直接的依赖，同时关联线程的回调方法<code>_dispatch_worker_thread2</code>。</p><p>root_queues初始化完成之后，再创建线程，但是内部是怎么调用block实现的，下一章有介绍。</p><p>接下来，我们返回到<code>_dispatch_lane_concurrent_push</code>这里，也就是连续的<code>dq_push</code>之后，最终会执行<code>_dispatch_lane_push</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">_dispatch_lane_push(dispatch_lane_t dq, dispatch_object_t dou,</span><br><span class="line">dispatch_qos_t qos)</span><br><span class="line">&#123;</span><br><span class="line">dispatch_wakeup_flags_t flags &#x3D; 0;</span><br><span class="line">struct dispatch_object_s *prev;</span><br><span class="line"></span><br><span class="line">if (unlikely(_dispatch_object_is_waiter(dou))) &#123;</span><br><span class="line">return _dispatch_lane_push_waiter(dq, dou._dsc, qos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch_assert(!_dispatch_object_is_global(dq));</span><br><span class="line">qos &#x3D; _dispatch_queue_push_qos(dq, qos);</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">os_mpsc_push_update_prev(os_mpsc(dq, dq_items), prev, dou._do, do_next);</span><br><span class="line">if (flags) &#123;</span><br><span class="line">  &#x2F;&#x2F; 这里的重点是wakeup</span><br><span class="line">return dx_wakeup(dq, qos, flags);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而dx_wakeup与dx_push如出一辙，都是宏定义，根据当前队列进行赋值，这里就不细说了，直接选择root类型的方法。</p><p>由于代码巨大，这里直接放了截图。</p><p><img src="wakeup.jpg" alt=""></p><p>最后执行的是wakeup，要保持线程是清醒的，其实就是为了保活。直到block执行完毕。没有target没有上一层之后，执行release操作。</p><p>这个也就是dispatch_async的实现。下一章会继续block是如何调用的。</p><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><ol><li><p>GCD的介绍</p></li><li><p>同步、异步函数的介绍</p></li><li><p>串行队列、并发队列</p></li><li><p>函数与队列的4种组合，以及面试题</p><ol><li>并发不会等待一个任务执行完成才执行。</li><li>串行会等待一个任务执行完毕才执行。</li><li>异步函数下，不管是串行队列还是并行队列，都不影响block块之外的任务执。因为block内部是在新开启的线程中执行的。</li><li>同步函数下，并行队列不受影响，因为并行不需要等待上一个任务执行完成。如果是串行队列，那在当前线程下会发生死锁。</li></ol></li><li><p>主队列dispatch_get_main_queue，全局队列dispatch_get_global_queue内部实现</p></li><li><p>dispatch_queue_create创建一个队列的原理</p></li><li><p>dispatch_async内部实现，异步会创建线程，然后进行weakup保活操作，block执行完成之后进行释放。</p></li></ol><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="https://opensource.apple.com/tarballs/libdispatch/" target="_blank" rel="noopener">libdispatch源文件</a><br>这里是用的是libdispatch-1271.40.12.tar.gz文件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;GCD简介&quot;&gt;&lt;a href=&quot;#GCD简介&quot; class=&quot;headerlink&quot; title=&quot;GCD简介&quot;&gt;&lt;/a&gt;GCD简介&lt;/h1&gt;&lt;p&gt;全称是 Grand Central Dispatch。底层为C语言，将任务添加到队列，并且指定执行任务的函数。GCD
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Hash</title>
    <link href="http://liujiaboy.github.io/2021/05/10/%E9%80%86%E5%90%91/mima-2-Hash/"/>
    <id>http://liujiaboy.github.io/2021/05/10/%E9%80%86%E5%90%91/mima-2-Hash/</id>
    <published>2021-05-10T09:38:40.000Z</published>
    <updated>2021-05-31T02:29:59.114Z</updated>
    
    <content type="html"><![CDATA[<h1 id="base64-补充"><a href="#base64-补充" class="headerlink" title="base64 补充"></a>base64 补充</h1><blockquote><p>Base64就是一种基于64个字符来表示二进制数据的方法。没6个比特为一个单元，</p></blockquote><p>具体可以查看<a href="https://zh.wikipedia.org/wiki/Base64" target="_blank" rel="noopener">base64的解释</a></p><p>64个字符包括 <code>A-Z a-z 0-9 + /</code>，再加上<code>=</code>用来补位，加上【等号】就是65个。<br>64个字符分别对应 <code>0 - 63</code> 这64个数字，64个数字对应着4个6位二进制数。</p><p><img src="base64.jpg" alt=""></p><p>下方代码是在iOS中的一种编码、解码方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;编码</span><br><span class="line">- (NSString *)base64Encode:(NSString *)string&#123;</span><br><span class="line">    NSData *data &#x3D; [string dataUsingEncoding:NSUTF8StringEncoding];</span><br><span class="line">    return [data base64EncodedStringWithOptions: 0];</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;解码</span><br><span class="line">- (NSString *)base64Decode:(NSString *)string&#123;</span><br><span class="line">    NSData *data &#x3D; [[NSData alloc] initWithBase64EncodedString:string options:0];</span><br><span class="line">    return [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>base64只适用于表示二进制文件。</li><li>base64编码后，文件数量变多，不使用与大型数据。</li><li>base64和数据一一对应，不安全。</li></ol><h1 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h1><p>Hash，一般翻译做“散列”，也有直接音译为“哈希”的，就是把任意长度的输入通过散列算法变换成固定长度的输出，该输出就是散列值。</p><p>这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，所以不可能从散列值来确定唯一的输入值。简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。</p><p>hash不是加密算法。</p><h2 id="Hash特点"><a href="#Hash特点" class="headerlink" title="Hash特点"></a>Hash特点</h2><ul><li>算法公开</li><li>对相同数据运算，得到的结果是一样的</li><li>对不同数据运算，得到的结果是定长的，如MD5得到的结果默认是128位,32个字符（16进制标识）。</li><li>无法逆运算</li><li>信息摘要，信息“指纹”，是用来做数据识别的</li></ul><h2 id="常见的散列算法"><a href="#常见的散列算法" class="headerlink" title="常见的散列算法"></a>常见的散列算法</h2><p>常见的就是MD5，SHA等等。</p><h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p>MD5消息摘要算法（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。</p><p>MD5由美国密码学家罗纳德·李维斯特（Ronald Linn Rivest）设计，于1992年公开，用以取代MD4算法。</p><p>1996年后被证实存在弱点，可以被加以破解，对于需要高度安全性的资料，专家一般建议改用其他算法。</p><p>2004年，证实MD5算法无法防止碰撞攻击，因此不适用于安全性认证，如SSL公开密钥认证或是数字签名等用途。</p><p>md5现常用于文件校验。</p><h3 id="SHA"><a href="#SHA" class="headerlink" title="SHA"></a>SHA</h3><blockquote><p>安全散列算法（英语：Secure Hash Algorithm，缩写为SHA）是一个密码散列函数家族，是FIPS所认证的安全散列算法。能计算出一个数字消息所对应到的，长度固定的字符串（又称消息摘要）的算法。且若输入的消息不同，它们对应到不同字符串的几率很高。</p></blockquote><p>SHA家族的算法分别为：</p><ol><li>SHA-0：1993年发布，是SHA-1的前身。</li><li>SHA-1：1995年发布，SHA-1在许多安全协议中广为使用，包括TLS、GnuPG、SSH、S/MIME和IPsec，是MD5的后继者。但SHA-1的安全性在2010年以后已经不被大多数的加密场景所接受。</li><li>SHA-2：2001年发布，包括SHA-224、SHA-256、SHA-384、SHA-512、SHA-512/224、SHA-512/256。SHA-2目前没有出现明显的弱点。虽然至今尚未出现对SHA-2有效的攻击，但它的算法跟SHA-1基本上仍然相似。</li><li>SHA-3：2015年正式发布，由于对MD5出现成功的破解，以及对SHA-0和SHA-1出现理论上破解的方法，NIST感觉需要一个与之前算法不同的，可替换的加密散列算法，也就是现在的SHA-3。</li></ol><h2 id="MD5-SHA对比"><a href="#MD5-SHA对比" class="headerlink" title="MD5 - SHA对比"></a>MD5 - SHA对比</h2><p><img src="hash.jpg" alt=""></p><h2 id="Hash-用途"><a href="#Hash-用途" class="headerlink" title="Hash 用途"></a>Hash 用途</h2><ul><li>用户密码加密</li><li>搜索引擎</li><li>版权</li><li>数字签名</li></ul><h3 id="密码加密逻辑："><a href="#密码加密逻辑：" class="headerlink" title="密码加密逻辑："></a>密码加密逻辑：</h3><p>客户端在注册账号密码时，是必须加密的，但是怎么能保证密码的安全，那最好就是所有人都不知道，前后端都不知道密码，所以之前说的RSA加密就不行了，只要知道公钥或者私钥就可以破解了。</p><p>常用的加密方式有以下4种：</p><ol><li>直接使用MD5</li><li>MD5加盐</li><li>HMAC加密</li><li>在HAC加密方案上添加时间戳等方案</li></ol><h4 id="直接使用MD5"><a href="#直接使用MD5" class="headerlink" title="直接使用MD5"></a>直接使用MD5</h4><p>将密码等重要的文本内容直接使用md5进行加密，但是md5现在也不安全，大部分md5加密之后都可以被破解。<a href="https://www.cmd5.com/" target="_blank" rel="noopener">md5在线破解</a></p><p>md5现在常用于文件校验。</p><p>所以有了第二种方式：</p><h4 id="MD5加盐"><a href="#MD5加盐" class="headerlink" title="MD5加盐"></a>MD5加盐</h4><p>直接使用md5加密不算安全，那么就在文本上直接拼接一串字符串（盐、salt值），这样就可以防止被破解，但是如果添加的字符串泄露了，也通用会造成数据泄露的风险。</p><p>所以通常情况下，这个salt值都是由服务端生成的，每一个用户过来就对应的生成一个salt值，这种方式已经比第一种安全很多了。</p><p>那如果用户更换了设备，就需要先拿到salt值，然后再次输入密码，还是有可能被暴利破解。</p><p>所以有了第三种方式：</p><h4 id="HMAC加密"><a href="#HMAC加密" class="headerlink" title="HMAC加密"></a>HMAC加密</h4><p>HMAC被称为：<a href="https://zh.wikipedia.org/wiki/%E9%87%91%E9%91%B0%E9%9B%9C%E6%B9%8A%E8%A8%8A%E6%81%AF%E9%91%91%E5%88%A5%E7%A2%BC" target="_blank" rel="noopener">密钥散列消息认证码</a>。英语：Keyed-hash message authentication code），又称散列消息认证码（Hash-based message authentication code，缩写为HMAC）。</p><p>是一种通过特别计算方式之后产生的消息认证码（MAC），使用密码散列函数，同时结合一个加密密钥。它可以用来保证资料的完整性，同时可以用来作某个消息的身份验证。</p><p>通俗来讲，类似于我们现在的授权认证，比如当我们在新设备上登录微信，就需要老设备点击确认或者扫码操作，这种就是获取授权的一个操作。认证流程如下：</p><ol><li>先由客户端向服务器发出一个验证请求。</li><li>服务器接到此请求后生成一个随机数并通过网络传输给客户端（此为挑战）。</li><li>客户端将收到的随机数提供给ePass，由ePass使用该随机数与存储在ePass中的密钥进行HMAC-MD5运算并得到一个结果作为认证证据传给服务器（此为响应）。</li><li>与此同时，服务器也使用该随机数与存储在服务器数据库中的该客户密钥进行HMAC-MD5运算，如果服务器的运算结果与客户端传回的响应结果相同，则认为客户端是一个合法用户。</li></ol><p>这个过程是通过Hash运算得到一个值进行服务器端的验证。这种方式已经基于完美了，但还不够完美。</p><h4 id="HMAC-时间戳"><a href="#HMAC-时间戳" class="headerlink" title="HMAC+时间戳"></a>HMAC+时间戳</h4><p>如果非法分子使用这种授权，模拟用户登录，那就会有问题了。通常会加上时间戳验证，这个授权认证需要在某一个时间范围内进行，超过了时间就会失败。从而大大增加安全性。</p><h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><p>我们经常使用百度搜索、谷歌搜索也会，有时候搜索出来的东西都是一样的。比如：</p><p>搜索：<code>iOS NSString</code> 和 <code>NSString iOS</code>是一样的。首先对这两个进行md5加密，得到一个结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;iOS&quot; &#x3D; 1bdf605991920db11cbdf8508204c4eb</span><br><span class="line"></span><br><span class="line">&quot;NSString&quot; &#x3D; e4263c36f49e2d937749bb3c6c7bbadb</span><br></pre></td></tr></table></figure><p>这两个字符通过md5加密之后，相加得到的一个结果，所以不管顺序如何，得到的结果都是一样的。</p><h3 id="版权问题"><a href="#版权问题" class="headerlink" title="版权问题"></a>版权问题</h3><p>比如图片类型的网站，上传的第一份图片，就会生成一份原始的hash值。之后其他人下载之后使用，但是他们下载的不会是源文件，而是平台在内部做了处理重新生成的。</p><p>如果有人说我这个是正版的图片，你这个是盗版的，那就用原始文件进行对比处理。</p><h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><blockquote><p><a href="https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D" target="_blank" rel="noopener">数字签名</a>（又称公钥数字签名）是只有信息的发送者才能产生的别人无法伪造的一段数字串，这段数字串同时也是对信息的发送者发送信息真实性的一个有效证明。它是一种类似写在纸上的普通的物理签名，但是使用了公钥加密领域的技术来实现的，用于鉴别数字信息的方法。一套数字签名通常定义两种互补的运算，一个用于签名，另一个用于验证。</p><p>数字签名是非对称密钥加密技术与数字摘要技术的应用。</p></blockquote><h4 id="数字签名的实现"><a href="#数字签名的实现" class="headerlink" title="数字签名的实现"></a>数字签名的实现</h4><p>数字签名算法是依靠公钥加密技术来实现的。在公钥加密技术里，每一个使用者有一对密钥：一把公钥和一把私钥。公钥可以自由发布，但私钥则秘密保存；还有一个要求就是要让通过公钥推算出私钥的做法不可能实现。</p><p>普通的数字签名算法包括三种算法：</p><ol><li>一种密码生成算法</li><li>标记算法</li><li>验证算法</li></ol><p>通常情况下，使用Hash+RSA的方式实现数字签名。需要注意的是，私钥是保密的，公钥可以自由发布。</p><p><img src="signature.jpg" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>base64部分的补充</li><li>RSA终端命令</li><li>RSA特点<ul><li>RSA安全系数非常高（整个业务逻辑非常安全）</li><li>加密效率非常低（不能做大数据加密）</li><li>用来加密关键数据</li></ul></li><li>HASH特点<ul><li>不可逆运算</li><li>相同的数据，结果相同</li><li>不同的数据，长度相同</li><li>一般用于做数据的识别（密码、版权）</li></ul></li><li>md5及SHA</li><li>hash的应用：<ul><li>密码加密（HMAC + 时间戳）</li><li>数字签名<ul><li>算法：RSA+HASH</li><li>目的：验证数据的完整性，不被篡改</li><li>步奏：1.原始数据的hash值，2.使用rsa加密hash值，3.将原始数据+数字签名一起打包发送传递。</li></ul></li></ul></li></ul><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8" target="_blank" rel="noopener">散列函数</a><br><a href="https://zh.wikipedia.org/wiki/SHA%E5%AE%B6%E6%97%8F" target="_blank" rel="noopener">SHA家族</a><br><a href="https://www.cmd5.com/" target="_blank" rel="noopener">md5在线破解</a><br><a href="https://zh.wikipedia.org/wiki/%E9%87%91%E9%91%B0%E9%9B%9C%E6%B9%8A%E8%A8%8A%E6%81%AF%E9%91%91%E5%88%A5%E7%A2%BC" target="_blank" rel="noopener">密钥散列消息认证码</a><br><a href="https://zh.wikipedia.org/wiki/%E6%95%B8%E4%BD%8D%E7%B0%BD%E7%AB%A0" target="_blank" rel="noopener">数字签名-维基百科</a><br><a href="https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D" target="_blank" rel="noopener">数字签名-百度百科</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;base64-补充&quot;&gt;&lt;a href=&quot;#base64-补充&quot; class=&quot;headerlink&quot; title=&quot;base64 补充&quot;&gt;&lt;/a&gt;base64 补充&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Base64就是一种基于64个字符来表示二进制数据的方法。
      
    
    </summary>
    
    
      <category term="逆向" scheme="http://liujiaboy.github.io/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="ARM汇编" scheme="http://liujiaboy.github.io/tags/ARM%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>内存5大分区</title>
    <link href="http://liujiaboy.github.io/2021/05/09/OC%E5%8E%9F%E7%90%86/%E5%86%85%E5%AD%985%E5%A4%A7%E5%88%86%E5%8C%BA/"/>
    <id>http://liujiaboy.github.io/2021/05/09/OC%E5%8E%9F%E7%90%86/%E5%86%85%E5%AD%985%E5%A4%A7%E5%88%86%E5%8C%BA/</id>
    <published>2021-05-09T14:23:17.000Z</published>
    <updated>2021-05-10T08:35:30.639Z</updated>
    
    <content type="html"><![CDATA[<p>内存主要分为5大区：</p><ol><li>栈 stack</li><li>对 heap</li><li>全局区/静态区</li><li>常量区</li><li>代码区</li></ol><p><img src="memory.jpg" alt=""></p><p>这张图详细的介绍了5大分区的分配情况。</p><p>栈是从高地址向低地址开始分配，了解汇编的同学应该知道栈顶和栈底，这两个寄存器，栈顶处与低地址区，栈底处于高地址区。</p><p>堆是从低地址向高地址开始分配。在堆中获取数据相对比较麻烦，所以都是在栈中开辟空间指向堆。</p><p>当栈和堆有一方不断开辟空间，导致两个处于临界点时，就会发生堆栈溢出。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;内存主要分为5大区：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;栈 stack&lt;/li&gt;
&lt;li&gt;对 heap&lt;/li&gt;
&lt;li&gt;全局区/静态区&lt;/li&gt;
&lt;li&gt;常量区&lt;/li&gt;
&lt;li&gt;代码区&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;memory.jpg&quot; alt=&quot;&quot;&gt;&lt;/p
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>多线程</title>
    <link href="http://liujiaboy.github.io/2021/05/08/OC%E5%8E%9F%E7%90%86/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://liujiaboy.github.io/2021/05/08/OC%E5%8E%9F%E7%90%86/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2021-05-08T00:40:32.000Z</published>
    <updated>2021-05-10T08:35:30.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><h2 id="1-什么是线程"><a href="#1-什么是线程" class="headerlink" title="1. 什么是线程"></a>1. 什么是线程</h2><p><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Multithreading/AboutThreads/AboutThreads.html#//apple_ref/doc/uid/10000057i-CH6-SW2" target="_blank" rel="noopener">官方文档：线程编程指南</a></p><blockquote><p>线程是在应用程序内部实现多个执行路径的相对轻量的方法。在系统级别，程序并排运行，系统根据每个程序的需求和其他程序的需求为每个程序分配执行时间。但是，每个程序中都存在一个或多个执行线程，这些线程可用于同时或以几乎同时的方式执行不同的任务。系统本身实际上管理着这些执行线程，调度它们在可用内核上运行，并根据需要抢先中断它们以允许其他线程运行。</p></blockquote><ul><li>多个线程可以提高应用程序的感知响应能力。</li><li>多线程可以提高应用程序在多核系统上的实时性能。</li></ul><h2 id="2-什么是进程"><a href="#2-什么是进程" class="headerlink" title="2. 什么是进程"></a>2. 什么是进程</h2><p>进程是指在系统中正在运行的一个应用程序。每个进程之间是独立的，每个进程均运行在其专用的且受保护的内存空间内。</p><h2 id="3-两者的关系"><a href="#3-两者的关系" class="headerlink" title="3. 两者的关系"></a>3. 两者的关系</h2><ul><li>线程是进程的基本执行单元，一个进程的所有任务都在线程中执行。</li><li>进程要想执行任务，必须得有线程，进程至少要有一条线程。</li><li>程序启动会默认开启一条线程，这条线程被称为主线程或 UI 线程。</li><li>同一进程的线程共享本进程的地址空间，而进程之间则时独立的。</li><li>同一进程内的线程共享进程的资源，如：内存、I/O、CPU等，而进程之间是独立的。</li><li>一个进程崩溃后，保护模式下，不会对其他进程产生影响。一个线程崩溃则整个进程死掉。进程比线程健壮。</li><li>进程切换时，消耗的资源大，效率低。设计频繁切换时，是哦那个线程好于进程。</li><li>线程不能独立执行，必须依存于进程（应用程序）。</li><li>线程时处理器调度的基本单位，进程不是。</li><li>线程没有地址空间，线程保护在进程地址空间中。</li></ul><h2 id="4-多线程的优点"><a href="#4-多线程的优点" class="headerlink" title="4. 多线程的优点"></a>4. 多线程的优点</h2><ul><li>能适当提高程序的执行效率</li><li>能适当提高资源的利用率(CPU，内存)</li><li>线程上的任务执行完成后，线程会自动销毁</li></ul><h2 id="5-多线程的缺点"><a href="#5-多线程的缺点" class="headerlink" title="5. 多线程的缺点"></a>5. 多线程的缺点</h2><ul><li>开启线程需要占用一定的内存空间(默认情况下，每一个线程都占512KB) </li><li>如果开启大量的线程，会占用大量的内存空间，降低程序的性能</li><li>线程越多，CPU 在调用线程上的开销就越大</li><li>程序设计更加复杂，比如线程间的通信、多线程的数据共享</li><li>多线程操作增加代码复杂度</li></ul><h2 id="6-时间片"><a href="#6-时间片" class="headerlink" title="6. 时间片"></a>6. 时间片</h2><p>CPU在多个任务之间进行快速的切换，这个时间间隔就是时间片。</p><ul><li>单核CPU同一时间，CPU只能处理1个线程（只能有一个线程执行）</li><li>多线程同时执行，是CPU快速在多个线程直接的切换，因为CPU调度线程的时间足够快，就造成了多线程的”同时“执行的效果。</li><li>如果线程数非常多，CPU会在N个线程之间切换，消耗大量的CPU资源，线程的执行效率会降低。</li></ul><h2 id="7-线程的声明周期"><a href="#7-线程的声明周期" class="headerlink" title="7. 线程的声明周期"></a>7. 线程的声明周期</h2><p><img src="thread-life.jpg" alt=""></p><h2 id="8-线程池的调度"><a href="#8-线程池的调度" class="headerlink" title="8. 线程池的调度"></a>8. 线程池的调度</h2><p><img src="thread-used.jpg" alt=""></p><p>4种饱和策略</p><ul><li>AbortPolicy 直接抛出RejectedExecutionExeception异常来阻止系统正常运行 </li><li>CallerRunsPolicy 将任务回退到调用者</li><li>DisOldestPolicy 丢掉等待最久的任务</li><li>DisCardPolicy 直接丢弃任务</li></ul><p>那么这里有一个问题，是不是创建的线程优先级越高，执行的就越快呢？</p><p>答案是不一定，需要根据线程要使用的资源，已经线程池的饱和程度来判断。</p><ol><li>如果这个线程需要很大的资源，比如处理几个G和处理几KB效率肯定是不一样的。</li><li>如果线程池处于饱和状态，并且都在执行状态，是没有办法把正在执行的线程取消掉的。</li></ol><p>这就需要锁来解决，</p><h1 id="多线程解决方案："><a href="#多线程解决方案：" class="headerlink" title="多线程解决方案："></a>多线程解决方案：</h1><p>常见的多线程有pthread、NSThread、GCD、NSOperation：</p><p><img src="" alt=""></p><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><p>两个人买票，同一时间相同的操作，A买的时候有100张，B买的时候也有100张，那AB都买完的时候应该只剩下998张才对，但是如果不处理的情况下，会出现资源抢占的问题。</p><p>这就需要锁来解决。</p><h2 id="1-atomic与nonatomic"><a href="#1-atomic与nonatomic" class="headerlink" title="1. atomic与nonatomic"></a>1. atomic与nonatomic</h2><p>atomic：原子属性(线程安全)，针对多线程设计的，使用属性时默认是atomic，保证同一时间只有一个线程能够写入(但是同一个时间多个线程都可以取值)。atomic本身就有一把锁(自旋锁) 单写多读:单个线程写入，多个线程可以读取。<br>nonatomic：非原子属性，非线程安全，适合内存小的移动设备。</p><blockquote><p>iOS开发建议：<br>所有属性都声明为 nonatomic<br>尽量避免多线程抢夺同一块资源，尽量将加锁、资源抢夺的业务逻辑交给服务器端处理，减小移动客户端的压力</p></blockquote><p>自旋锁 与 互斥锁的区别</p><p>两个都是进行同步操作而产生的。</p><p>自旋锁：发现其他线程在执行，当前线程会一直询问（忙等），直到当前线程开始执行。消耗性能比较高。适用于任务复杂度较低的。<br>互斥锁：发现其他线程在执行，当前线程即刻进入休眠（就绪状态），已知等待被唤醒执行。对于任务复杂度较高，资源较大使用互斥锁。</p><p>之后会有详细的描述，这里只是引出相关内容。</p><h1 id="NSPort通信"><a href="#NSPort通信" class="headerlink" title="NSPort通信"></a>NSPort通信</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;1. 创建主线程的port</span><br><span class="line">&#x2F;&#x2F; 子线程通过此端口发送消息给主线程</span><br><span class="line">self.myPort &#x3D; [NSMachPort port];</span><br><span class="line">&#x2F;&#x2F;2. 设置port的代理回调对象</span><br><span class="line">self.myPort.delegate &#x3D; self;</span><br><span class="line">&#x2F;&#x2F;3. 把port加入runloop，接收port消息</span><br><span class="line">[[NSRunLoop currentRunLoop] addPort:self.myPort forMode:NSDefaultRunLoopMode];</span><br></pre></td></tr></table></figure><p>创建了NSPort之后，一定要加入到NSRunLoop中包活，否则没有效果。</p><ol><li>runloop与线程是一一对应的，一个runloop对应一个核心的线程，为什么说是核心 的，是因为runloop是可以嵌套的，但是核心的只能有一个，他们的关系保存在一个全局 的字典里。 </li><li>runloop是来管理线程的，当线程的runloop被开启后，线程会在执行完任务后进入休 眠状态，有了任务就会被唤醒去执行任务。 </li><li>runloop在第一次获取时被创建，在线程结束时被销毁。 </li><li>对于主线程来说，runloop在程序一启动就默认创建好了。 </li><li>对于子线程来说，runloop是懒加载的，只有当我们使用的时候才会创建，所以在子线 程用定时器要注意:确保子线程的runloop被创建，不然定时器不会回调。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;h2 id=&quot;1-什么是线程&quot;&gt;&lt;a href=&quot;#1-什么是线程&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是线程&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>KVO原理</title>
    <link href="http://liujiaboy.github.io/2021/05/08/OC%E5%8E%9F%E7%90%86/KVO%E5%8E%9F%E7%90%86/"/>
    <id>http://liujiaboy.github.io/2021/05/08/OC%E5%8E%9F%E7%90%86/KVO%E5%8E%9F%E7%90%86/</id>
    <published>2021-05-08T00:39:59.000Z</published>
    <updated>2021-05-10T11:35:47.470Z</updated>
    
    <content type="html"><![CDATA[<h1 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h1><p>官方文档：<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/10000177i" target="_blank" rel="noopener">Key-Value Observing</a></p><blockquote><p><b>Important:</b> In order to understand key-value observing, you must first understand key-value coding.</p></blockquote><p>在官方的文档中，有这么一句话，要理解KVO，必须先知道KVC。</p><h1 id="KVO的基本使用"><a href="#KVO的基本使用" class="headerlink" title="KVO的基本使用"></a>KVO的基本使用</h1><p>下面创建一个<code>Person</code>类，并添加几个属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">static void *PersonNameContext &#x3D; &amp;PersonNameContext;</span><br><span class="line"></span><br><span class="line">@interface Person : NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic, copy) NSString *name;</span><br><span class="line">@property (nonatomic, copy) NSString *nickName;</span><br><span class="line">@property (nonatomic, copy) NSString *fullName;</span><br><span class="line">@property (nonatomic, strong) NSMutableArray *mArray;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h2 id="1-简单使用"><a href="#1-简单使用" class="headerlink" title="1. 简单使用"></a>1. 简单使用</h2><p>KVO对实例变量是不起作用的。可以试一下，即使添加了set方法、添加了<code>didChangeValueForKey:</code>方法也不行，即使使用了KVC也监听不到。正常使用来说，还是针对属性。</p><h3 id="1-1-添加监听"><a href="#1-1-添加监听" class="headerlink" title="1.1 添加监听"></a>1.1 添加监听</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(nullable void *)context;</span><br></pre></td></tr></table></figure><p>被监听者进行调用，添加一个监听对象，监听某一个属性的变化。context是上下文，在官方文档中，推荐使用<code>context</code>，不使用这个，也可以使用<code>NULL</code>代替。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 当前对象监听person对象的name属性的变化</span><br><span class="line">[self.person addObserver:self forKeyPath:@&quot;name&quot; options:(NSKeyValueObservingOptionNew) context:NULL];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;[self.person addObserver:self forKeyPath:@&quot;name&quot; options:(NSKeyValueObservingOptionNew) context:PersonNameContext]</span><br></pre></td></tr></table></figure><h3 id="1-2-监听变化"><a href="#1-2-监听变化" class="headerlink" title="1.2 监听变化"></a>1.2 监听变化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change context:(void *)context &#123;</span><br><span class="line">    &#x2F;&#x2F;if (context &#x3D;&#x3D; PersonNameContext) &#123;&#125;</span><br><span class="line">    NSLog(@&quot;%@&quot;,change);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以通过<code>keyPath</code>来判断某一个属性发生变化，如果监听了多个对象，并且有相同的属性，则在这里会添加一堆判断条件，会使代码变得臃肿，所以还是推荐使用context来判断。</p><h3 id="1-3-移除KVO"><a href="#1-3-移除KVO" class="headerlink" title="1.3 移除KVO"></a>1.3 移除KVO</h3><p>添加了监听之后，再<code>dealloc</code>时一定要移除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(nullable void *)context API_AVAILABLE(macos(10.7), ios(5.0), watchos(2.0), tvos(9.0));</span><br><span class="line">- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;</span><br></pre></td></tr></table></figure><h2 id="2-KVO中属性依赖"><a href="#2-KVO中属性依赖" class="headerlink" title="2. KVO中属性依赖"></a>2. KVO中属性依赖</h2><p>比如我们要监听<code>fullName</code>属性的变化，当<code>name</code>和<code>nickName</code>中的一个发生变化时，都需要改变<code>fullName</code>的值，需要怎么处理？如果同时监听两个属性也不是不行，但是肯定还有其他更简便的方法。这就需要添加依赖。</p><p>在<code>Person.m</code>中实现如下方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+ (NSSet&lt;NSString *&gt; *)keyPathsForValuesAffectingValueForKey:(NSString *)key &#123;</span><br><span class="line">    </span><br><span class="line">    NSSet *keyPaths &#x3D; [super keyPathsForValuesAffectingValueForKey:key];</span><br><span class="line">    if ([key isEqualToString:@&quot;fullName&quot;]) &#123;</span><br><span class="line">        NSArray *affectingKeys &#x3D; @[@&quot;name&quot;, @&quot;nickName&quot;];</span><br><span class="line">        keyPaths &#x3D; [keyPaths setByAddingObjectsFromArray:affectingKeys];</span><br><span class="line">    &#125;</span><br><span class="line">    return keyPaths;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以实现依赖监听了，也不用实现重复代码。</p><h2 id="3-KVO监听数组"><a href="#3-KVO监听数组" class="headerlink" title="3. KVO监听数组"></a>3. KVO监听数组</h2><p>我们实现对person.mArray的监听，但是当我们执行添加和删除操作时，方法并不会触发监听事件。</p><p>这也就时开始的时候所说的，KVO是基于KVC的，这个时候，我们利用KVC的方式获取数组就可以实现了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; [self.person.mArray addObject:@&quot;1&quot;];</span><br><span class="line">[[self.person mutableArrayValueForKey:@&quot;mArray&quot;] addObject:@&quot;1&quot;];</span><br></pre></td></tr></table></figure><h2 id="4-自动、手动实现监听"><a href="#4-自动、手动实现监听" class="headerlink" title="4. 自动、手动实现监听"></a>4. 自动、手动实现监听</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 自动开关</span><br><span class="line">+ (BOOL)automaticallyNotifiesObserversForKey:(NSString *)key</span><br></pre></td></tr></table></figure><p>这是一个系统方法，只需要重写即可，默认是YES，如果针对某些key返回了NO，则需要手动实现set方法。没有实现则不会监听到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (void)setName:(NSString *)name&#123;</span><br><span class="line">    [self willChangeValueForKey:@&quot;name&quot;];</span><br><span class="line">    _name &#x3D; name;</span><br><span class="line">    [self didChangeValueForKey:@&quot;name&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="KVO底层原理"><a href="#KVO底层原理" class="headerlink" title="KVO底层原理"></a>KVO底层原理</h1><p>我们通过监听一个中的<code>name</code>属性的变化来判断监听前后会出现什么不同，来查看KVO的底层实现原理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">self.person &#x3D; [Person new];</span><br><span class="line"></span><br><span class="line">[self.person addObserver:self forKeyPath:@&quot;name&quot; options:(NSKeyValueObservingOptionNew) context:NULL];</span><br></pre></td></tr></table></figure><p>我们在这一行代码添加一个断点，分别通过lldb打印当前person的变化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(lldb) po self.person</span><br><span class="line">&lt;Person: 0x60000294a010&gt;</span><br><span class="line">(lldb) po self.person-&gt;isa</span><br><span class="line">Person</span><br><span class="line">(lldb) po [self.person class]</span><br><span class="line">Person</span><br><span class="line">(lldb) po [self.person superclass]</span><br><span class="line">NSObject</span><br><span class="line"></span><br><span class="line">(lldb) po self.person</span><br><span class="line">&lt;Person: 0x60000294a010&gt;</span><br><span class="line">(lldb) po self.person-&gt;isa</span><br><span class="line">NSKVONotifying_Person</span><br><span class="line">(lldb) po [self.person class]</span><br><span class="line">Person</span><br><span class="line">(lldb) po [self.person superclass]</span><br><span class="line">NSObject</span><br></pre></td></tr></table></figure><p>我们发现虽然两次<code>po self.person</code>输出的都是Person类，指向的内存地址也是一样的，两次输出class和superClass确都相同。但是<code>isa</code>的指向却是完全不同，竟然变成了<code>NSKVONotifying_Person</code>。</p><p>那<code>NSKVONotifying_Person</code>是什么呢？怎么会创建一个这个东西，难道是<code>Person</code>的子类？<br>猜测应该是Person的子类。</p><p>为什么两次输出class和superClass都是一样的？<br>我们猜测可能是改写了class方法。</p><p>带着疑问，我们输出一下监听前后的方法列表，已经两个class的superClass。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">-(void)viewDidLoad &#123;</span><br><span class="line">    &#x2F;&#x2F; 通过使用字符串的方式获取Class</span><br><span class="line">    Class cls1 &#x3D; class_getSuperclass(objc_getClass(&quot;Person&quot;));</span><br><span class="line">    [self printClassAllMethod:objc_getClass(&quot;Person&quot;)];</span><br><span class="line">    NSLog(@&quot;cls1 &#x3D; %@&quot;, cls1);</span><br><span class="line">        </span><br><span class="line">    self.person &#x3D; [[Person alloc] init];</span><br><span class="line">    [self.person addObserver:self forKeyPath:@&quot;name&quot; options:(NSKeyValueObservingOptionNew) context:NULL];</span><br><span class="line">        </span><br><span class="line">    [self printClassAllMethod:objc_getClass(&quot;NSKVONotifying_Person&quot;)];</span><br><span class="line">    Class cls2 &#x3D; class_getSuperclass(objc_getClass(&quot;NSKVONotifying_Person&quot;));</span><br><span class="line">    NSLog(@&quot;cls2 &#x3D; %@&quot;, cls2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 遍历方法-ivar-property</span><br><span class="line">- (void)printClassAllMethod:(Class)cls &#123;</span><br><span class="line">    NSLog(@&quot;----%@----&quot;, cls);</span><br><span class="line">    unsigned int count &#x3D; 0;</span><br><span class="line">    Method *methodList &#x3D; class_copyMethodList(cls, &amp;count);</span><br><span class="line">    for (int i &#x3D; 0; i&lt;count; i++) &#123;</span><br><span class="line">        Method method &#x3D; methodList[i];</span><br><span class="line">        SEL sel &#x3D; method_getName(method);</span><br><span class="line">        IMP imp &#x3D; class_getMethodImplementation(cls, sel);</span><br><span class="line">        </span><br><span class="line">        NSLog(@&quot;%@-%p&quot;,NSStringFromSelector(sel),imp);</span><br><span class="line">    &#125;</span><br><span class="line">    free(methodList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 监听前</span><br><span class="line">KVODemo[74347:5007124] ----Person----</span><br><span class="line">KVODemo[74347:5007124] name-0x105ec6550</span><br><span class="line">KVODemo[74347:5007124] .cxx_destruct-0x105ec6580</span><br><span class="line">KVODemo[74347:5007124] setName:-0x105ec64f0</span><br><span class="line">KVODemo[74347:5007124] cls1 &#x3D; NSObject</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 监听后</span><br><span class="line">KVODemo[74347:5007124] ----NSKVONotifying_Person----</span><br><span class="line">KVODemo[74347:5007124] setName:-0x7fff207bab57</span><br><span class="line">KVODemo[74347:5007124] class-0x7fff207b9662</span><br><span class="line">KVODemo[74347:5007124] dealloc-0x7fff207b940b</span><br><span class="line">KVODemo[74347:5007124] _isKVOA-0x7fff207b9403</span><br><span class="line">KVODemo[74347:5007124] cls2 &#x3D; Person</span><br></pre></td></tr></table></figure><p>我们发现:</p><ul><li>监听前Person类中有3个方法，super是<code>NSObject</code></li><li>监听后Person类中有4个方法，super是<code>Person</code></li></ul><p>进一步验证了我们之前的猜测，<code>NSKVONotifying_Person</code>是<code>Person</code>的子类，并且重些了<code>setName:, class, dealloc</code>方法，因为地址都已经发生了变化。</p><p>打印一下对应的IMP地址，看看所在的调用栈：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(lldb) po (IMP)0x105ec64f0</span><br><span class="line">(KVODemo&#96;-[Person setName:] at Person.m:12)</span><br><span class="line"></span><br><span class="line">(lldb) po (IMP)0x7fff207bab57</span><br><span class="line">(Foundation&#96;_NSSetObjectValueAndNotify)</span><br><span class="line">return class_getSuperclass(object_getClass(self));</span><br></pre></td></tr></table></figure><p>也说明了，根本不是同一个IMP。当然<code>_NSSetObjectValueAndNotify</code>也不仅仅只有一种，使用<code>~ nm Foundation | grep ValueAndNotify</code>命令可以在iTerm2上查看对应的方法。比如：NSSetBoolValueAndNotify、NSSetIntValueAndNotify等等，根据当前属性的类型来判断的。</p><p>也正是因为重写了，<code>setName:</code>才会在外部调用时，person.name也会同时改变。<br>重新<code>class</code>方法，是为了不暴露<code>NSKVONotifying_Person</code>类，在外界调用时防止混淆。</p><p><img src="person-isa.jpg" alt=""></p><h1 id="自定义KVO"><a href="#自定义KVO" class="headerlink" title="自定义KVO"></a>自定义KVO</h1><p>根据上面的分析，如果自定义KVO的话，我们需要从下面几个方面入手：</p><ol><li><p>先判断key有没有set方法，有set方法才行。</p></li><li><p>动态生成子类：</p><ol><li>判断是否已经存在子类，没有创建新的子类。</li><li>注册类</li><li>添加class方法，重新class方法</li><li>添加setter方法，重新set方法，这里需要处理消息，发送给父类，通知修改值。</li></ol></li><li><p>修改isa指向</p></li><li><p>保存信息，方便回调。</p></li><li><p>remove时，重新设置isa指向父类。</p></li></ol><p>代码就不贴了，哪都有~</p><h1 id="通过GNU解析"><a href="#通过GNU解析" class="headerlink" title="通过GNU解析"></a>通过GNU解析</h1><p><a href="http://www.gnustep.org/resources/downloads.php" target="_blank" rel="noopener">gnu源码</a></p><p>gnu源码可以清晰的看到整体的流程，只是读起来可能会稍微费力一点，查看代码中的重要逻辑其实就可以了。</p><h1 id="FBKVOController"><a href="#FBKVOController" class="headerlink" title="FBKVOController"></a>FBKVOController</h1><p>稍微说一下这个，内部实现还是很值得学习的。</p><p>我们直接看源码实现：</p><p>首先创建一个<code>FBKVOController</code>类型的实例变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (instancetype)initWithObserver:(nullable id)observer retainObserved:(BOOL)retainObserved</span><br><span class="line">&#123;</span><br><span class="line">  self &#x3D; [super init];</span><br><span class="line">  if (nil !&#x3D; self) &#123;</span><br><span class="line">    _observer &#x3D; observer;</span><br><span class="line">    NSPointerFunctionsOptions keyOptions &#x3D; retainObserved ? NSPointerFunctionsStrongMemory|NSPointerFunctionsObjectPointerPersonality : NSPointerFunctionsWeakMemory|NSPointerFunctionsObjectPointerPersonality;</span><br><span class="line">    _objectInfosMap &#x3D; [[NSMapTable alloc] initWithKeyOptions:keyOptions valueOptions:NSPointerFunctionsStrongMemory|NSPointerFunctionsObjectPersonality capacity:0];</span><br><span class="line">    pthread_mutex_init(&amp;_lock, NULL);</span><br><span class="line">  &#125;</span><br><span class="line">  return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里会生成一个<code>NSMapTable</code>类型的数据，里面存放的是&lt;id, NSMutableSet&lt;_FBKVOInfo *&gt; *&gt;这种格式的数据。</p><p>然后走到添加监听的方法，这里也没啥好说的，就是创建了一个<code>_FBKVOInfo</code>，存放系统KVO需要的所有东西，重点再下一句代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (void)observe:(nullable id)object keyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options block:(FBKVONotificationBlock)block</span><br><span class="line">&#123;</span><br><span class="line">  NSAssert(0 !&#x3D; keyPath.length &amp;&amp; NULL !&#x3D; block, @&quot;missing required parameters observe:%@ keyPath:%@ block:%p&quot;, object, keyPath, block);</span><br><span class="line">  if (nil &#x3D;&#x3D; object || 0 &#x3D;&#x3D; keyPath.length || NULL &#x3D;&#x3D; block) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; create info</span><br><span class="line">  _FBKVOInfo *info &#x3D; [[_FBKVOInfo alloc] initWithController:self keyPath:keyPath options:options block:block];</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; observe object with info</span><br><span class="line">  [self _observe:object info:info];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，重点来了。会从map表中查找对应的object是否有对应的数据。然后与新创建的info进行比较，没有则添加到map表中。</p><p><code>_FBKVOSharedController</code>是一个单利，所有的观察者都通过它来进行监听，内部使用的系统的KVO。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">- (void)_observe:(id)object info:(_FBKVOInfo *)info</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; lock</span><br><span class="line">  pthread_mutex_lock(&amp;_lock);</span><br><span class="line"></span><br><span class="line">  NSMutableSet *infos &#x3D; [_objectInfosMap objectForKey:object];</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; check for info existence</span><br><span class="line">  _FBKVOInfo *existingInfo &#x3D; [infos member:info];</span><br><span class="line">  if (nil !&#x3D; existingInfo) &#123;</span><br><span class="line">    &#x2F;&#x2F; observation info already exists; do not observe it again</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; unlock and return</span><br><span class="line">    pthread_mutex_unlock(&amp;_lock);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; lazilly create set of infos</span><br><span class="line">  if (nil &#x3D;&#x3D; infos) &#123;</span><br><span class="line">    infos &#x3D; [NSMutableSet set];</span><br><span class="line">    [_objectInfosMap setObject:infos forKey:object];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; add info and oberve</span><br><span class="line">  [infos addObject:info];</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; unlock prior to callout</span><br><span class="line">  pthread_mutex_unlock(&amp;_lock);</span><br><span class="line"></span><br><span class="line">  [[_FBKVOSharedController sharedController] observe:object info:info];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在系统方法接收到改变时，会通过block、方法或者系统方法来返回数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (void)observeValueForKeyPath:(nullable NSString *)keyPath</span><br><span class="line">                      ofObject:(nullable id)object</span><br><span class="line">                        change:(nullable NSDictionary&lt;NSString *, id&gt; *)change</span><br><span class="line">                       context:(nullable void *)context</span><br></pre></td></tr></table></figure><p>最后就是移除。需要注意的是，添加的时候是新创建了一个info，移除的时候，为啥也是新创建了一个info？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (void)unobserve:(nullable id)object keyPath:(NSString *)keyPath</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; create representative info</span><br><span class="line">  _FBKVOInfo *info &#x3D; [[_FBKVOInfo alloc] initWithController:self keyPath:keyPath];</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; unobserve object property</span><br><span class="line">  [self _unobserve:object info:info];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_unobserve:info:</code>的内部实现与添加的时候有点类似，都是通过map去找对应的<code>_FBKVOInfo</code>。那新创建一个info能起到移除的效果吗？答案是肯定的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">- (void)_unobserve:(id)object info:(_FBKVOInfo *)info</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; lock</span><br><span class="line">  pthread_mutex_lock(&amp;_lock);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; get observation infos</span><br><span class="line">  NSMutableSet *infos &#x3D; [_objectInfosMap objectForKey:object];</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; lookup registered info instance</span><br><span class="line">  _FBKVOInfo *registeredInfo &#x3D; [infos member:info];</span><br><span class="line"></span><br><span class="line">  if (nil !&#x3D; registeredInfo) &#123;</span><br><span class="line">    [infos removeObject:registeredInfo];</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; remove no longer used infos</span><br><span class="line">    if (0 &#x3D;&#x3D; infos.count) &#123;</span><br><span class="line">      [_objectInfosMap removeObjectForKey:object];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; unlock</span><br><span class="line">  pthread_mutex_unlock(&amp;_lock);</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; unobserve</span><br><span class="line">  [[_FBKVOSharedController sharedController] unobserve:object info:registeredInfo];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为创建的临时变量info，是通过NSMutableSet获取<code>member</code>来获取的，是怎么获取到的。</p><blockquote><p>Each element of the set is checked for equality with object until a match is found or the end of the set is reached. Objects are considered equal if isEqual: returns YES.</p></blockquote><p><code>member:</code>方法是通过<code>isEqual:</code>来判断是否是对应的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;_FBKVOInfo</span><br><span class="line">- (NSUInteger)hash</span><br><span class="line">&#123;</span><br><span class="line">  return [_keyPath hash];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)isEqual:(id)object</span><br><span class="line">&#123;</span><br><span class="line">  if (nil &#x3D;&#x3D; object) &#123;</span><br><span class="line">    return NO;</span><br><span class="line">  &#125;</span><br><span class="line">  if (self &#x3D;&#x3D; object) &#123;</span><br><span class="line">    return YES;</span><br><span class="line">  &#125;</span><br><span class="line">  if (![object isKindOfClass:[self class]]) &#123;</span><br><span class="line">    return NO;</span><br><span class="line">  &#125;</span><br><span class="line">  return [_keyPath isEqualToString:((_FBKVOInfo *)object)-&gt;_keyPath];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写了<code>hash</code>方法和<code>isEqual:</code>方法，这样就可以直接通过member获取了。这源码的设计思路简直爽的一批<del>~</del>网上找到FBKVO流程图：</p><p><img src="FBKVOController.png" alt="网上找到FBKVO流程图"></p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ol><li>KVO的变量依赖</li><li>KVO的原理：<ol><li>动态生成子类<code>NSKVONotifying_A</code></li><li>注册类</li><li>动态添加class方法，返回父类</li><li>动态添加set方法，消息回传给父类，通知修改值</li><li>修改isa指向子类</li><li>移除KVO，修改isa执行父类</li></ol></li><li>GNU源码</li><li>FBKVOController源码设计思路。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;KVO&quot;&gt;&lt;a href=&quot;#KVO&quot; class=&quot;headerlink&quot; title=&quot;KVO&quot;&gt;&lt;/a&gt;KVO&lt;/h1&gt;&lt;p&gt;官方文档：&lt;a href=&quot;https://developer.apple.com/library/archive/document
      
    
    </summary>
    
    
      <category term="OC原理" scheme="http://liujiaboy.github.io/categories/OC%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="Objective-C," scheme="http://liujiaboy.github.io/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://liujiaboy.github.io/tags/iOS/"/>
    
  </entry>
  
</feed>
